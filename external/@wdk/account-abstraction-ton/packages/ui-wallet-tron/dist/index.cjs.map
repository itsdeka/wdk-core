{"version":3,"sources":["../src/TronWallet.ts","../src/createTronWallet.ts"],"names":[],"mappings":"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","sourcesContent":["import type {ChainKey, Transaction, TransactionResult} from '@layerzerolabs/ui-core';\nimport {AbstractWallet} from '@layerzerolabs/ui-wallet';\nimport type {Adapter, Network} from '@tronweb3/tronwallet-abstract-adapter';\nimport {action, computed, flow, makeObservable} from 'mobx';\n\ntype ChainKeyToTron = Partial<Record<ChainKey, string>>;\n\n/**\n * Available chainIds:\n * - Mainnet: 0x2b6653dc\n * - Shasta: 0x94a9059e\n * - Nile: 0xcd8690dc\n */\nconst tronChains: ChainKeyToTron = {\n  tron: '0x2b6653dc',\n  'tron-testnet': '0x94a9059e',\n};\n\nexport class TronWallet<\n  TAdapter extends NetworkAdapter = NetworkAdapter,\n> extends AbstractWallet<TAdapter> {\n  chainType = 'tron';\n  type: string;\n  chainKey?: string | undefined = undefined;\n  publicKey = undefined;\n\n  storageKey: string;\n\n  get icon() {\n    return this.adapter.icon;\n  }\n\n  get url() {\n    return this.adapter.url;\n  }\n\n  constructor(\n    protected adapter: TAdapter,\n    protected chainKeyToTron: ChainKeyToTron = tronChains,\n  ) {\n    super();\n    this.type = adapter.name;\n\n    this.storageKey = 'TRON:AUTOCONNECT:' + adapter.name;\n\n    makeObservable(this, {\n      isAvailable: true,\n      chainKey: true,\n      isConnected: true,\n      isConnecting: true,\n      isSwitchingChain: true,\n      publicKey: true,\n      nativeChainId: true,\n      address: true,\n      connect: flow,\n      disconnect: action.bound,\n      update: action.bound,\n      signer: computed,\n    });\n\n    if (isInBrowser()) {\n      this.subscribe();\n      this.update();\n    }\n  }\n\n  signAndSubmit(transactionRequest: Transaction<TAdapter>, _?: any): Promise<TransactionResult> {\n    return transactionRequest.signAndSubmitTransaction(this.signer);\n  }\n\n  protected subscribe() {\n    this.adapter.on('connect', this.handleConnect);\n    this.adapter.on('disconnect', this.update);\n    this.adapter.on('chainChanged', this.update);\n    this.adapter.on('accountsChanged', this.update);\n    this.adapter.on('readyStateChanged', this.update);\n    this.adapter.on('stateChanged', this.update);\n  }\n\n  handleConnect = async () => {\n    this.isAutoConnectEnabled = true;\n    await this.update();\n  };\n\n  async update() {\n    this.address = this.adapter.address ?? undefined;\n    this.isConnected = this.adapter.connected ? this.isAutoConnectEnabled : false;\n    this.isConnecting = this.adapter.connecting;\n    this.isAvailable = this.adapter.readyState !== 'NotFound';\n    if (!this.chainKey && this.address) {\n      const network = await this.adapter.network();\n      this.nativeChainId = network.chainId;\n      this.chainKey = toChainKey(this.chainKeyToTron, network.chainId);\n    }\n  }\n\n  connect = flow(\n    function* (this: TronWallet) {\n      try {\n        this.isAutoConnectEnabled = true;\n        this.isConnecting = true;\n        if (!this.adapter.connected) {\n          yield this.adapter.connect();\n        }\n      } finally {\n        this.isConnecting = false;\n        this.isConnected = true;\n      }\n    }.bind(this),\n  );\n\n  disconnect(): Promise<void> {\n    this.isAutoConnectEnabled = false;\n    this.isConnected = false;\n    return this.adapter.disconnect();\n  }\n  autoConnect(): Promise<void> {\n    if (!this.isAutoConnectEnabled) return Promise.reject('Auto connect is disabled');\n    return this.connect();\n  }\n  async switchChain(chainKey: ChainKey): Promise<void> {\n    const chainId = toTron(this.chainKeyToTron, chainKey);\n    if (chainId) return this.adapter.switchChain(chainId);\n    throw new Error(`Chain ${chainKey} not supported`);\n  }\n  async getNativeChainId(): Promise<number> {\n    const network = await this.adapter.network();\n    // todo: fix typings\n    if (network.chainId.startsWith('0x')) {\n      const chainId = Number(network.chainId);\n      if (Number.isFinite(chainId)) return chainId;\n    }\n    return network.chainId as any;\n  }\n  async getAddress(): Promise<string> {\n    const address = await this.adapter.address;\n    if (address && address !== '') return address;\n    throw new Error('No address available');\n  }\n\n  get signer() {\n    return this.adapter;\n  }\n}\n\nfunction isInBrowser() {\n  return typeof window !== 'undefined';\n}\n\nfunction toTron(map: ChainKeyToTron, chainKey: ChainKey): string | undefined {\n  return map[chainKey] ?? chainKey;\n}\n\nfunction toChainKey(map: ChainKeyToTron, tron: string): ChainKey | undefined {\n  for (const [key, value] of Object.entries(map)) {\n    if (value === tron) {\n      return key as ChainKey;\n    }\n  }\n}\n\nexport interface NetworkAdapter extends Adapter {\n  network(): Promise<Network>;\n}\n","import {type NetworkAdapter, TronWallet} from './TronWallet';\n\nexport function createTronWallet(adapter: NetworkAdapter) {\n  return new TronWallet(adapter);\n}\n"]}