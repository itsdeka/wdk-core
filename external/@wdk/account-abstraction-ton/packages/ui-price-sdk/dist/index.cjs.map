{"version":3,"sources":["../src/coinMarketCap/CoinMarketCapPriceProvider.ts","../src/common/CurrencyMappingIndex.ts","../src/coinMarketCap/zod.ts","../src/coinGecko/CoinGeckoPriceProvider.ts"],"names":["CoinMarketCapEndpoint","axios","DataLoader","CoinGeckoEndpoint"],"mappings":"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","sourcesContent":["import {\n  type Currency,\n  type FiatCurrency,\n  type PriceProvider,\n  type FiatAmount,\n  assert,\n} from '@layerzerolabs/ui-core';\nimport axios from 'redaxios';\nimport type {CurrencyMapping} from '../types';\nimport DataLoader from 'dataloader';\nimport {CurrencyMappingIndex} from '../common/CurrencyMappingIndex';\nimport {V2CryptoCurrencyQuotasLatestResponseSchema} from './zod';\nimport type {Logger} from '../common/Logger';\n\ntype Axios = ReturnType<typeof axios.create>;\n\nexport enum CoinMarketCapEndpoint {\n  SANDBOX = 'https://sandbox-api.coinmarketcap.com',\n  PRODUCTION = 'https://pro-api.coinmarketcap.com',\n}\n\nexport type CoinMarketCapId = number;\n\nexport type CoinMarketCapCurrencyMapping = CurrencyMapping & {\n  coinMarketCapId: number;\n};\n\nexport interface CoinMarketCapPriceProviderConfig {\n  apiKey: string;\n  endpoint: CoinMarketCapEndpoint;\n  logger?: Logger;\n}\n\nexport class CoinMarketCapPriceProvider implements PriceProvider {\n  private readonly http: Axios;\n  protected dataLoader: DataLoader<DataLoaderKey, FiatAmount, DataLoaderKey>;\n  protected index: CurrencyMappingIndex<CoinMarketCapCurrencyMapping>;\n\n  constructor(\n    protected readonly config: CoinMarketCapPriceProviderConfig,\n    protected readonly mappings: CoinMarketCapCurrencyMapping[],\n  ) {\n    // To make sure nobody will use this in a browser, we'll force the window to be undefined\n    assert(\n      typeof window === 'undefined',\n      'CoinMarketCapPriceProvider is not suitable for use in public environments, please move the definition to a server',\n    );\n\n    this.http = axios.create({\n      headers: {'X-CMC_PRO_API_KEY': config.apiKey, Accept: 'application/json'},\n      baseURL: config.endpoint,\n    });\n\n    this.dataLoader = new DataLoader(this.getBatchPrices);\n    this.index = new CurrencyMappingIndex(mappings);\n  }\n\n  // main method\n  async getCurrentPrice(currency: Currency, fiatCurrency: FiatCurrency): Promise<FiatAmount> {\n    const coinMarketCapId = this.getCoinMarketCapId(currency);\n    const key: DataLoaderKey = {\n      coinMarketCapId,\n      fiatCurrency,\n    };\n    return this.dataLoader.load(key);\n  }\n\n  protected getBatchPrices = async (keys: ReadonlyArray<DataLoaderKey>) => {\n    const coinMarketCapIds = Array.from(\n      new Set(keys.map((key) => key.coinMarketCapId).sort((a, b) => a - b)),\n    );\n    const fiatCurrencies = Array.from(new Set(keys.map((key) => key.fiatCurrency).sort()));\n\n    const response = await this.http.get('/v2/cryptocurrency/quotes/latest', {\n      params: {\n        id: coinMarketCapIds.join(','),\n        convert: fiatCurrencies.join(','),\n      },\n    });\n\n    // We validate the external data\n    const {data} = V2CryptoCurrencyQuotasLatestResponseSchema.parse(response.data);\n    this.config.logger?.debug('CoinMarketCap response', data);\n\n    const result: (FiatAmount | Error)[] = [];\n\n    // result must be populated in the same order as keys\n    // see https://github.com/graphql/dataloader\n    for (const key of keys) {\n      const quote = data[key.coinMarketCapId]?.quote;\n      const price = quote?.[key.fiatCurrency]?.price;\n      if (typeof price === 'number') {\n        const fiatAmount: FiatAmount = {\n          currency: key.fiatCurrency,\n          value: price,\n        };\n        result.push(fiatAmount);\n      } else {\n        const symbol = data[key.coinMarketCapId]?.symbol;\n        result.push(\n          new Error(\n            `Missing price data for ${symbol ?? ''} CoinMarketCap ID ${key.coinMarketCapId} and fiat currency ${key.fiatCurrency}`,\n            {cause: quote},\n          ),\n        );\n      }\n    }\n    return result;\n  };\n\n  protected getCoinMarketCapId(currency: Currency): CoinMarketCapId {\n    const mapping = this.index.get(currency);\n\n    if (!mapping)\n      throw new Error(\n        `Missing CoinMarketCap currency ID for currency ${currency.symbol} on chain ${currency.chainKey}`,\n      );\n\n    return mapping.coinMarketCapId;\n  }\n}\n\ntype DataLoaderKey = {\n  coinMarketCapId: number;\n  fiatCurrency: FiatCurrency;\n};\n","import {type Currency, isToken} from '@layerzerolabs/ui-core';\nimport type {CurrencyMapping} from '../types';\n\nexport class CurrencyMappingIndex<TCurrencyMapping extends CurrencyMapping = CurrencyMapping> {\n  constructor(protected readonly mappings: TCurrencyMapping[]) {\n    validateMappings(this.mappings);\n  }\n\n  // todo: optimize\n  get(currency: Currency): TCurrencyMapping | undefined {\n    const chainKey: string = currency.chainKey;\n    if (isToken(currency)) {\n      const address = currency.address.toLowerCase();\n\n      return this.mappings.find(\n        (mapping) => mapping.chainKey === chainKey && mapping.address?.toLowerCase() === address,\n      );\n    }\n\n    return this.mappings.find(\n      (mapping) => mapping.chainKey === chainKey && mapping.address == null,\n    );\n  }\n}\n\nfunction validateMappings(mappings: CurrencyMapping[]) {\n  const ids = new Set<string>();\n  for (const mapping of mappings) {\n    const id = `${mapping.chainKey}:${mapping.address ?? '0x'}`;\n    if (ids.has(id)) {\n      throw new Error(\n        `Duplicate mapping for chainKey ${mapping.chainKey} and address: ${\n          mapping.address ?? 'native'\n        }`,\n      );\n    } else {\n      ids.add(id);\n    }\n  }\n}\n","import {FiatCurrency} from '@layerzerolabs/ui-core';\nimport z from 'zod';\n\nexport const ResponseStatusSchema = z.object({\n  timestamp: z.coerce.date(),\n  error_code: z.number().optional(),\n  error_message: z.string().nullable(),\n  elapsed: z.number(),\n  credit_count: z.number(),\n  notice: z.string().nullable(),\n});\n\nexport const V2CryptoCurrencyQuotasLatestResponseSchema = z.object({\n  data: z.record(\n    z.coerce.number(),\n    z.object({\n      id: z.number(),\n      name: z.string(),\n      symbol: z.string(),\n      quote: z.record(\n        z.nativeEnum(FiatCurrency),\n        z\n          .object({\n            price: z.number().nullish(),\n            // We don't need these for now but we'll keep the zod types just in case\n            //\n            // volume_24h: z.number(),\n            // volume_change_24h: z.number(),\n            // percent_change_1h: z.number(),\n            // percent_change_24h: z.number(),\n            // percent_change_7d: z.number(),\n            // percent_change_30d: z.number(),\n            // market_cap: z.number(),\n            // market_cap_dominance: z.number(),\n            // fully_diluted_market_cap: z.number(),\n            // last_updated: z.string(),\n          })\n          // Since the schema is not aware of the fact that we might not be asking for all\n          // fiat currencies, we'll make this nullish to allow for partial records\n          .nullish(),\n      ),\n    }),\n  ),\n  status: ResponseStatusSchema,\n});\n","import {\n  hasAddress,\n  type ChainKey,\n  type Currency,\n  type FiatAmount,\n  type FiatCurrency,\n  type PriceProvider,\n} from '@layerzerolabs/ui-core';\nimport axios from 'redaxios';\nimport DataLoader from 'dataloader';\nimport type {CurrencyMapping} from '../types';\nimport {CurrencyMappingIndex} from '../common/CurrencyMappingIndex';\nimport type {Logger} from '../common/Logger';\n\ntype Axios = ReturnType<typeof axios.create>;\n\nexport type CoinGeckoPriceProviderConfig = {\n  endpoint: string;\n  apiKey?: string;\n  logger?: Logger;\n};\n\nexport enum CoinGeckoEndpoint {\n  PRO = 'https://pro-api.coingecko.com/api/v3/',\n  PUBLIC = 'https://api.coingecko.com/api/v3/',\n}\n\nexport type CoinGeckoCurrencyMapping = CurrencyMapping & {\n  coinGeckoId: CoinGeckoId;\n};\ntype CoinGeckoId = number | string;\n\nexport class CoinGeckoPriceProvider implements PriceProvider {\n  dataLoaderByCoinGeckoId: DataLoader<\n    DataLoaderKeyByCoingeckoId,\n    FiatAmount,\n    DataLoaderKeyByCoingeckoId\n  >;\n\n  dataLoadersByByChainAndAddress: Record<\n    string,\n    DataLoader<DataLoaderKeyByChainAndAddress, FiatAmount, DataLoaderKeyByChainAndAddress>\n  >;\n\n  protected index: CurrencyMappingIndex<CoinGeckoCurrencyMapping>;\n  protected http: Axios;\n\n  constructor(\n    protected config: CoinGeckoPriceProviderConfig,\n    protected mappings: CoinGeckoCurrencyMapping[],\n  ) {\n    this.index = new CurrencyMappingIndex(mappings);\n    this.http = axios.create({\n      headers: {'x-cg-pro-api-key': config.apiKey ?? '', Accept: 'application/json'},\n      baseURL: config.endpoint,\n    });\n    this.dataLoaderByCoinGeckoId = new DataLoader<\n      DataLoaderKeyByCoingeckoId,\n      FiatAmount,\n      DataLoaderKeyByCoingeckoId\n    >((keys) => this.getBatchPricesByCoinGeckoId(keys));\n    this.dataLoadersByByChainAndAddress = {};\n  }\n\n  protected getDataLoaderByChainAndAddress(chainKey: string) {\n    let dataLoader = this.dataLoadersByByChainAndAddress[chainKey];\n    if (!dataLoader) {\n      dataLoader = new DataLoader<\n        DataLoaderKeyByChainAndAddress,\n        FiatAmount,\n        DataLoaderKeyByChainAndAddress\n      >((keys) => this.getBatchPricesByChainAndAddress(chainKey, keys));\n      this.dataLoadersByByChainAndAddress[chainKey] = dataLoader;\n    }\n    return dataLoader;\n  }\n\n  async getCurrentPrice(token: Currency, fiatCurrency: 'USD' | 'EUR'): Promise<FiatAmount> {\n    const mapping = this.index.get(token);\n    const chainKey = token.chainKey;\n    if (mapping?.coinGeckoId) {\n      const key: DataLoaderKeyByCoingeckoId = {\n        fiatCurrency,\n        symbol: token.symbol,\n        coinGeckoId: mapping.coinGeckoId,\n      };\n      return this.dataLoaderByCoinGeckoId.load(key);\n    } else if (hasAddress(token)) {\n      const dataLoader = this.getDataLoaderByChainAndAddress(chainKey);\n      const key: DataLoaderKeyByChainAndAddress = {\n        address: token.address.toLowerCase(),\n        chainKey,\n        symbol: token.symbol,\n        fiatCurrency,\n      };\n      return dataLoader.load(key);\n    }\n    throw new Error(`No CoinGecko mapping for chainKey ${chainKey} and symbol ${token.symbol}`);\n  }\n\n  getBatchPricesByCoinGeckoId = async (keys: ReadonlyArray<DataLoaderKeyByCoingeckoId>) => {\n    const coinGeckoIds = new Set<CoinGeckoId>(keys.map((key) => key.coinGeckoId));\n    const fiatCurrencies = new Set<FiatCurrency>(keys.map((key) => key.fiatCurrency));\n\n    const {data} = await this.http.get<CoinGeckoResponse>(`/simple/price`, {\n      params: {\n        ids: Array.from(coinGeckoIds).join(','),\n        vs_currencies: Array.from(fiatCurrencies).join(','),\n      },\n    });\n\n    this.config.logger?.debug('CoinGecko response', data);\n\n    const result: (FiatAmount | Error)[] = [];\n\n    for (const key of keys) {\n      const price = data[key.coinGeckoId]?.[key.fiatCurrency.toLowerCase()];\n      if (price) {\n        const fiatAmount: FiatAmount = {\n          currency: key.fiatCurrency,\n          value: price,\n        };\n        result.push(fiatAmount);\n      } else {\n        const error = new Error(`No ${key.fiatCurrency} price for id ${key.coinGeckoId}`);\n        result.push(error);\n      }\n    }\n\n    return result;\n  };\n\n  getBatchPricesByChainAndAddress = async (\n    chainKey: string,\n    keys: ReadonlyArray<DataLoaderKeyByChainAndAddress>,\n  ) => {\n    const fiatCurrencies = new Set<FiatCurrency>(keys.map((key) => key.fiatCurrency));\n    const contractAddresses = new Set<string>(keys.map((key) => key.address.toLowerCase()));\n\n    const platformId = this.getCoinGeckoPlatformId(chainKey);\n\n    const {data} = await this.http.get<CoinGeckoResponse>(`/simple/token_price/${platformId}`, {\n      params: {\n        contract_addresses: Array.from(contractAddresses).join(','),\n        vs_currencies: Array.from(fiatCurrencies).join(','),\n      },\n    });\n\n    this.config.logger?.debug('CoinGecko response', data);\n\n    const result: (FiatAmount | Error)[] = [];\n\n    for (const key of keys) {\n      const price = data[key.address]?.[key.fiatCurrency.toLowerCase()];\n      if (price) {\n        const fiatAmount: FiatAmount = {\n          currency: key.fiatCurrency,\n          value: price,\n        };\n        result.push(fiatAmount);\n      } else {\n        const error = new Error(\n          `No ${key.fiatCurrency} price for chainKey: ${chainKey} and address ${key.address}`,\n        );\n        result.push(error);\n      }\n    }\n    return result;\n  };\n\n  getCoinGeckoPlatformId(chainKey: string) {\n    const platformId = COIN_GECKO_PLATFORM_IDS[chainKey];\n    if (platformId) return platformId;\n    throw new Error(`CoinGecko platform id not defined for chainKey: ${chainKey}`);\n  }\n}\n\n// see\n// https://api.coingecko.com/api/v3/asset_platforms\nexport const COIN_GECKO_PLATFORM_IDS: Partial<{[chainKey in ChainKey]: string}> = {\n  ethereum: 'ethereum',\n  avalanche: 'avalanche',\n  polygon: 'polygon-pos',\n  bsc: 'binance-smart-chain',\n  zkevm: 'polygon-zkevm',\n  optimism: 'optimistic-ethereum',\n  arbitrum: 'arbitrum-one',\n  base: 'base',\n  // \"linea\": 'linea',\n  aptos: 'aptos',\n  kava: 'kava',\n  fantom: 'fantom',\n  moonbeam: 'moonbeam',\n  moonriver: 'moonriver',\n  // \"boba\": 'boba',\n};\n\ntype CoinGeckoResponse = Record<string, Record<string, number>>;\n\ntype DataLoaderKeyByCoingeckoId = {\n  coinGeckoId: CoinGeckoId;\n  symbol: string; // for debugging\n  fiatCurrency: FiatCurrency;\n};\n\ntype DataLoaderKeyByChainAndAddress = {\n  chainKey: string;\n  address: string;\n  symbol: string; // for debugging\n  fiatCurrency: FiatCurrency;\n};\n"]}