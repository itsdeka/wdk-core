{"version":3,"sources":["../src/AptosWallet.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  type AccountInfo,\n  type NetworkInfo,\n  NetworkName,\n  type AdapterPlugin,\n} from '@aptos-labs/wallet-adapter-core';\nimport {\n  AptosNativeChainId,\n  type AptosSubmitOptions,\n  type AptosTransaction,\n  type AptosSigner as IAptosSigner,\n} from '@layerzerolabs/ui-aptos';\nimport {\n  ChainType,\n  type ChainKey,\n  waitFor,\n  tryGetNetworkByNativeChainId,\n  assert,\n} from '@layerzerolabs/ui-core';\nimport {AbstractWallet} from '@layerzerolabs/ui-wallet';\nimport {action, computed, flow, makeObservable} from 'mobx';\n\nclass AptosSigner implements IAptosSigner {\n  constructor(public readonly adapter: Adapter) {}\n\n  sendTransaction = async (\n    payload: AptosTransaction,\n    options: AptosSubmitOptions,\n  ): Promise<{hash: string}> => {\n    const {hash} = await this.adapter.signAndSubmitTransaction(payload);\n    return {hash};\n  };\n}\n\n// there is a mess in types in the original `@aptos-labs/wallet-adapter-core`\n//\n// we need `connect`, `network`, and `account`\n// to be consistent across all adapters\n// and implement https://aptos.dev/standards/wallets\n//\n// some `plugins` might have to be adjusted to correctly implement `Adapter`\n\nexport type Adapter = Omit<\n  AdapterPlugin<string>,\n  'network' | 'connect' | 'disconnect' | 'signMessage'\n> & {\n  connect: () => Promise<AccountInfo>;\n  account: () => Promise<AccountInfo>;\n  disconnect: () => Promise<void>;\n\n  // Correct signature should be:\n  // network: () => Promise<NetworkInfo>;\n  // but some adapters don't implement the spec correctly\n  // (eg. pontem)\n  network: () => Promise<NetworkInfo | NetworkName>;\n};\n\nexport class AptosWallet extends AbstractWallet<AptosSigner> {\n  public readonly chainType = ChainType.APTOS;\n  public nativeChainId: AptosNativeChainId | undefined = undefined;\n  public networkInfo: NetworkInfo | undefined = undefined;\n  public signer?: AptosSigner | undefined = undefined;\n  public adapterPromise: Promise<Adapter>;\n  public adapter: Adapter | undefined = undefined;\n\n  constructor(\n    public readonly type: string,\n    adapterOrFactoryPromise: ValueOrPromise<Adapter> | (() => Adapter),\n  ) {\n    super();\n\n    makeObservable(this, {\n      isAvailable: true,\n      chainKey: computed,\n      networkInfo: true,\n      isConnected: true,\n      isConnecting: true,\n      isSwitchingChain: true,\n      publicKey: true,\n      nativeChainId: true,\n      address: true,\n      signer: true,\n    });\n\n    this.adapterPromise =\n      typeof adapterOrFactoryPromise === 'function'\n        ? waitForAdapter(adapterOrFactoryPromise)\n        : Promise.resolve(adapterOrFactoryPromise);\n\n    this.adapterPromise.then((adapter) => {\n      this.updateAdapter(adapter as unknown as Adapter);\n      this.subscribe();\n    });\n  }\n\n  // must be public because of makeObservable\n  protected updateAccount = action((account: AccountInfo) => {\n    const {address, publicKey} = account;\n    this.address = address?.toString() ?? undefined;\n    this.publicKey = toPublicKey(publicKey);\n  });\n\n  protected updateNetwork = action(async (network: NetworkInfo) => {\n    this.nativeChainId = this.mapNativeChainId(network);\n    this.networkInfo = network;\n  });\n\n  protected updateAdapter = action((adapter: Adapter) => {\n    this.adapter = adapter;\n    this.isAvailable = Boolean(adapter.provider);\n    // incorrect typings\n    this.signer = new AptosSigner(adapter as unknown as Adapter);\n  });\n\n  private subscribe() {\n    assert(this.adapter);\n    this.adapter.onAccountChange(this.updateAccount);\n    this.adapter.onNetworkChange(this.updateNetwork);\n  }\n\n  public autoConnect: () => Promise<void> = async () => {\n    if (!this.isAutoConnectEnabled) return Promise.reject();\n    try {\n      await this.adapterPromise;\n      await this.connect();\n    } catch (e) {\n      this.isAutoConnectEnabled = false;\n      throw e;\n    }\n  };\n\n  connect: () => Promise<void> = flow(\n    function* (this: AptosWallet) {\n      assert(this.isConnected === false);\n      assert(this.isConnecting === false);\n      this.isConnecting = true;\n      try {\n        assert(this.adapter);\n        const account: AccountInfo = yield this.adapter.connect();\n        const network: NetworkInfo = toNetworkInfo(yield this.adapter.network());\n        this.updateAccount(account);\n        this.updateNetwork(network);\n        this.isConnected = true;\n        this.isAutoConnectEnabled = true;\n      } finally {\n        this.isConnecting = false;\n      }\n    }.bind(this),\n  );\n\n  disconnect: () => Promise<void> = flow(\n    function* (this: AptosWallet) {\n      assert(this.adapter);\n      this.isAutoConnectEnabled = false;\n      yield this.adapter.disconnect();\n      this.isConnected = false;\n      this.networkInfo = undefined;\n      this.nativeChainId = undefined;\n      this.address = undefined;\n      this.publicKey = undefined;\n    }.bind(this),\n  );\n\n  switchChain = async (chainKey: ChainKey): Promise<void> => {\n    if (chainKey === this.chainKey) return;\n    throw new Error(`Switch network to ${chainKey}`);\n  };\n\n  public async getNativeChainId(): Promise<number> {\n    assert(this.adapter);\n    const networkInfo = toNetworkInfo(await this.adapter.network());\n    const nativeChainId = this.mapNativeChainId(networkInfo);\n    assert(nativeChainId, `Unsupported chain: ${networkInfo.name}`);\n    return nativeChainId;\n  }\n\n  public async getAddress(): Promise<string> {\n    assert(this.adapter);\n    const account = await this.adapter.account();\n    return account.address.toString();\n  }\n\n  protected mapNativeChainId(networkInfo?: NetworkInfo): AptosNativeChainId | undefined {\n    // providers have inconsistent naming\n    const name = networkInfo?.name?.toLowerCase();\n    if (name === NetworkName.Mainnet) return AptosNativeChainId.MAINNET;\n    if (name === NetworkName.Testnet) return AptosNativeChainId.TESTNET;\n    const chainId = Number(networkInfo?.chainId) as unknown;\n    if (chainId === AptosNativeChainId.MAINNET) return AptosNativeChainId.MAINNET;\n    if (chainId === AptosNativeChainId.TESTNET) return AptosNativeChainId.TESTNET;\n    return undefined;\n  }\n\n  public get chainKey(): ChainKey | undefined {\n    return tryGetNetworkByNativeChainId(this.chainType, this.nativeChainId)?.chainKey;\n  }\n}\n\nfunction toNetworkInfo(nameOrNetworkInfo: string | NetworkInfo): NetworkInfo {\n  if (typeof nameOrNetworkInfo === 'string') {\n    return {name: nameOrNetworkInfo.toLowerCase() as NetworkName};\n  }\n  return nameOrNetworkInfo;\n}\n\nfunction toPublicKey(publicKey: AccountInfo['publicKey']) {\n  return Array.isArray(publicKey) ? publicKey.at(0)?.toString() : publicKey?.toString();\n}\n\ntype ValueOrPromise<T> = T | Promise<T>;\n\n// If adapter is instantiated before the extension plugin is injected then the wallet is not detected correctly.\n// Calling adapter.connect() results in WalletType Address Info Error error to be thrown.\n// https://github.com/aptos-labs/wallet-adapter-plugin-template/issues/9\nfunction waitForAdapter(\n  factory: () => Adapter,\n  {timeout = 10_000, interval = 300} = {},\n): Promise<Adapter> {\n  let adapter: Adapter;\n  return waitFor(\n    () => {\n      adapter = factory();\n      return Boolean(adapter.provider);\n    },\n    {timeout, interval},\n  ).then(() => adapter);\n}\n"]}