{"version":3,"sources":["../src/CosmosWallet.ts","../src/CosmosMetaMaskWallet.ts","../src/KeplrWallet.ts","../src/LeapWallet.ts"],"names":[],"mappings":"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","sourcesContent":["import {type Wallet, AbstractWallet} from '@layerzerolabs/ui-wallet';\nimport {action, computed, flow, makeObservable} from 'mobx';\nimport {type ChainKey, assert} from '@layerzerolabs/ui-core';\nimport {type MainWalletBase, State, type WalletAccount} from '@cosmos-kit/core';\nimport type {CosmosSigner} from './CosmosSigner';\n\nexport const defaultCosmosWalletConfig = {\n  defaultChainKey: 'cosmoshub',\n};\n\nexport type BaseWallet = Wallet<CosmosSigner>;\nexport type CosmosWalletConfig<TWallet extends MainWalletBase = MainWalletBase> = {\n  wallet: TWallet;\n  defaultChainKey?: ChainKey;\n};\nexport abstract class CosmosWallet<\n  TWallet extends MainWalletBase = MainWalletBase,\n> extends AbstractWallet<CosmosSigner> {\n  public readonly chainType = 'cosmos' as any;\n  public abstract type: string;\n  public chainKey: ChainKey | undefined = undefined;\n  protected wallet: TWallet;\n  protected unsubscribe: () => void = noop;\n\n  get url() {\n    for (const item of this.wallet.walletInfo?.downloads ?? []) {\n      // todo: decide which link to use\n      return item.link;\n    }\n  }\n\n  get icon() {\n    const logo = this.wallet.walletInfo.logo;\n    return typeof logo === 'string' ? logo : logo?.major;\n  }\n  protected log = console;\n  protected state: State = State.Init;\n\n  constructor(protected readonly config: CosmosWalletConfig<TWallet>) {\n    super();\n    makeObservable(this, {\n      isAvailable: true,\n      chainKey: true,\n      isConnected: true,\n      isConnecting: true,\n      isSwitchingChain: true,\n      publicKey: true,\n      nativeChainId: true,\n      address: true,\n      signer: computed,\n    });\n    this.wallet = config.wallet;\n    this.update();\n  }\n\n  protected subscribe(): void {\n    if (!this.wallet.emitter) return;\n    const events = [\n      //\n      'broadcast_client',\n      'broadcast_env',\n      'sync_connect',\n      'sync_disconnect',\n    ];\n    for (const event of events) {\n      this.wallet.emitter.off(event, this.update); // ensure no duplicate listeners\n      this.wallet.emitter.on(event, this.update);\n    }\n  }\n\n  protected update = action(() => {\n    this.isConnected = this.wallet.isActive;\n    this.isAvailable = this.wallet.isWalletNotExist === false;\n    this.isConnecting = this.wallet.isWalletConnecting;\n  });\n\n  connect: BaseWallet['connect'] = flow(\n    function* (this: CosmosWallet, chainKey: ChainKey | undefined) {\n      assert(this.isConnected === false, 'Wallet is already connected.');\n      assert(this.isConnecting === false, 'Wallet is already connecting.');\n      assert(this.isAvailable === true, 'Wallet is not available.');\n      assert(this.wallet, 'Missing wallet property');\n      chainKey = chainKey ?? this.config.defaultChainKey ?? 'cosmoshub';\n\n      try {\n        this.isConnecting = true;\n        this.subscribe();\n        yield this.wallet.connect(true);\n        const account: WalletAccount = yield this.wallet.client.getAccount!(chainKey);\n\n        // same chainKey used for both\n        this.nativeChainId = chainKey;\n        this.chainKey = chainKey;\n\n        this.isConnecting = false;\n        this.address = account.address;\n        this.publicKey = account.pubkey.toString();\n        this.isConnected = true;\n        this.isAutoConnectEnabled = true;\n      } finally {\n        this.isConnecting = false;\n      }\n    }.bind(this),\n  );\n\n  disconnect: BaseWallet['disconnect'] = flow(\n    function* (this: CosmosWallet) {\n      yield this.wallet.disconnect(true);\n      this.isConnected = false;\n      this.address = undefined;\n      this.nativeChainId = undefined;\n      this.isAutoConnectEnabled = false;\n    }.bind(this),\n  );\n\n  switchChain: BaseWallet['switchChain'] = flow(\n    function* (this: CosmosWallet, chainKey: ChainKey) {\n      throw new Error('Not implemented.');\n    }.bind(this),\n  );\n\n  async getNativeChainId(): Promise<number> {\n    throw new Error('Not implemented.');\n  }\n\n  async getAddress(): Promise<string> {\n    assert(this.chainKey, 'Wallet is not connected to known chainKey.');\n    assert(this.wallet.client, 'Missing wallet.client property');\n    const account = await this.wallet.client.getAccount!(this.chainKey);\n    return account.address;\n  }\n\n  public autoConnect = async () => {\n    if (!this.isAutoConnectEnabled) return Promise.reject();\n    await this.wallet.connect(true);\n    if (this.isAvailable) {\n      await this.connect();\n    }\n  };\n\n  // @ts-ignore\n  get signer(): CosmosSigner {\n    return this.wallet;\n  }\n  set signer(value: unknown) {\n    // pass\n  }\n}\n\nconst noop = () => {};\n","import {CosmosWallet} from './CosmosWallet';\n\nexport class CosmosMetaMaskWallet extends CosmosWallet {\n  public override readonly type = 'MetaMask';\n}\n","import {CosmosWallet} from './CosmosWallet';\n\nexport class KeplrWallet extends CosmosWallet {\n  public override readonly type = 'Keplr';\n}\n","import {CosmosWallet} from './CosmosWallet';\n\nexport class LeapWallet extends CosmosWallet {\n  public override readonly type = 'Leap';\n}\n"]}