{"version":3,"sources":["../src/utils/createTransaction.ts","../src/utils/isAptosAddress.ts","../src/utils/errors.ts","../src/providers/BalanceProvider__aptos.ts","../src/AptosResourceProvider.ts","../src/providers/ResourceProvider__currency_aptos.ts","../src/AptosManagedCoinRegisterService.ts","../src/types/AptosNativeChainId.ts","../src/utils/utils.ts"],"names":["assert","isAptosChainKey","isToken","CurrencyAmount","AptosNativeChainId","executor","query","fee"],"mappings":";AAIO,SAAS,kBACd,sBACA,EAAC,QAAQ,YAAW,GACpB;AACA,QAAM,KAA2D;AAAA,IAC/D,MAAM,SAAS;AACb,aAAO;AAAA,IACT;AAAA,IACA,MAAM,yBAAyB,QAAiD;AAC9E,YAAM,WAAW,MAAM,OAAO,gBAAgB,oBAA2B;AACzE,aAAO;AAAA,QACL,QAAQ,SAAS;AAAA,QACjB,MAAM,OAAO;AACX,gBAAM,SAAS,MAAM,YAAY,6BAA6B,SAAS,MAAM;AAAA,YAC3E,cAAc;AAAA,UAChB,CAAC;AACD,iBAAO;AAAA,YACL,QAAQ,OAAO;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA,YAAY,GAAiC;AAC3C,YAAM,IAAI,MAAM,yBAAyB;AAAA,IAC3C;AAAA,IACA,gBAAgB,CAAC,MAA4C;AAC3D,YAAM,IAAI,MAAM,2BAA2B;AAAA,IAC7C;AAAA,EACF;AAEA,SAAO;AACT;;;ACnCO,SAAS,eAAe,SAA2B;AAExD,MAAI,OAAO,YAAY;AAAU,WAAO;AACxC,MAAI,CAAC,QAAQ,WAAW,IAAI;AAAG,WAAO;AACtC,MAAI,QAAQ,WAAW;AAAI,WAAO;AAClC,SAAO;AACT;;;ACNO,SAAS,0BAA0B,GAAQ;AAChD,SAAO,aAAa,GAAG,oBAAoB;AAC7C;AAEO,SAAS,2BAA2B,GAAQ;AACjD,SAAO,aAAa,GAAG,sBAAsB;AAC/C;AAEO,SAAS,yBAAyB,GAAQ;AAC/C,SAAO,aAAa,GAAG,mBAAmB;AAC5C;AAEA,SAAS,aAAa,GAAQ,WAAmB;AAC/C,MAAI,CAAC;AAAG,WAAO;AAEf,MAAI,EAAE,eAAe;AAAW,WAAO;AACvC,MAAI,EAAE,cAAc;AAAW,WAAO;AACtC,QAAM,OAAO,EAAE;AACf,MAAI,CAAC;AAAM,WAAO;AAClB,MAAI,KAAK,eAAe;AAAW,WAAO;AAC1C,MAAI,KAAK,cAAc;AAAW,WAAO;AACzC,SAAO;AACT;;;ACtBA;AAAA,EACE,UAAAA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,OAEK;;;ACRP,SAAQ,cAAa;AAKrB,OAAO,cAAc;AACrB,OAAO,eAAe;AAEf,IAAM,wBAAN,MAA4B;AAAA,EAGjC,YACmB,aACjB,UAAU,KACV;AAFiB;AAKjB,SAAK,sBAAsB;AAAA,MACzB,OAAO,YAAoB;AACzB,YAAI;AACF,iBAAO,eAAe,OAAO,CAAC;AAC9B,gBAAM,YAAY,MAAM,KAAK,YAAY,oBAAoB,OAAO;AACpE,iBAAO;AAAA,QACT,SAAS,GAAP;AACA,cAAI,yBAAyB,CAAC;AAAG,mBAAO,CAAC;AACzC,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA,EAAC,UAAU,CAAC,CAAC,OAAO,MAAM,SAAS,OAAO,IAAI,UAAU,OAAO,EAAC;AAAA,IAClE;AAAA,EACF;AAAA,EArBS;AAsBX;;;ADhBO,IAAM,yBAAN,MAAwD;AAAA,EAI7D,YAA6B,gBAAwC;AAAxC;AAAA,EAAyC;AAAA,EAHnD,kBAAkB;AAAA,EACpB,oBAA6D,CAAC;AAAA,EAI/E,SAAS,OAA0B;AACjC,WAAO,gBAAgB,MAAM,QAAQ;AAAA,EACvC;AAAA,EAEU,oBAAoB,UAA2C;AACvE,QAAI,mBAAmB,KAAK,kBAAkB,QAAQ;AACtD,QAAI,qBAAqB,QAAW;AAClC,YAAM,cAAc,KAAK,eAAe,QAAQ;AAChD,yBAAmB,IAAI,sBAAsB,WAAW;AACxD,WAAK,kBAAkB,QAAQ,IAAI;AAAA,IACrC;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,WAAW,OAAiB,SAAiB;AACjD,IAAAA,QAAO,eAAe,OAAO,CAAC;AAC9B,IAAAA,QAAO,gBAAgB,MAAM,QAAQ,CAAC;AACtC,IAAAA,QAAO,QAAQ,KAAK,CAAC;AACrB,UAAM,eAAe,wBAAwB,MAAM;AACnD,QAAI;AACF,YAAM,mBAAmB,KAAK,oBAAoB,MAAM,QAAQ;AAChE,YAAM,YAAY,MAAM,iBAAiB,oBAAoB,OAAO;AACpE,YAAM,WAAW,UAAU,KAAK,CAAC,MAAM,EAAE,SAAS,YAAY;AAC9D,UAAI,aAAa,QAAW;AAC1B,eAAO,eAAe,cAAc,OAAO,CAAC;AAAA,MAC9C;AACA,YAAM,UAAU,OAAQ,SAAS,KAAa,MAAM,EAAE,OAAO,CAAC;AAC9D,aAAO,eAAe,cAAc,OAAO,OAAO;AAAA,IACpD,SAAS,GAAP;AACA,UAAI,yBAAyB,CAAC,GAAG;AAC/B,eAAO,eAAe,cAAc,OAAO,CAAC;AAAA,MAC9C;AACA,YAAM;AAAA,IACR;AAAA,EACF;AACF;;;AExDA;AAAA,EAEE,mBAAAC;AAAA,EACA;AAAA,EACA,WAAAC;AAAA,OAGK;AAIA,IAAM,mCAAN,MAA0F;AAAA,EAC/F,YAA6B,SAA0C;AAA1C;AAAA,EAA2C;AAAA,EAExE,SAAS,UAAyC;AAChD,QAAI,CAAC,WAAW,QAAQ;AAAG,aAAO;AAClC,WAAOD,iBAAgB,SAAS,QAAQ;AAAA,EAC1C;AAAA,EAEA,SAAS,UAAuD;AAC9D,WAAO,KAAK,QAAQ,aAAa,QAAQ;AAAA,EAC3C;AAAA,EAEA,MAAM,aAAa,UAAoB,SAAmC;AACxE,WAAO,KAAK,QAAQ,aAAa,UAAU,OAAO;AAAA,EACpD;AAAA,EAEA,QAAQ,UAA4B;AAClC,WAAO,GAAG,SAAS,YAAYC,SAAQ,QAAQ,IAAI,SAAS,UAAU;AAAA,EACxE;AACF;;;AC9BA;AAAA,EACE,UAAAF;AAAA,EAEA,kBAAAG;AAAA,EACA;AAAA,EACA,WAAAD;AAAA,OAEK;AAKA,IAAM,kCAAN,MAAsC;AAAA,EAC3C,YACmB,aACA,kBACjB;AAFiB;AACA;AAAA,EAChB;AAAA,EAEH,MAAM,aAAa,UAAoB,SAAmC;AACxE,UAAM,YAAY,MAAM,KAAK,iBAAiB,oBAAoB,OAAO;AACzE,UAAM,OAAO,gBAAgB,QAAQ;AACrC,WAAO,UAAU,KAAK,CAAC,UAAU,MAAM,SAAS,IAAI;AAAA,EACtD;AAAA,EAEA,MAAM,aAAa,OAAoD;AACrE,UAAM,EAAC,YAAW,IAAI;AACtB,IAAAF,QAAOE,SAAQ,KAAK,CAAC;AACrB,IAAAF,QAAO,WAAW;AAClB,UAAM,WAAW,MAAM;AAEvB,UAAM,UAAoC;AAAA,MACxC,MAAM;AAAA,MACN,UAAU;AAAA,MACV,gBAAgB,CAAC,QAAQ;AAAA,MACzB,WAAW,CAAC;AAAA,IACd;AAEA,UAAM,KAA+B;AAAA,MACnC,MAAM,SAAS;AACb,eAAO;AAAA,MACT;AAAA,MACA,MAAM,yBAAyB,QAAQ;AACrC,cAAM,WAAW,MAAM,OAAO,gBAAgB,OAAO;AACrD,eAAO;AAAA,UACL,QAAQ,SAAS;AAAA,UACjB,MAAM,OAAO;AACX,kBAAM,SAAS,MAAM,YAAY,6BAA6B,SAAS,MAAM;AAAA,cAC3E,cAAc;AAAA,YAChB,CAAC;AACD,mBAAO;AAAA,cACL,QAAQ,OAAO;AAAA,YACjB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA,MAAM,YAAY,QAAQ;AAMxB,cAAM,WAAW;AACjB,eAAO,OAAO,QAAQ;AAAA,MACxB;AAAA,MACA,MAAM,eAAe,QAAwD;AAC3E,cAAM,EAAC,cAAc,SAAQ,IAAI,MAAM,YAAY,iBAAiB;AACpE,cAAM,WAAW,MAAM,GAAG,YAAY,MAAM;AAC5C,cAAM,WAAW,OAAO,QAAQ,IAAI,WAAW;AAE/C,cAAM,SAAS,kBAAkB,MAAM,QAAQ;AAC/C,eAAOG,gBAAe,cAAc,QAAQ,QAAQ;AAAA,MACtD;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;AAEA,SAAS,gBAAgB,OAAiB;AACxC,MAAID,SAAQ,KAAK,GAAG;AAClB,UAAM,OAAO,wBAAwB,MAAM;AAC3C,WAAO;AAAA,EACT;AACA,SAAO;AACT;;;ACnFO,IAAK,qBAAL,kBAAKE,wBAAL;AACL,EAAAA,wCAAA,aAAU,KAAV;AACA,EAAAA,wCAAA,aAAU,KAAV;AAFU,SAAAA;AAAA,GAAA;;;ACDZ,SAA+C,KAAK,WAAW,gBAAe;AAE9E,IAAM,mBAAmB,YAAY,KAAK,EAAE,SAAS;AAGrD,eAAsB,UACpB,QACA,UACA,WACA,QACA,aACA,OACA;AACA,QAAM,CAAC,WAAW,sBAAsB,IAAI,MAAM,QAAQ,IAAI;AAAA,IAC5D,aAAa,QAAQ,UAAU,WAAW,QAAQ,KAAK;AAAA,IACvD,qBAAqB,QAAQ,UAAU,KAAK;AAAA,EAC9C,CAAC;AAED,QAAM,CAAC,WAAW,UAAU,IAAI,MAAM,QAAQ,IAAI;AAAA,IAChD,gBAAgB,QAAQ,UAAU,UAAU,QAAQ,QAAQ,KAAK;AAAA,IACjE,gBAAgB,QAAQ,UAAU,UAAU,SAAS,QAAQ,KAAK;AAAA,EACpE,CAAC;AAED,UAAQ,IAAI,0BAA0B,uBAAuB,IAAI;AACjE,QAAM,EAAC,kBAAkB,eAAc,IAAI,uBAAuB;AAKlE,MAAI,WAAW,WAAW,WAAW,WAAW,eAAe,OAAO,WAAW;AACjF,cAAY,UAAU,WAAW,UAAU,eAAe,OAAO,WAAW;AAC5E,cAAa,OAAO,cAAc,IAAI,WAAY,OAAO,GAAK;AAE9D,SAAO;AACT;AAEA,eAAsB,qBAAqB,QAAqB,UAAoB,OAAe;AACjG,SAAO,OAAO;AAAA,IACZ,SAAS,UAAU;AAAA,IACnB,GAAG,SAAS,UAAU;AAAA,IACtB;AAAA,EACF;AACF;AAEA,eAAsB,aACpB,QACA,UACA,WACA,QACA,OACwB;AACxB,QAAM,uBAAuB,oBAAoB,QAAQ,UAAU,QAAQ,KAAK;AAEhF,MAAI,YAAuC;AAC3C,MAAI;AACF,UAAM,SAAS,GAAG,SAAS,UAAU;AAErC,UAAM,WAAW,MAAM,OAAO;AAAA,MAC5B,SAAS,UAAU;AAAA,MACnB,GAAG;AAAA,MACH;AAAA,IACF;AACA,UAAM,EAAC,OAAM,IAAI,SAAS;AAE1B,gBAAY,MAAM,OAAO;AAAA,MACvB,OAAO;AAAA,MACP;AAAA,QACE,UAAU,GAAG;AAAA,QACb,YAAY,GAAG;AAAA,QACf,KAAK;AAAA,UACH,YAAY,UAAU,OAAO,SAAS,EAAE,SAAS;AAAA,UACjD,UAAU,OAAO,SAAS;AAAA,QAC5B;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAEA,YAAQ,IAAI,YAAY,SAAS;AAAA,EACnC,SAAS,GAAP;AACA,QAAI,CAAC,kBAAkB,GAAG,GAAG,GAAG;AAC9B,YAAM;AAAA,IACR;AAAA,EACF;AAEA,QAAM,gBAAgB,MAAM;AAC5B,UAAQ,IAAI,iBAAiB,aAAa;AAC1C,QAAM,eAAe,YAAY,YAAY,WAAW,aAAa,IAAI;AAEzE,eAAa,SAAS,YAAY,aAAa,MAAM,EAAE,SAAS;AAChE,eAAa,UAAU,YAAY,aAAa,OAAO,EAAE,SAAS;AAClE,eAAa,wBAAwB,OAAO,aAAa,qBAAqB;AAC9E,eAAa,yBAAyB,OAAO,aAAa,sBAAsB;AAChF,SAAO;AACT;AAEA,eAAsB,gBACpB,QACA,UACA,SACA,QACA,OACA;AACA,MAAI;AACF,UAAM,SAAS,GAAG,SAAS,UAAU;AACrC,UAAM,WAAW,MAAM,OAAO,mBAAmB,SAAS,GAAG,kBAAkB,KAAK;AACpF,UAAM,EAAC,KAAI,IAAI,SAAS;AACxB,UAAM,WAAW,MAAM,OAAO;AAAA,MAC5B,KAAK;AAAA,MACL;AAAA,QACE,UAAU;AAAA,QACV,YAAY,GAAG;AAAA,QACf,KAAK,OAAO,SAAS;AAAA,MACvB;AAAA,MACA;AAAA,IACF;AACA,WAAO;AAAA,MACL,UAAU,OAAO,SAAS,QAAQ;AAAA,MAClC,cAAc,OAAO,SAAS,YAAY;AAAA,IAC5C;AAAA,EACF,SAAS,GAAP;AACA,QAAI,kBAAkB,GAAG,GAAG,GAAG;AAC7B,aAAO;AAAA,QACL,UAAU,OAAO,CAAC;AAAA,QAClB,cAAc,OAAO,CAAC;AAAA,MACxB;AAAA,IACF;AACA,UAAM;AAAA,EACR;AACF;AAEA,eAAsB,eACpB,QACA,UACA,WACA,QACA,eACA,OACA;AACA,QAAM,CAAC,QAAQ,IAAI,SAAS,WACxB,CAAC,SAAS,SAAS,SAAS,SAAS,SAAS,OAAO,IACrD,MAAM,YAAY,QAAQ,UAAU,WAAW,QAAQ,KAAK;AAEhE,QAAM,MAAM,MAAM,OAAO,UAAU,QAAQ,KAAK;AAChD,QAAM,CAAC,EAAE,OAAO,aAAa,IAAI,oBAAoB,aAAa;AAClE,UAAS,QAAQ,IAAI,WAAW,iBAAiB,IAAI,aAAc;AAEnE,iBAAe,OACbC,WACA,KACAC,QACsB;AACtB,QAAI;AACF,YAAM,SAAS,GAAG,SAAS,UAAU;AACrC,YAAM,WAAW,MAAM,OAAO;AAAA,QAC5BD;AAAA,QACA,GAAG;AAAA,QACHC;AAAA,MACF;AACA,YAAM,EAAC,KAAAC,KAAG,IAAI,SAAS;AACvB,YAAM,WAAW,MAAM,OAAO;AAAA,QAC5BA,KAAI;AAAA,QACJ;AAAA,UACE,UAAU;AAAA,UACV,YAAY,GAAG;AAAA,UACf,KAAK,IAAI,SAAS;AAAA,QACpB;AAAA,QACAD;AAAA,MACF;AACA,aAAO;AAAA,QACL,eAAe,OAAO,SAAS,eAAe;AAAA,QAC9C,YAAY,OAAO,SAAS,WAAW;AAAA,QACvC,UAAU,OAAO,SAAS,SAAS;AAAA,MACrC;AAAA,IACF,SAAS,GAAP;AACA,UAAI,kBAAkB,GAAG,GAAG,GAAG;AAC7B,eAAO;AAAA,UACL,eAAe;AAAA,UACf,YAAY;AAAA,UACZ,UAAU;AAAA,QACZ;AAAA,MACF;AACA,YAAM;AAAA,IACR;AAAA,EACF;AACF;AAEA,eAAsB,YACpB,QACA,UACA,WACA,QACA,OAC+B;AAC/B,QAAM,oBAAoB,sBAAsB,QAAQ,UAAU,WAAW,QAAQ,KAAK;AAC1F,QAAM,iBAAiB,mBAAmB,QAAQ,UAAU,MAAM;AAClE,MAAI;AACF,WAAO,MAAM;AAAA,EACf,SAAS,GAAP;AACA,QAAI,kBAAkB,GAAG,GAAG,GAAG;AAC7B,aAAO,MAAM;AAAA,IACf;AACA,UAAM;AAAA,EACR;AACF;AACA,eAAsB,aACpB,QACA,UACA,WACA,QACA,YACqB;AACrB,QAAM,SAAS,GAAG,SAAS,UAAU;AACrC,QAAM,WAAW,MAAM,OAAO,mBAAmB,WAAW,GAAG,gBAAgB;AAC/E,QAAM,EAAC,mBAAkB,IAAI,SAAS;AAEtC,MAAI;AACF,UAAM,WAAW,MAAM,OAAO,aAAa,mBAAmB,QAAQ;AAAA,MACpE,UAAU,GAAG;AAAA,MACb,YAAY;AAAA,MACZ,KAAK;AAAA,QACH,UAAU,OAAO,SAAS;AAAA,QAC1B,aAAa,WAAW,SAAS;AAAA,MACnC;AAAA,IACF,CAAC;AACD,WAAO,OAAO,QAAQ;AAAA,EACxB,SAAS,GAAP;AACA,QAAI,kBAAkB,GAAG,GAAG,GAAG;AAC7B,aAAO,OAAO,CAAC;AAAA,IACjB;AACA,UAAM;AAAA,EACR;AACF;AAEA,eAAsB,sBACpB,QACA,UACA,WACA,QACA,OAC+B;AAC/B,QAAM,SAAS,GAAG,SAAS,UAAU;AACrC,QAAM,WAAW,MAAM,OAAO,mBAAmB,WAAW,GAAG,uBAAuB,KAAK;AAC3F,QAAM,EAAC,OAAM,IAAI,SAAS;AAC1B,QAAM,WAAW,MAAM,OAAO;AAAA,IAC5B,OAAO;AAAA,IACP;AAAA,MACE,UAAU;AAAA,MACV,YAAY,GAAG;AAAA,MACf,KAAK,OAAO,SAAS;AAAA,IACvB;AAAA,IACA;AAAA,EACF;AACA,SAAO,CAAC,SAAS,UAAU,SAAS,OAAO;AAC7C;AAEA,eAAsB,mBACpB,QACA,UACA,QAC+B;AAC/B,QAAM,SAAS,GAAG,SAAS,UAAU;AACrC,QAAM,WAAW,MAAM,OAAO;AAAA,IAC5B,SAAS,UAAU;AAAA,IACnB,GAAG;AAAA,EACL;AAEA,QAAM,EAAC,OAAM,IAAI,SAAS;AAC1B,MAAI;AACF,UAAM,WAAW,MAAM,OAAO,aAAa,OAAO,QAAQ;AAAA,MACxD,UAAU;AAAA,MACV,YAAY,GAAG;AAAA,MACf,KAAK,OAAO,SAAS;AAAA,IACvB,CAAC;AACD,YAAQ,IAAI,oBAAoB,QAAQ;AACxC,WAAO,CAAC,SAAS,UAAU,SAAS,OAAO;AAAA,EAC7C,SAAS,GAAP;AACA,QAAI,kBAAkB,GAAG,GAAG,GAAG;AAC7B,aAAO,CAAC,IAAI,OAAO,CAAC,CAAC;AAAA,IACvB;AACA,UAAM;AAAA,EACR;AACF;AAQO,SAAS,oBACd,eAC0F;AAC1F,QAAM,OAAO,cAAc,CAAC,IAAI,MAAM,cAAc,CAAC;AACrD,MAAI,SAAS,GAAG;AAEd,QAAI,cAAc,WAAW;AAAI,YAAM,IAAI,MAAM,wBAAwB;AAEzE,UAAM,QAAQ,cAAc,MAAM,GAAG,EAAE;AACvC,WAAO,CAAC,MAAM,qBAAqB,KAAK,GAAG,IAAI,EAAE;AAAA,EACnD,WAAW,SAAS,GAAG;AAErB,QAAI,cAAc,UAAU;AAAI,YAAM,IAAI,MAAM,wBAAwB;AAExE,UAAM,QAAQ,cAAc,MAAM,GAAG,EAAE;AACvC,UAAM,gBAAgB,cAAc,MAAM,IAAI,EAAE;AAChD,UAAM,sBAAsB,cAAc,MAAM,EAAE;AAClD,WAAO;AAAA,MACL;AAAA,MACA,qBAAqB,KAAK;AAAA,MAC1B,qBAAqB,aAAa;AAAA,MAClC,UAAU,eAAe,mBAAmB,EAAE,SAAS;AAAA,IACzD;AAAA,EACF,OAAO;AACL,UAAM,IAAI,MAAM,wBAAwB;AAAA,EAC1C;AACF;AAEO,SAAS,0BACd,OACA,eACA,gBACW;AACX,MAAI,kBAAkB,IAAI;AACxB,WAAO,0BAA0B,KAAK;AAAA,EACxC;AACA,QAAM,SAAS,CAAC,GAAG,CAAC,EACjB,OAAO,MAAM,KAAK,qBAAqB,KAAK,CAAC,CAAC,EAC9C,OAAO,MAAM,KAAK,qBAAqB,aAAa,CAAC,CAAC,EACtD,OAAO,MAAM,KAAK,UAAU,OAAO,cAAc,EAAE,aAAa,CAAC,CAAC;AAErE,SAAO,OAAO,KAAK,MAAM;AAC3B;AAEO,SAAS,0BAA0B,OAA2C;AACnF,QAAM,SAAS,CAAC,GAAG,CAAC,EAAE,OAAO,MAAM,KAAK,qBAAqB,KAAK,CAAC,CAAC;AACpE,SAAO,WAAW,KAAK,OAAO,KAAK,MAAM,CAAC;AAC5C;AAEO,SAAS,qBAAqB,QAA4C;AAC/E,SAAO,IAAI,mBAAmB,MAAM,EAAE,QAAQ;AAChD;AAEO,SAAS,qBAAqB,OAA8B;AACjE,MAAI,MAAM,WAAW,GAAG;AACtB,UAAM,IAAI,MAAM,sCAAsC;AAAA,EACxD;AAEA,MAAI,eAAe;AACnB,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,mBAAgB,gBAAgB,KAAM,OAAO,MAAM,CAAC,CAAC;AAAA,EACvD;AAEA,SAAO;AACT;AAEO,SAAS,kBAAkB,GAAQ,QAAyB;AACjE,MAAI,aAAa,UAAU;AACzB,WAAO,EAAE,WAAW;AAAA,EACtB,WAEkB,aAAa,SAAS,EAAE,YAAY,KAAK,MAAM,gBAAgB,GAAG;AAClF,QAAI,OAAO,UAAU,eAAe,KAAK,GAAG,aAAa,GAAG;AAC1D,YAAM,MAAM;AACZ,aAAO,IAAI,WAAW;AAAA,IACxB,WAAW,OAAO,UAAU,eAAe,KAAK,GAAG,SAAS,GAAG;AAE7D,YAAM,MAAM;AACZ,aAAO,IAAI,WAAW;AAAA,IACxB;AAAA,EACF,WAAW,aAAa,OAAO;AAC7B,QAAI,OAAO,UAAU,eAAe,KAAK,GAAG,QAAQ,GAAG;AACrD,aAAQ,EAAU,WAAW;AAAA,IAC/B;AAAA,EACF;AACA,SAAO;AACT;AAeA,eAAsB,cACpB,QACA,UACA,WACA,QACA,eACA,aACA,OACqB;AACrB,QAAM,CAAC,QAAQ,WAAW,IAAI,MAAM,QAAQ,IAAI;AAAA,IAC9C,UAAU,QAAQ,UAAU,WAAW,QAAQ,aAAa,KAAK;AAAA,IACjE,eAAe,QAAQ,UAAU,WAAW,QAAQ,eAAe,KAAK;AAAA,EAC1E,CAAC;AAED,QAAM,WAAW,OAAO,MAAM,IAAI,OAAO,WAAW;AACpD,SAAO;AACT;AAEA,eAAsB,oBACpB,QACA,UACA,WACA,OACwB;AACxB,MAAI,SAAS,cAAc,QAAW;AACpC,UAAM,IAAI,MAAM,qEAAqE;AAAA,EACvF;AACA,QAAM,SAAS,GAAG,SAAS,UAAU;AACrC,QAAM,WAAW,MAAM,OAAO;AAAA,IAC5B,SAAS,UAAU;AAAA,IACnB,GAAG;AAAA,IACH;AAAA,EACF;AACA,QAAM,EAAC,OAAM,IAAI,SAAS;AAC1B,MAAI;AACF,WAAO,MAAM,OAAO;AAAA,MAClB,OAAO;AAAA,MACP;AAAA,QACE,UAAU;AAAA,QACV,YAAY,GAAG;AAAA,QACf,KAAK,UAAU,SAAS;AAAA,MAC1B;AAAA,MACA;AAAA,IACF;AAAA,EACF,SAAS,GAAP;AACA,QAAI,kBAAkB,GAAG,GAAG,GAAG;AAC7B,aAAO;AAAA,QACL,uBAAuB,OAAO,CAAC;AAAA,QAC/B,QAAQ;AAAA,QACR,wBAAwB,OAAO,CAAC;AAAA,QAChC,SAAS;AAAA,MACX;AAAA,IACF;AACA,UAAM;AAAA,EACR;AACF;AASO,SAAS,YAAY,SAAwC;AAClE,QAAM,WAAW,UAAU,OAAO,OAAO,EAAE,SAAS;AACpD,SAAO,UAAU;AAAA,IACf,OAAO,OAAO,CAAC,OAAO,MAAM,KAAK,SAAS,QAAQ,GAAG,GAAG,OAAO,KAAK,QAAQ,CAAC,CAAC,EAAE,SAAS;AAAA,EAC3F;AACF;AAEA,SAAS,cAAc,GAAuB,GAAgC;AAC5E,SAAO,YAAY,CAAC,EAAE,SAAS,MAAM,YAAY,CAAC,EAAE,SAAS;AAC/D;AAEA,SAAS,cAAc,GAAgC;AACrD,SAAO,cAAc,GAAG,gBAAgB;AAC1C;AAEA,SAAS,YAAY,QAAuB,eAA6C;AACvF,QAAM,eAAe,EAAC,GAAG,cAAa;AACtC,MAAI,CAAC,cAAc,OAAO,MAAM,GAAG;AACjC,iBAAa,SAAS,OAAO;AAAA,EAC/B;AACA,MAAI,CAAC,cAAc,OAAO,OAAO,GAAG;AAClC,iBAAa,UAAU,OAAO;AAAA,EAChC;AACA,MAAI,OAAO,wBAAwB,GAAG;AACpC,iBAAa,wBAAwB,OAAO;AAAA,EAC9C;AACA,MAAI,OAAO,yBAAyB,GAAG;AACrC,iBAAa,yBAAyB,OAAO;AAAA,EAC/C;AAEA,SAAO;AACT","sourcesContent":["import type {AptosClient, Types} from 'aptos';\nimport type {AptosSigner} from '../types/AptosSigner';\nimport type {CurrencyAmount, Transaction, TransactionResult} from '@layerzerolabs/ui-core';\n\nexport function createTransaction(\n  entryFunctionPayload: Types.EntryFunctionPayload,\n  {client: aptosClient}: {client: AptosClient},\n) {\n  const tx: Transaction<AptosSigner, Types.EntryFunctionPayload> = {\n    async unwrap() {\n      return entryFunctionPayload;\n    },\n    async signAndSubmitTransaction(signer: AptosSigner): Promise<TransactionResult> {\n      const response = await signer.sendTransaction(entryFunctionPayload as any);\n      return {\n        txHash: response.hash,\n        async wait() {\n          const result = await aptosClient.waitForTransactionWithResult(response.hash, {\n            checkSuccess: true,\n          });\n          return {\n            txHash: result.hash,\n          };\n        },\n      };\n    },\n    estimateGas(_: AptosSigner): Promise<bigint> {\n      throw new Error('Method not implemented.');\n    },\n    estimateNative: (_: AptosSigner): Promise<CurrencyAmount> => {\n      throw new Error('Function not implemented.');\n    },\n  };\n\n  return tx;\n}\n","export function isAptosAddress(address: unknown): boolean {\n  // example : 0xcd7b679af797fc8fca9cda616d10bd8fec94f4fd7ecb86e8cffe5514bad537f6\n  if (typeof address !== 'string') return false;\n  if (!address.startsWith('0x')) return false;\n  if (address.length !== 66) return false;\n  return true;\n}\n","export function isErrorOfResourceNotFound(e: any) {\n  return hasErrorCode(e, 'resource_not_found');\n}\n\nexport function isErrorOfTableItemNotFound(e: any) {\n  return hasErrorCode(e, 'table_item_not_found');\n}\n\nexport function isErrorOfAccountNotFound(e: any) {\n  return hasErrorCode(e, 'account_not_found');\n}\n\nfunction hasErrorCode(e: any, errorCode: string) {\n  if (!e) return false;\n  // todo: SDK is not stable - this is a workaround\n  if (e.error_code === errorCode) return true;\n  if (e.errorCode === errorCode) return true;\n  const body = e.body as any;\n  if (!body) return false;\n  if (body.error_code === errorCode) return true;\n  if (body.errorCode === errorCode) return true;\n  return false;\n}\n","import {\n  assert,\n  type BalanceProvider,\n  type Currency,\n  CurrencyAmount,\n  isToken,\n  isAptosChainKey,\n  type ChainKey,\n} from '@layerzerolabs/ui-core';\nimport {isAptosAddress} from '../utils/isAptosAddress';\n\nimport {isErrorOfAccountNotFound} from '../utils/errors';\nimport {AptosResourceProvider} from '../AptosResourceProvider';\nimport type {GetAptosClientFunction} from '../types/GetAptosClientFunction';\n\nexport class BalanceProvider__aptos implements BalanceProvider {\n  protected readonly endpointVersion = 1;\n  private readonly resourceProviders: Record<ChainKey, AptosResourceProvider> = {};\n\n  constructor(private readonly getAptosClient: GetAptosClientFunction) {}\n\n  supports(token: Currency): boolean {\n    return isAptosChainKey(token.chainKey);\n  }\n\n  protected getResourceProvider(chainKey: ChainKey): AptosResourceProvider {\n    let resourceProvider = this.resourceProviders[chainKey];\n    if (resourceProvider === undefined) {\n      const aptosClient = this.getAptosClient(chainKey);\n      resourceProvider = new AptosResourceProvider(aptosClient);\n      this.resourceProviders[chainKey] = resourceProvider;\n    }\n    return resourceProvider;\n  }\n\n  async getBalance(token: Currency, address: string) {\n    assert(isAptosAddress(address));\n    assert(isAptosChainKey(token.chainKey));\n    assert(isToken(token));\n    const resourceType = `0x1::coin::CoinStore<${token.address}>`;\n    try {\n      const resourceProvider = this.getResourceProvider(token.chainKey);\n      const resources = await resourceProvider.getAccountResources(address);\n      const resource = resources.find((r) => r.type === resourceType);\n      if (resource === undefined) {\n        return CurrencyAmount.fromRawAmount(token, 0);\n      }\n      const balance = BigInt((resource.data as any)['coin']['value']);\n      return CurrencyAmount.fromRawAmount(token, balance);\n    } catch (e) {\n      if (isErrorOfAccountNotFound(e)) {\n        return CurrencyAmount.fromRawAmount(token, 0);\n      }\n      throw e;\n    }\n  }\n}\n","import {assert} from '@layerzerolabs/ui-core';\nimport {isAptosAddress} from './utils/isAptosAddress';\nimport type {AptosClient} from 'aptos';\n\nimport {isErrorOfAccountNotFound} from './utils/errors';\nimport pMemoize from 'p-memoize';\nimport ExpiryMap from 'expiry-map';\n\nexport class AptosResourceProvider {\n  readonly getAccountResources: AptosClient['getAccountResources'];\n\n  constructor(\n    private readonly aptosClient: AptosClient,\n    cacheMs = 1000,\n  ) {\n    // tsup complains about private readonly properties not being initialized\n    // if we create this using readonly method assignment\n    this.getAccountResources = pMemoize(\n      async (address: string) => {\n        try {\n          assert(isAptosAddress(address));\n          const resources = await this.aptosClient.getAccountResources(address);\n          return resources;\n        } catch (e) {\n          if (isErrorOfAccountNotFound(e)) return [];\n          throw e;\n        }\n      },\n      {cacheKey: ([address]) => address, cache: new ExpiryMap(cacheMs)},\n    );\n  }\n}\n","import {\n  type Currency,\n  isAptosChainKey,\n  isCurrency,\n  isToken,\n  type ResourceProvider,\n  type Transaction,\n} from '@layerzerolabs/ui-core';\nimport type {AptosManagedCoinRegisterService} from '../AptosManagedCoinRegisterService';\nimport type {AptosSigner} from '../types/AptosSigner';\n\nexport class ResourceProvider__currency_aptos implements ResourceProvider<AptosSigner, Currency> {\n  constructor(private readonly service: AptosManagedCoinRegisterService) {}\n\n  supports(resource: unknown): resource is Currency {\n    if (!isCurrency(resource)) return false;\n    return isAptosChainKey(resource.chainKey);\n  }\n\n  register(resource: Currency): Promise<Transaction<AptosSigner>> {\n    return this.service.registerCoin(resource);\n  }\n\n  async isRegistered(resource: Currency, address: string): Promise<boolean> {\n    return this.service.isRegistered(resource, address);\n  }\n\n  getType(resource: Currency): string {\n    return `${resource.chainKey}:${isToken(resource) ? resource.address : '0x'}`;\n  }\n}\n","import {\n  assert,\n  type Currency,\n  CurrencyAmount,\n  getNativeCurrency,\n  isToken,\n  type Transaction,\n} from '@layerzerolabs/ui-core';\nimport type {AptosClient, Types} from 'aptos';\nimport type {AptosResourceProvider} from './AptosResourceProvider';\nimport type {AptosSigner} from './types/AptosSigner';\n\nexport class AptosManagedCoinRegisterService {\n  constructor(\n    private readonly aptosClient: AptosClient,\n    private readonly resourceProvider: AptosResourceProvider,\n  ) {}\n\n  async isRegistered(resource: Currency, address: string): Promise<boolean> {\n    const resources = await this.resourceProvider.getAccountResources(address);\n    const type = getResourceType(resource);\n    return resources.some((other) => other.type === type);\n  }\n\n  async registerCoin(token: Currency): Promise<Transaction<AptosSigner>> {\n    const {aptosClient} = this;\n    assert(isToken(token));\n    assert(aptosClient);\n    const coinType = token.address;\n\n    const payload: Types.TransactionPayload = {\n      type: 'entry_function_payload',\n      function: `0x1::managed_coin::register`,\n      type_arguments: [coinType],\n      arguments: [],\n    };\n\n    const tx: Transaction<AptosSigner> = {\n      async unwrap() {\n        return payload;\n      },\n      async signAndSubmitTransaction(signer) {\n        const response = await signer.sendTransaction(payload);\n        return {\n          txHash: response.hash,\n          async wait() {\n            const result = await aptosClient.waitForTransactionWithResult(response.hash, {\n              checkSuccess: true,\n            });\n            return {\n              txHash: result.hash,\n            };\n          },\n        };\n      },\n      async estimateGas(signer) {\n        // can't call client.simulateTransaction()\n        // because no publicKey is available in the wallet adapter (yet)\n\n        // using value from this tx\n        // https://explorer.aptoslabs.com/txn/0xddb86441811bdd9fe6968a9932cfb41be62afe3a27f73c1fd4b361ebaa7847c3?network=testnet\n        const gasUnits = 658;\n        return BigInt(gasUnits);\n      },\n      async estimateNative(signer: AptosSigner): Promise<CurrencyAmount<Currency>> {\n        const {gas_estimate: gasPrice} = await aptosClient.estimateGasPrice();\n        const gasUnits = await tx.estimateGas(signer);\n        const estimate = Number(gasUnits) * gasPrice * 4;\n\n        const native = getNativeCurrency(token.chainKey);\n        return CurrencyAmount.fromRawAmount(native, estimate);\n      },\n    };\n\n    return tx;\n  }\n}\n\nfunction getResourceType(token: Currency) {\n  if (isToken(token)) {\n    const type = `0x1::coin::CoinStore<${token.address}>`;\n    return type;\n  }\n  return undefined;\n}\n","// https://www.aptos.guide/nodes/aptos-deployments\nexport enum AptosNativeChainId {\n  MAINNET = 1,\n  TESTNET = 2,\n}\n","import {type AptosClient, type MaybeHexString, BCS, HexString, ApiError} from 'aptos';\n\nconst ZERO_ADDRESS_HEX = fullAddress('0x0').toString();\n\n// https://github.com/LayerZero-Labs/monorepo/blob/main/packages/layerzero-v1/aptos/sdk/src/modules/uln/uln_config.ts#L200\nexport async function getUlnFee(\n  client: AptosClient,\n  accounts: Accounts,\n  uaAddress: MaybeHexString,\n  dstEid: BCS.Uint16,\n  payloadSize: number,\n  query?: Query,\n) {\n  const [appConfig, treasuryConfigResource] = await Promise.all([\n    getAppConfig(client, accounts, uaAddress, dstEid, query),\n    getMsgLibGlobalStore(client, accounts, query),\n  ]);\n\n  const [oracleFee, relayerFee] = await Promise.all([\n    getUlnSignerFee(client, accounts, appConfig.oracle, dstEid, query),\n    getUlnSignerFee(client, accounts, appConfig.relayer, dstEid, query),\n  ]);\n\n  console.log(`treasuryConfigResource`, treasuryConfigResource.data);\n  const {treasury_fee_bps: treasuryFeeBps} = treasuryConfigResource.data as {\n    treasury_fee_bps: string;\n  };\n\n  // lz fee\n  let totalFee = relayerFee.base_fee + relayerFee.fee_per_byte * BigInt(payloadSize);\n  totalFee += oracleFee.base_fee + oracleFee.fee_per_byte * BigInt(payloadSize);\n  totalFee += (BigInt(treasuryFeeBps) * totalFee) / BigInt(10000);\n\n  return totalFee;\n}\n\nexport async function getMsgLibGlobalStore(client: AptosClient, accounts: Accounts, query?: Query) {\n  return client.getAccountResource(\n    accounts.layerzero.address,\n    `${accounts.layerzero.address}::msglib_v1_0::GlobalStore`,\n    query,\n  );\n}\n\nexport async function getAppConfig(\n  client: AptosClient,\n  accounts: Accounts,\n  uaAddress: MaybeHexString,\n  dstEid: BCS.Uint16,\n  query?: Query,\n): Promise<UlnConfigType> {\n  const defaultConfigPromise = getDefaultAppConfig(client, accounts, dstEid, query);\n\n  let appConfig: UlnConfigType | undefined = undefined;\n  try {\n    const module = `${accounts.layerzero.address}::uln_config`;\n\n    const resource = await client.getAccountResource(\n      accounts.layerzero.address,\n      `${module}::UaUlnConfig`,\n      query,\n    );\n    const {config} = resource.data as {config: {handle: string}};\n\n    appConfig = await client.getTableItem(\n      config.handle,\n      {\n        key_type: `${module}::UaConfigKey`,\n        value_type: `${module}::UlnConfig`,\n        key: {\n          ua_address: HexString.ensure(uaAddress).toString(),\n          chain_id: dstEid.toString(),\n        },\n      },\n      query,\n    );\n\n    console.log(`Config: `, appConfig);\n  } catch (e) {\n    if (!isErrorOfApiError(e, 404)) {\n      throw e;\n    }\n  }\n\n  const defaultConfig = await defaultConfigPromise;\n  console.log('defaultConfig', defaultConfig);\n  const mergedConfig = appConfig ? mergeConfig(appConfig, defaultConfig) : defaultConfig;\n  //address type in move are reutrned as short string\n  mergedConfig.oracle = fullAddress(mergedConfig.oracle).toString();\n  mergedConfig.relayer = fullAddress(mergedConfig.relayer).toString();\n  mergedConfig.inbound_confirmations = BigInt(mergedConfig.inbound_confirmations);\n  mergedConfig.outbound_confirmations = BigInt(mergedConfig.outbound_confirmations);\n  return mergedConfig;\n}\n\nexport async function getUlnSignerFee(\n  client: AptosClient,\n  accounts: Accounts,\n  address: MaybeHexString,\n  dstEid: BCS.Uint16,\n  query?: Query,\n) {\n  try {\n    const module = `${accounts.layerzero.address}::uln_signer`;\n    const resource = await client.getAccountResource(address, `${module}::Config`, query);\n    const {fees} = resource.data as {fees: {handle: string}};\n    const response = await client.getTableItem(\n      fees.handle,\n      {\n        key_type: `u64`,\n        value_type: `${module}::Fee`,\n        key: dstEid.toString(),\n      },\n      query,\n    );\n    return {\n      base_fee: BigInt(response.base_fee),\n      fee_per_byte: BigInt(response.fee_per_byte),\n    };\n  } catch (e) {\n    if (isErrorOfApiError(e, 404)) {\n      return {\n        base_fee: BigInt(0),\n        fee_per_byte: BigInt(0),\n      };\n    }\n    throw e;\n  }\n}\n\nexport async function getExecutorFee(\n  client: AptosClient,\n  accounts: Accounts,\n  uaAddress: MaybeHexString,\n  dstEid: BCS.Uint16,\n  adapterParams: BCS.Bytes,\n  query?: Query,\n) {\n  const [executor] = accounts.executor\n    ? [accounts.executor.address, accounts.executor.version]\n    : await getExecutor(client, accounts, uaAddress, dstEid, query);\n\n  const fee = await getFee(executor, dstEid, query);\n  const [, uaGas, airdropAmount] = decodeAdapterParams(adapterParams);\n  return ((uaGas * fee.gasPrice + airdropAmount) * fee.priceRatio) / 10000000000n;\n\n  async function getFee(\n    executor: MaybeHexString,\n    eid: BCS.Uint16,\n    query?: Query,\n  ): Promise<ExecutorFee> {\n    try {\n      const module = `${accounts.layerzero.address}::executor_v1`;\n      const resource = await client.getAccountResource(\n        executor,\n        `${module}::ExecutorConfig`,\n        query,\n      );\n      const {fee} = resource.data as {fee: {handle: string}};\n      const response = await client.getTableItem(\n        fee.handle,\n        {\n          key_type: 'u64',\n          value_type: `${module}::Fee`,\n          key: eid.toString(),\n        },\n        query,\n      );\n      return {\n        airdropAmtCap: BigInt(response.airdrop_amt_cap),\n        priceRatio: BigInt(response.price_ratio),\n        gasPrice: BigInt(response.gas_price),\n      };\n    } catch (e) {\n      if (isErrorOfApiError(e, 404)) {\n        return {\n          airdropAmtCap: 0n,\n          priceRatio: 0n,\n          gasPrice: 0n,\n        };\n      }\n      throw e;\n    }\n  }\n}\n\nexport async function getExecutor(\n  client: AptosClient,\n  accounts: Accounts,\n  uaAddress: MaybeHexString,\n  dstEid: BCS.Uint16,\n  query?: Query,\n): Promise<[string, BCS.Uint64]> {\n  const configuredPromise = getConfiguredExecutor(client, accounts, uaAddress, dstEid, query);\n  const defaultPromise = getDefaultExecutor(client, accounts, dstEid);\n  try {\n    return await configuredPromise;\n  } catch (e) {\n    if (isErrorOfApiError(e, 404)) {\n      return await defaultPromise;\n    }\n    throw e;\n  }\n}\nexport async function getMinDstGas(\n  client: AptosClient,\n  accounts: Accounts,\n  uaAddress: MaybeHexString,\n  dstEid: BCS.Uint16,\n  packetType: BCS.Uint64,\n): Promise<BCS.Uint64> {\n  const module = `${accounts.layerzero.address}::lzapp`;\n  const resource = await client.getAccountResource(uaAddress, `${module}::Config`);\n  const {min_dst_gas_lookup} = resource.data as {min_dst_gas_lookup: {handle: string}};\n\n  try {\n    const response = await client.getTableItem(min_dst_gas_lookup.handle, {\n      key_type: `${module}::Path`,\n      value_type: 'u64',\n      key: {\n        chain_id: dstEid.toString(),\n        packet_type: packetType.toString(),\n      },\n    });\n    return BigInt(response);\n  } catch (e) {\n    if (isErrorOfApiError(e, 404)) {\n      return BigInt(0);\n    }\n    throw e;\n  }\n}\n\nexport async function getConfiguredExecutor(\n  client: AptosClient,\n  accounts: Accounts,\n  uaAddress: MaybeHexString,\n  dstEid: BCS.Uint16,\n  query?: Query,\n): Promise<[string, BCS.Uint64]> {\n  const module = `${accounts.layerzero.address}::executor_config`;\n  const resource = await client.getAccountResource(uaAddress, `${module}::ConfigStore`, query);\n  const {config} = resource.data as {config: {handle: string}};\n  const response = await client.getTableItem(\n    config.handle,\n    {\n      key_type: 'u64',\n      value_type: `${module}::Config`,\n      key: dstEid.toString(),\n    },\n    query,\n  );\n  return [response.executor, response.version];\n}\n\nexport async function getDefaultExecutor(\n  client: AptosClient,\n  accounts: Accounts,\n  dstEid: BCS.Uint16,\n): Promise<[string, BCS.Uint64]> {\n  const module = `${accounts.layerzero.address}::executor_config`;\n  const resource = await client.getAccountResource(\n    accounts.layerzero.address,\n    `${module}::ConfigStore`,\n  );\n\n  const {config} = resource.data as {config: {handle: string}};\n  try {\n    const response = await client.getTableItem(config.handle, {\n      key_type: 'u64',\n      value_type: `${module}::Config`,\n      key: dstEid.toString(),\n    });\n    console.log('default executor', response);\n    return [response.executor, response.version];\n  } catch (e) {\n    if (isErrorOfApiError(e, 404)) {\n      return ['', BigInt(0)];\n    }\n    throw e;\n  }\n}\n\n// txType 1\n// bytes  [2       8       ]\n// fields [txType  extraGas]\n// txType 2\n// bytes  [2       8         8           unfixed       ]\n// fields [txType  extraGas  airdropAmt  airdropAddress]\nexport function decodeAdapterParams(\n  adapterParams: BCS.Bytes,\n): [type: BCS.Uint16, uaGas: BCS.Uint64, airdropAmount: BCS.Uint64, airdropAddress: string] {\n  const type = adapterParams[0] * 256 + adapterParams[1];\n  if (type === 1) {\n    // default\n    if (adapterParams.length !== 10) throw new Error('invalid adapter params');\n\n    const uaGas = adapterParams.slice(2, 10);\n    return [type, convertBytesToUint64(uaGas), 0n, ''];\n  } else if (type === 2) {\n    // airdrop\n    if (adapterParams.length <= 18) throw new Error('invalid adapter params');\n\n    const uaGas = adapterParams.slice(2, 10);\n    const airdropAmount = adapterParams.slice(10, 18);\n    const airdropAddressBytes = adapterParams.slice(18);\n    return [\n      type,\n      convertBytesToUint64(uaGas),\n      convertBytesToUint64(airdropAmount),\n      HexString.fromUint8Array(airdropAddressBytes).toString(),\n    ];\n  } else {\n    throw new Error('invalid adapter params');\n  }\n}\n\nexport function buildAirdropAdapterParams(\n  uaGas: BCS.Uint64 | BCS.Uint32,\n  airdropAmount: BCS.Uint64 | BCS.Uint32,\n  airdropAddress: string,\n): BCS.Bytes {\n  if (airdropAmount === 0n) {\n    return buildDefaultAdapterParams(uaGas);\n  }\n  const params = [0, 2]\n    .concat(Array.from(convertUint64ToBytes(uaGas)))\n    .concat(Array.from(convertUint64ToBytes(airdropAmount)))\n    .concat(Array.from(HexString.ensure(airdropAddress).toUint8Array()));\n\n  return Buffer.from(params);\n}\n\nexport function buildDefaultAdapterParams(uaGas: BCS.Uint64 | BCS.Uint32): BCS.Bytes {\n  const params = [0, 1].concat(Array.from(convertUint64ToBytes(uaGas)));\n  return Uint8Array.from(Buffer.from(params));\n}\n\nexport function convertUint64ToBytes(number: BCS.Uint64 | BCS.Uint32): BCS.Bytes {\n  return BCS.bcsSerializeUint64(number).reverse(); //big endian\n}\n\nexport function convertBytesToUint64(bytes: BCS.Bytes): BCS.Uint64 {\n  if (bytes.length !== 8) {\n    throw new Error('Buffer must be exactly 8 bytes long.');\n  }\n\n  let uint64BigInt = 0n;\n  for (let i = 0; i < 8; i++) {\n    uint64BigInt = (uint64BigInt << 8n) | BigInt(bytes[i]);\n  }\n\n  return uint64BigInt;\n}\n\nexport function isErrorOfApiError(e: any, status: number): boolean {\n  if (e instanceof ApiError) {\n    return e.status === status;\n  } /** else if (e instanceof Types.ApiError) {\n          return e.status === status\n      } */ else if (e instanceof Error && e.constructor.name.match(/ApiError[0-9]*/)) {\n    if (Object.prototype.hasOwnProperty.call(e, 'vmErrorCode')) {\n      const err = e as ApiError;\n      return err.status === status;\n    } else if (Object.prototype.hasOwnProperty.call(e, 'request')) {\n      // const err = e as Types.ApiError\n      const err = e as ApiError;\n      return err.status === status;\n    }\n  } else if (e instanceof Error) {\n    if (Object.prototype.hasOwnProperty.call(e, 'status')) {\n      return (e as any).status === status;\n    }\n  }\n  return false;\n}\n\nexport type Accounts = {\n  layerzero_apps: {\n    address: MaybeHexString;\n  };\n  layerzero: {\n    address: MaybeHexString;\n  };\n  executor?: {\n    address: MaybeHexString;\n    version: bigint;\n  };\n};\n\nexport async function getMessageFee(\n  client: AptosClient,\n  accounts: Accounts,\n  uaAddress: MaybeHexString,\n  dstEid: BCS.Uint16,\n  adapterParams: BCS.Bytes,\n  payloadSize: number,\n  query?: Query,\n): Promise<BCS.Uint64> {\n  const [ulnFee, executorFee] = await Promise.all([\n    getUlnFee(client, accounts, uaAddress, dstEid, payloadSize, query),\n    getExecutorFee(client, accounts, uaAddress, dstEid, adapterParams, query),\n  ]);\n\n  const totalFee = BigInt(ulnFee) + BigInt(executorFee);\n  return totalFee;\n}\n\nexport async function getDefaultAppConfig(\n  client: AptosClient,\n  accounts: Accounts,\n  remoteEid: BCS.Uint16,\n  query?: Query,\n): Promise<UlnConfigType> {\n  if (accounts.layerzero === undefined) {\n    throw new Error('sdk accounts layerzero is undefined when invoke getDefaultAppConfig');\n  }\n  const module = `${accounts.layerzero.address}::uln_config`;\n  const resource = await client.getAccountResource(\n    accounts.layerzero.address,\n    `${module}::DefaultUlnConfig`,\n    query,\n  );\n  const {config} = resource.data as {config: {handle: string}};\n  try {\n    return await client.getTableItem(\n      config.handle,\n      {\n        key_type: 'u64',\n        value_type: `${module}::UlnConfig`,\n        key: remoteEid.toString(),\n      },\n      query,\n    );\n  } catch (e) {\n    if (isErrorOfApiError(e, 404)) {\n      return {\n        inbound_confirmations: BigInt(0),\n        oracle: '',\n        outbound_confirmations: BigInt(0),\n        relayer: '',\n      };\n    }\n    throw e;\n  }\n}\n\nexport interface UlnConfigType {\n  inbound_confirmations: BCS.Uint64 | BCS.Uint32;\n  oracle: MaybeHexString;\n  outbound_confirmations: BCS.Uint64 | BCS.Uint32;\n  relayer: MaybeHexString;\n}\n\nexport function fullAddress(address: string | HexString): HexString {\n  const rawValue = HexString.ensure(address).noPrefix();\n  return HexString.ensure(\n    Buffer.concat([Buffer.alloc(64 - rawValue.length, '0'), Buffer.from(rawValue)]).toString(),\n  );\n}\n\nfunction isSameAddress(a: string | HexString, b: string | HexString): boolean {\n  return fullAddress(a).toString() === fullAddress(b).toString();\n}\n\nfunction isZeroAddress(a: string | HexString): boolean {\n  return isSameAddress(a, ZERO_ADDRESS_HEX);\n}\n\nfunction mergeConfig(config: UlnConfigType, defaultConfig: UlnConfigType): UlnConfigType {\n  const mergedConfig = {...defaultConfig};\n  if (!isZeroAddress(config.oracle)) {\n    mergedConfig.oracle = config.oracle;\n  }\n  if (!isZeroAddress(config.relayer)) {\n    mergedConfig.relayer = config.relayer;\n  }\n  if (config.inbound_confirmations > 0) {\n    mergedConfig.inbound_confirmations = config.inbound_confirmations;\n  }\n  if (config.outbound_confirmations > 0) {\n    mergedConfig.outbound_confirmations = config.outbound_confirmations;\n  }\n\n  return mergedConfig;\n}\n\nexport interface ExecutorFee {\n  airdropAmtCap: BCS.Uint64;\n  priceRatio: BCS.Uint64;\n  gasPrice: BCS.Uint64;\n}\n\nexport interface Query {\n  ledgerVersion?: bigint | number;\n}\n"]}