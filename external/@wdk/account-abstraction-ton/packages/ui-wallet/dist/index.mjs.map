{"version":3,"sources":["../src/AbstractWallet.ts","../src/WalletError.ts","../src/assertWallet.ts"],"names":[],"mappings":";AAAA,SAAQ,oCAAkE;AAGnE,IAAe,iBAAf,MAAgE;AAAA,EAY9D,cAAuB;AAAA,EACvB,cAAuB;AAAA,EACvB,eAAwB;AAAA,EACxB,mBAA4B;AAAA,EAC5B,YAAiC;AAAA,EACjC,UAA+B;AAAA,EAC/B,gBAA8C;AAAA,EAErD,IAAc,wBAAgC;AAC5C,WAAO,CAAC,UAAU,KAAK,WAAW,KAAK,MAAM,aAAa,EAAE,KAAK,GAAG;AAAA,EACtE;AAAA,EAEA,IAAc,uBAAgC;AAC5C,QAAI,OAAO,iBAAiB;AAAa,aAAO;AAChD,WAAO,aAAa,QAAQ,KAAK,qBAAqB,MAAM;AAAA,EAC9D;AAAA,EAEA,IAAc,qBAAqB,SAAkB;AACnD,QAAI,OAAO,iBAAiB;AAAa;AACzC,QAAI,SAAS;AACX,mBAAa,QAAQ,KAAK,uBAAuB,MAAM;AAAA,IACzD,OAAO;AACL,mBAAa,WAAW,KAAK,qBAAqB;AAAA,IACpD;AAAA,EACF;AAAA,EAEA,MAAa,cAA2C;AACtD,UAAM,gBAAgB,MAAM,KAAK,iBAAiB;AAClD,WAAO,6BAA6B,KAAK,WAAW,aAAa,GAAG;AAAA,EACtE;AACF;;;AC7CO,IAAe,cAAf,cAAmC,MAAM;AAGhD;AAEO,IAAM,2BAAN,cAAuC,YAAY;AAAA,EACjD,OAAO;AAAA,EACP,eAAe;AACxB;AAEO,IAAM,mBAAN,cAA+B,YAAY;AAAA,EACzC,OAAO;AAAA,EACP,eAAe;AACxB;AAEO,IAAM,kBAAN,cAA8B,YAAY;AAAA,EACxC,OAAO;AAAA,EACP,eAAe;AACxB;;;AClBA,SAAQ,kBAAiB;AAGzB,eAAsB,aACpB,QACA,UACA;AACA,QAAM,CAAC,eAAe,OAAO,IAAI,MAAM,QAAQ,IAAI;AAAA,IACjD,OAAO,iBAAiB;AAAA,IACxB,OAAO,WAAW;AAAA,EACpB,CAAC;AACD,QAAM,kBAAkB,WAAW,SAAS,QAAQ;AAEpD,MAAI,kBAAkB,gBAAgB,eAAe;AACnD,UAAM,IAAI,MAAM,sBAAsB;AAAA,EACxC;AACA,MAAI,QAAQ,YAAY,MAAM,SAAS,QAAQ,YAAY,GAAG;AAC5D,UAAM,IAAI,MAAM,wBAAwB;AAAA,EAC1C;AACF","sourcesContent":["import {tryGetNetworkByNativeChainId, type ChainKey, type ChainType} from '@layerzerolabs/ui-core';\nimport type {Wallet} from './Wallet';\n\nexport abstract class AbstractWallet<Signer> implements Wallet<Signer> {\n  public abstract chainType: ChainType;\n  public abstract readonly type: string;\n  public abstract chainKey?: ChainKey | undefined;\n  public abstract connect(): Promise<void>;\n  public abstract disconnect(): Promise<void>;\n  public abstract autoConnect(): Promise<void>;\n  public abstract switchChain(chainKey: ChainKey): Promise<void>;\n  public abstract getNativeChainId(): Promise<number>;\n  public abstract getAddress(): Promise<string>;\n  public abstract signer?: Signer | undefined;\n\n  public isConnected: boolean = false;\n  public isAvailable: boolean = false;\n  public isConnecting: boolean = false;\n  public isSwitchingChain: boolean = false;\n  public publicKey?: string | undefined = undefined;\n  public address?: string | undefined = undefined;\n  public nativeChainId?: string | number | undefined = undefined;\n\n  protected get autoConnectStorageKey(): string {\n    return ['wallet', this.chainType, this.type, 'autoconnect'].join(':');\n  }\n\n  protected get isAutoConnectEnabled(): boolean {\n    if (typeof localStorage === 'undefined') return false;\n    return localStorage.getItem(this.autoConnectStorageKey) === 'true';\n  }\n\n  protected set isAutoConnectEnabled(enabled: boolean) {\n    if (typeof localStorage === 'undefined') return;\n    if (enabled) {\n      localStorage.setItem(this.autoConnectStorageKey, 'true');\n    } else {\n      localStorage.removeItem(this.autoConnectStorageKey);\n    }\n  }\n\n  public async getChainKey(): Promise<string | undefined> {\n    const nativeChainId = await this.getNativeChainId();\n    return tryGetNetworkByNativeChainId(this.chainType, nativeChainId)?.chainKey;\n  }\n}\n","export abstract class WalletError extends Error {\n  abstract name: string;\n  abstract shortMessage: string;\n}\n\nexport class UserRejectedRequestError extends WalletError {\n  public name = 'UserRejectedRequestError';\n  public shortMessage = 'User rejected the request.';\n}\n\nexport class SwitchChainError extends WalletError {\n  public name = 'SwitchChainError';\n  public shortMessage = 'Failed to switch chain.';\n}\n\nexport class SyncWalletError extends WalletError {\n  public name = 'SyncWalletError';\n  public shortMessage = 'Failed to sync wallet.';\n}\n","import {getNetwork} from '@layerzerolabs/ui-core';\nimport type {Wallet} from './Wallet';\n\nexport async function assertWallet(\n  wallet: Wallet<unknown>,\n  expected: {chainKey: string; address: string},\n) {\n  const [nativeChainId, address] = await Promise.all([\n    wallet.getNativeChainId(),\n    wallet.getAddress(),\n  ]);\n  const expectedNetwork = getNetwork(expected.chainKey);\n\n  if (nativeChainId !== expectedNetwork.nativeChainId) {\n    throw new Error('Invalid wallet chain');\n  }\n  if (address.toLowerCase() !== expected.address.toLowerCase()) {\n    throw new Error('Invalid wallet address');\n  }\n}\n"]}