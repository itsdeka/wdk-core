{"version":3,"sources":["../src/transformers.ts"],"names":[],"mappings":";AAAA;AAAA,EACE;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,OAAO,eAAe;AAyBf,SAAS,SAAS,aAA+B;AACtD,cAAY;AAAA,IACV;AAAA,MACE,cAAc,CAAC,MAA2B,aAAa;AAAA,MACvD,WAAW,CAAC,OAAO;AAAA,QACjB,QAAQ,EAAE;AAAA,QACV,UAAU,EAAE;AAAA,QACZ,UAAU,EAAE;AAAA,QACZ,SAAS,EAAE;AAAA,QACX,MAAM,EAAE;AAAA,MACV;AAAA,MACA,aAAa,CAAC,MAAM,MAAM,KAAK,CAAC;AAAA,IAClC;AAAA,IACA;AAAA,EACF;AACA,cAAY;AAAA,IACV;AAAA,MACE,cAAc,CAAC,MAA0B,aAAa;AAAA,MACtD,WAAW,CAAC,OAAO;AAAA,QACjB,QAAQ,EAAE;AAAA,QACV,UAAU,EAAE;AAAA,QACZ,UAAU,EAAE;AAAA,QACZ,MAAM,EAAE;AAAA,MACV;AAAA,MACA,aAAa,CAAC,MAAM,KAAK,KAAK,CAAC;AAAA,IACjC;AAAA,IACA;AAAA,EACF;AAEA,cAAY;AAAA,IACV;AAAA,MACE,cAAc,CAAC,MAAoC,aAAa;AAAA,MAChE,WAAW,CAAC,OAAO;AAAA,QACjB,OAAO,YAAY,UAAU,EAAE,KAAK;AAAA,QACpC,QAAQ,EAAE,QAAQ;AAAA,MACpB;AAAA,MACA,aAAa,CAAC,MAAM;AAClB,cAAM,QAAQ,YAAY,YAAsB,EAAE,KAAwB;AAC1E,cAAM,SAAS,oBAAoB,OAAO,EAAE,MAAM;AAClD,eAAO;AAAA,MACT;AAAA,IACF;AAAA,IACA;AAAA,EACF;AAEA,QAAM,mBAAmB;AACzB,cAAY;AAAA,IACV;AAAA,MACE,cAAc,CAAC,MAA6B,aAAa;AAAA,MACzD,WAAW,CAAC,MAAM,EAAE,cAAc,gBAAgB,IAAI;AAAA,MACtD,aAAa,CAAC,MAAM,aAAa,EAAE,QAAQ,KAAK,EAAE,GAAG,gBAAgB;AAAA,IACvE;AAAA,IACA;AAAA,EACF;AAEA,cAAY;AAAA,IACV;AAAA,MACE,cAAc,CAAC,MAA8B,aAAa;AAAA,MAC1D,WAAW,CAAC,OAAO;AAAA,QACjB,WAAW,EAAE,UAAU,SAAS;AAAA,QAChC,aAAa,EAAE,YAAY,SAAS,SAAS;AAAA,MAC/C;AAAA,MACA,aAAa,CAAC,MAAM,IAAI,SAAS,EAAE,WAAW,EAAE,WAAW;AAAA,IAC7D;AAAA,IACA;AAAA,EACF;AAEA,cAAY;AAAA,IACV;AAAA,MACE,cAAc,CAAC,MAA0B,aAAa;AAAA,MACtD,WAAW,CAAC,OAAO;AAAA,QACjB,UAAU,EAAE;AAAA,QACZ,SAAS,EAAE;AAAA,QACX,kBAAkB,EAAE;AAAA,QACpB,iBAAiB,UAAU,UAAU,EAAE,eAAe;AAAA,MACxD;AAAA,MACA,aAAa,CAAC,MAAM;AAClB,YAAI,EAAE,YAAY,GAAG;AACnB,iBAAO,cAAc,MAAM;AAAA,YACzB,UAAU,EAAE;AAAA,YACZ,iBAAiB,UAAU,YAAY,EAAE,eAAe;AAAA,YACxD,kBAAkB,EAAE;AAAA,UACtB,CAAC;AAAA,QACH,OAAO;AACL,iBAAO,cAAc,MAAM,EAAE,QAAQ;AAAA,QACvC;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,EACF;AACF","sourcesContent":["import {\n  Coin,\n  type Currency,\n  CurrencyAmount,\n  Fraction,\n  parseCurrencyAmount,\n  Percent,\n  Token,\n  AdapterParams,\n  parsePercent,\n} from '@layerzerolabs/ui-core';\nimport SuperJSON from 'superjson';\nimport type {SuperJSONValue} from 'superjson/src/types';\n\nexport type SuperJSONResult = ReturnType<(typeof SuperJSON)['serialize']>;\n\nexport type TokenJSONValue = {\n  symbol: string;\n  decimals: number;\n  chainKey: string;\n  address: string;\n  name?: string;\n};\n\nexport type CoinJSONValue = {symbol: string; decimals: number; chainKey: string; name?: string};\n\nexport type CurrencyAmountJsonValue = {\n  amount: string;\n  token: {\n    json: SuperJSONResult['json'];\n    meta?: SuperJSONResult['meta'];\n  };\n};\n\nexport type FractionJsonValue = {numerator: string; denominator: string};\n\nexport function register(transformer: typeof SuperJSON) {\n  transformer.registerCustom<Token, TokenJSONValue>(\n    {\n      isApplicable: (v: unknown): v is Token => v instanceof Token,\n      serialize: (v) => ({\n        symbol: v.symbol,\n        decimals: v.decimals,\n        chainKey: v.chainKey,\n        address: v.address,\n        name: v.name,\n      }),\n      deserialize: (v) => Token.from(v),\n    },\n    'Token',\n  );\n  transformer.registerCustom<Coin, CoinJSONValue>(\n    {\n      isApplicable: (v: unknown): v is Coin => v instanceof Coin,\n      serialize: (v) => ({\n        symbol: v.symbol,\n        decimals: v.decimals,\n        chainKey: v.chainKey,\n        name: v.name,\n      }),\n      deserialize: (v) => Coin.from(v),\n    },\n    'Coin',\n  );\n\n  transformer.registerCustom<CurrencyAmount, CurrencyAmountJsonValue>(\n    {\n      isApplicable: (v: unknown): v is CurrencyAmount => v instanceof CurrencyAmount,\n      serialize: (v) => ({\n        token: transformer.serialize(v.token),\n        amount: v.toExact(),\n      }),\n      deserialize: (v) => {\n        const token = transformer.deserialize<Currency>(v.token as SuperJSONResult);\n        const amount = parseCurrencyAmount(token, v.amount);\n        return amount;\n      },\n    },\n    'CurrencyAmount',\n  );\n\n  const PERCENT_DECIMALS = 10;\n  transformer.registerCustom<Percent, string>(\n    {\n      isApplicable: (v: unknown): v is Percent => v instanceof Percent,\n      serialize: (v) => v.toSignificant(PERCENT_DECIMALS) + '%',\n      deserialize: (v) => parsePercent(v.replace('%', ''), PERCENT_DECIMALS),\n    },\n    'Percent',\n  );\n\n  transformer.registerCustom<Fraction, FractionJsonValue>(\n    {\n      isApplicable: (v: unknown): v is Fraction => v instanceof Fraction,\n      serialize: (v) => ({\n        numerator: v.numerator.toString(),\n        denominator: v.denominator.toString.toString(),\n      }),\n      deserialize: (v) => new Fraction(v.numerator, v.denominator),\n    },\n    'Fraction',\n  );\n\n  transformer.registerCustom<AdapterParams, SuperJSONValue>(\n    {\n      isApplicable: (v): v is AdapterParams => v instanceof AdapterParams,\n      serialize: (v) => ({\n        extraGas: v.extraGas,\n        version: v.version,\n        dstNativeAddress: v.dstNativeAddress,\n        dstNativeAmount: SuperJSON.serialize(v.dstNativeAmount),\n      }),\n      deserialize: (v) => {\n        if (v.version === 2) {\n          return AdapterParams.forV2({\n            extraGas: v.extraGas,\n            dstNativeAmount: SuperJSON.deserialize(v.dstNativeAmount),\n            dstNativeAddress: v.dstNativeAddress,\n          });\n        } else {\n          return AdapterParams.forV1(v.extraGas);\n        }\n      },\n    },\n    'AdapterParams',\n  );\n}\n"]}