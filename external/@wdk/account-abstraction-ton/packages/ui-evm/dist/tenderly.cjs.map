{"version":3,"sources":["../src/tenderly.ts"],"names":["TenderlyForkStatus"],"mappings":";;;;;;AAAA,OAAO,UAAU;AACjB,SAAQ,iBAAiB,oBAAiC;AAC1D,SAAQ,WAAW,aAAY;AAC/B,SAAuB,QAAQ,YAAY,eAAc;AAalD,IAAM,mBAAN,cAA+B,aAAwC;AAAA,EAG5E,YACkB,MACA,UAAmC,CAAC,GACpD;AACA,UAAM,KAAK;AAHK;AACA;AAAA,EAGlB;AAAA,EAPU,kBAAmC;AAAA,EAS7C,YAA2B;AACzB,WAAO,KAAK,KAAK,MAAM;AAAA,EACzB;AAAA,EAEA,WAA0B;AACxB,WAAO,KAAK,KAAK,KAAK;AAAA,EACxB;AAAA,EAEA,MAAe,gBAAkC;AAE/C,UAAM,EAAC,KAAI,IAAI;AACf,UAAM,QAAQ,MAAM,KAAK,aAAa,QAAW;AAAA,MAC/C,SAAS,KAAK,QAAQ;AAAA,IACxB,CAAC;AACD,WAAO,KAAK,UAAU,kBAAkB;AACxC,WAAO,KAAK,SAAS,iBAAiB;AACtC,UAAM,UAAmB;AAAA,MACvB,SAAS,KAAK,SAAS,gBAAgB,aAAa;AAAA,MACpD,MAAM;AAAA,IACR;AACA,SAAK,kBAAkB,IAAI;AAAA,MACzB;AAAA,QACE,KAAK,KAAK;AAAA,QACV,SAAS,KAAK,QAAQ;AAAA,MACxB;AAAA,MACA;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAES,QAAQ,QAAgB,QAA2B;AAC1D,WAAO,KAAK,gBAAgB,QAAQ,QAAQ,MAAM;AAAA,EACpD;AAAA,EAEA,WAAW,SAAiB,QAAyB;AACnD,WAAO,KAAK,gBAAgB,KAAK,uBAAuB;AAAA,MACtD,CAAC,OAAO;AAAA,MACR,MAAM,SAAS,UAAU,KAAK,MAAM,EAAE,YAAY,CAAC;AAAA,IACrD,CAAC;AAAA,EACH;AAAA,EAEA,WAAW,eAAuB,QAAyB;AACzD,WAAO,KAAK,gBAAgB,KAAK,uBAAuB;AAAA,MACtD,CAAC,aAAa;AAAA,MACd,MAAM,SAAS,UAAU,KAAK,MAAM,EAAE,YAAY,CAAC;AAAA,IACrD,CAAC;AAAA,EACH;AAAA,EAEA,gBAAgB,OAAe,QAAgB,OAAwB;AACrE,WAAO,KAAK,gBAAgB,KAAK,4BAA4B;AAAA,MAC3D;AAAA,MACA;AAAA,MACA,MAAM,SAAS,UAAU,KAAK,KAAK,EAAE,YAAY,CAAC;AAAA,IACpD,CAAC;AAAA,EACH;AACF;AAYO,IAAM,cAAN,MAAsD;AAAA,EAG3D,YAA6B,QAAwB;AAAxB;AAC3B,WAAO,OAAO,WAAW,6BAA6B;AACtD,WAAO,OAAO,SAAS,0BAA0B;AACjD,WAAO,OAAO,MAAM,uBAAuB;AAE3C,SAAK,OAAO,KAAK,OAAO;AAAA,MACtB,SAAS;AAAA,MACT,SAAS,EAAC,gBAAgB,KAAK,OAAO,UAAS;AAAA,IACjD,CAAC;AAAA,EACH;AAAA,EAXmB;AAAA,EAanB,MAAM,WAAW,OAAkD;AACjE,WAAO,IAAI,aAAa,KAAK,QAAQ,KAAK;AAAA,EAC5C;AACF;AAEO,IAAK,qBAAL,kBAAKA,wBAAL;AACL,EAAAA,oBAAA,mBAAgB;AAChB,EAAAA,oBAAA,cAAW;AACX,EAAAA,oBAAA,aAAU;AACV,EAAAA,oBAAA,aAAU;AAJA,SAAAA;AAAA,GAAA;AAOL,IAAM,eAAN,MAA0C;AAAA,EAK/C,YACkB,gBACA,YAChB;AAFgB;AACA;AAEhB,SAAK,QAAQ,KAAK,OAAO;AAAA,MACvB,SAAS;AAAA,MACT,SAAS,EAAC,gBAAgB,KAAK,eAAe,UAAS;AAAA,IACzD,CAAC;AAAA,EACH;AAAA,EAZU;AAAA,EACA;AAAA,EACA,UAA8B;AAAA,EAYxC,MAAM,QAAQ;AACZ,QAAI,KAAK,YAAY;AAA4B;AACjD,QAAI,KAAK,YAAY;AAA6B;AAClD,QAAI,KAAK,YAAY,yBAA4B;AAC/C,YAAM,IAAI,MAAM,QAAQ,KAAK,wBAAwB;AAAA,IACvD;AACA,SAAK,UAAU;AACf,UAAM,UAAU,WAAW,KAAK,WAAW,QAAQ;AACnD,UAAM,EAAC,KAAI,IAAI,MAAM,KAAK,MAAM,KAAuB,GAAG,KAAK,mBAAmB;AAAA,MAChF,YAAY,QAAQ;AAAA,MACpB,cAAc;AAAA,QACZ,UAAU,QAAQ;AAAA,MACpB;AAAA,IACF,CAAC;AACD,SAAK,YAAY;AACjB,SAAK,UAAU;AAAA,EACjB;AAAA,EAEA,MAAM,OAAO;AACX,WAAO,KAAK,QAAQ,kBAAkB;AACtC,SAAK,UAAU;AACf,UAAM,KAAK,MAAM,OAAO,GAAG,KAAK,mBAAmB,KAAK,QAAQ;AAAA,EAClE;AAAA;AAAA,EAGA,IAAW,SAA6B;AACtC,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAW,UAA8B;AACvC,QAAI,CAAC,KAAK;AAAQ,aAAO;AACzB,WAAO,gCAAgC,KAAK;AAAA,EAC9C;AAAA,EAEA,IAAW,WAAyC;AAClD,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAW,SAA6B;AACtC,WAAO,KAAK,UAAU,gBAAgB;AAAA,EACxC;AAAA,EAEA,IAAc,aAAqB;AACjC,WAAO,mBAAmB,KAAK,eAAe,gBAAgB,KAAK,eAAe;AAAA,EACpF;AACF;AA4BO,IAAM,iBAA6B;AAAA,EACxC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEO,IAAM,gCAAgC,CAAC,gBAA6B;AACzE,QAAM,YAAkD,oBAAI,IAAI;AAChE,QAAM,kBAA0D,CAAC,aAAuB;AACtF,UAAM,mBAAmB,UAAU,IAAI,QAAQ;AAC/C,QAAI;AAAkB,aAAO;AAC7B,UAAM,kBAAkB,IAAI,qBAAqB,uBAAuB,QAAQ,CAAC;AACjF,cAAU,IAAI,UAAU,eAAe;AACvC,WAAO;AAAA,EACT;AACA,SAAO;AAEP,WAAS,uBAAuB,UAA+C;AAC7E,WAAO,YAAY,WAAW,EAAC,SAAQ,CAAC,EAAE,KAAK,CAAC,SAAS,IAAI,iBAAiB,IAAI,CAAC;AAAA,EACrF;AACF","sourcesContent":["import http from 'redaxios';\nimport {JsonRpcProvider, BaseProvider, type Network} from '@ethersproject/providers';\nimport {BigNumber, utils} from 'ethers';\nimport {type ChainKey, assert, getNetwork, waitFor} from '@layerzerolabs/ui-core';\nimport type {ProviderFactory} from './providerFactory';\nimport {\n  type TestingFork,\n  type TestingSdk,\n  type TestingProvider,\n  TestingProxyProvider,\n} from './testing';\n\ntype HttpClient = ReturnType<typeof http.create>;\n\n// we need to apply this weird construct because JsonRpcProvider constructor\n// requires passing resolved URL which we don't have at the time of creation\nexport class TenderlyProvider extends BaseProvider implements TestingProvider {\n  protected jsonRpcProvider: JsonRpcProvider = null!;\n\n  constructor(\n    public readonly fork: TenderlyFork,\n    public readonly options: TenderlyProviderOptions = {},\n  ) {\n    super('any');\n  }\n\n  startFork(): Promise<void> {\n    return this.fork.start();\n  }\n\n  stopFork(): Promise<void> {\n    return this.fork.stop();\n  }\n\n  override async detectNetwork(): Promise<Network> {\n    // find better approach\n    const {fork} = this;\n    await waitFor(() => fork.forkData !== undefined, {\n      timeout: this.options.timeout,\n    });\n    assert(fork.forkData, 'Fork not started');\n    assert(fork.forkUrl, 'Fork has no URL');\n    const network: Network = {\n      chainId: fork.forkData.simulation_fork.chain_config.chain_id,\n      name: `Tenderly fork`,\n    };\n    this.jsonRpcProvider = new JsonRpcProvider(\n      {\n        url: fork.forkUrl,\n        timeout: this.options.timeout,\n      },\n      network,\n    );\n    return network;\n  }\n\n  override perform(method: string, params: any): Promise<any> {\n    return this.jsonRpcProvider.perform(method, params);\n  }\n\n  addBalance(address: string, amount: number | bigint) {\n    return this.jsonRpcProvider.send('tenderly_setBalance', [\n      [address],\n      utils.hexValue(BigNumber.from(amount).toHexString()),\n    ]);\n  }\n\n  setBalance(minterAddress: string, amount: number | bigint) {\n    return this.jsonRpcProvider.send('tenderly_setBalance', [\n      [minterAddress],\n      utils.hexValue(BigNumber.from(amount).toHexString()),\n    ]);\n  }\n\n  setErc20Balance(token: string, wallet: string, value: number | bigint) {\n    return this.jsonRpcProvider.send('tenderly_setErc20Balance', [\n      token,\n      wallet,\n      utils.hexValue(BigNumber.from(value).toHexString()),\n    ]);\n  }\n}\n\ninterface TenderlyProviderOptions {\n  timeout?: number;\n}\n\nexport interface TenderlyConfig {\n  user: string;\n  project: string;\n  accessKey: string;\n}\n\nexport class TenderlySdk implements TestingSdk<TenderlyFork> {\n  protected readonly http: ReturnType<typeof http.create>;\n\n  constructor(private readonly config: TenderlyConfig) {\n    assert(config.accessKey, 'Missing TENDERLY_ACCESS_KEY');\n    assert(config.project, 'Missing TENDERLY_PROJECT');\n    assert(config.user, 'Missing TENDERLY_USER');\n\n    this.http = http.create({\n      baseURL: 'https://api.tenderly.co',\n      headers: {'X-Access-Key': this.config.accessKey},\n    });\n  }\n\n  async createFork(input: TenderlyForkConfig): Promise<TenderlyFork> {\n    return new TenderlyFork(this.config, input);\n  }\n}\n\nexport enum TenderlyForkStatus {\n  UNINITIALIZED = 'uninitialized',\n  STARTING = 'starting',\n  STARTED = 'started',\n  STOPPED = 'stopped',\n}\n\nexport class TenderlyFork implements TestingFork {\n  protected _http: HttpClient;\n  protected _forkData: TenderlyForkData | undefined;\n  protected _status: TenderlyForkStatus = TenderlyForkStatus.UNINITIALIZED;\n\n  constructor(\n    public readonly tenderlyConfig: TenderlyConfig,\n    public readonly forkConfig: TenderlyForkConfig,\n  ) {\n    this._http = http.create({\n      baseURL: 'https://api.tenderly.co',\n      headers: {'X-Access-Key': this.tenderlyConfig.accessKey},\n    });\n  }\n\n  async start() {\n    if (this._status === TenderlyForkStatus.STARTED) return;\n    if (this._status === TenderlyForkStatus.STARTING) return;\n    if (this._status === TenderlyForkStatus.STOPPED) {\n      throw new Error(`Fork ${this.forkId} already stopped`);\n    }\n    this._status = TenderlyForkStatus.STARTING;\n    const network = getNetwork(this.forkConfig.chainKey);\n    const {data} = await this._http.post<TenderlyForkData>(`${this.projectUri}/fork`, {\n      network_id: network.nativeChainId,\n      chain_config: {\n        chain_id: network.nativeChainId,\n      },\n    });\n    this._forkData = data;\n    this._status = TenderlyForkStatus.STARTED;\n  }\n\n  async stop() {\n    assert(this.forkId, 'Fork not started');\n    this._status = TenderlyForkStatus.STOPPED;\n    await this._http.delete(`${this.projectUri}/fork/${this.forkId}`);\n  }\n\n  // getters to ensure readonly access from outside\n  public get status(): TenderlyForkStatus {\n    return this._status;\n  }\n\n  public get forkUrl(): string | undefined {\n    if (!this.forkId) return undefined;\n    return `https://rpc.tenderly.co/fork/${this.forkId}`;\n  }\n\n  public get forkData(): TenderlyForkData | undefined {\n    return this._forkData;\n  }\n\n  public get forkId(): string | undefined {\n    return this.forkData?.simulation_fork.id;\n  }\n\n  protected get projectUri(): string {\n    return `/api/v1/account/${this.tenderlyConfig.user}/project/${this.tenderlyConfig.project}`;\n  }\n}\n\nexport interface TenderlyForkConfig {\n  chainKey: ChainKey;\n}\n\ninterface TenderlyForkData {\n  simulation_fork: {\n    id: string;\n    project_id: string;\n    network_id: string;\n    block_number: number;\n    transaction_index: number;\n    chain_config: ChainConfig;\n    fork_config: any;\n    created_at: string;\n    accounts: Record<string, string>;\n    current_block_number: number;\n    shared: boolean;\n  };\n}\n\nexport interface ChainConfig {\n  type: string;\n  chain_id: number;\n}\n\n// https://docs.tenderly.co/supported-networks-and-languages\nexport const tenderlyChains: ChainKey[] = [\n  'ethereum',\n  'mainnet',\n  'sepolia',\n  'goerli',\n  'holesky',\n  'polygon',\n  'mumbai',\n  'optimism',\n  'optimism-goerli',\n  'base',\n  'base-goerli',\n  'base-sepolia',\n  'optimism-sepolia',\n  'arbitrum',\n  'arbitrum-nova',\n  'arbitrum-sepolia',\n  'arbitrum-goerli',\n  'boba',\n  'boba-goerli',\n  'boba-bnb',\n  'boba-bnb-testnet',\n  'bsc',\n  'bsc-testnet',\n  'avalanche',\n  'fuji',\n  'linea',\n  'linea-goerli',\n  'fantom',\n  'fantom-testnet',\n  'moonbeam',\n  'moonriver',\n  'cronos',\n  'cronos-testnet',\n  'gnosis',\n  'rsk',\n  'rsk-testnet',\n  'zora',\n  'zora-testnet',\n  'zora-sepolia',\n  'mantle',\n  'blast',\n];\n\nexport const createTenderlyProviderFactory = (tenderlySdk: TenderlySdk) => {\n  const providers: Map<ChainKey, TenderlyProxyProvider> = new Map();\n  const providerFactory: ProviderFactory<TenderlyProxyProvider> = (chainKey: ChainKey) => {\n    const existingProvider = providers.get(chainKey);\n    if (existingProvider) return existingProvider;\n    const createdProvider = new TestingProxyProvider(createTenderlyProvider(chainKey));\n    providers.set(chainKey, createdProvider);\n    return createdProvider;\n  };\n  return providerFactory;\n\n  function createTenderlyProvider(chainKey: ChainKey): Promise<TenderlyProvider> {\n    return tenderlySdk.createFork({chainKey}).then((fork) => new TenderlyProvider(fork));\n  }\n};\n\ntype TenderlyProxyProvider = TestingProxyProvider<TenderlyProvider>;\n"]}