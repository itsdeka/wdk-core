{"version":3,"sources":["../src/anvil.ts","../src/abi/ERC20.json","../src/utils/setErc20Balance.ts"],"names":["utils"],"mappings":"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","sourcesContent":["import {JsonRpcProvider} from '@ethersproject/providers';\nimport {BigNumber, ethers, utils} from 'ethers';\nimport {\n  TestingProxyProvider,\n  type TestingFork,\n  type TestingProvider,\n  type TestingSdk,\n} from './testing';\n\nimport {type ChainKey, assert, waitFor} from '@layerzerolabs/ui-core';\nimport ERC20_ABI from './abi/ERC20.json';\nimport {setErc20Balance} from './utils/setErc20Balance';\nimport type {Anvil, CreateAnvilOptions} from '@viem/anvil';\nimport type {ProviderFactory} from './providerFactory';\n\nexport class AnvilProvider extends JsonRpcProvider implements TestingProvider {\n  protected _started = false;\n\n  constructor(public readonly fork: AnvilFork) {\n    super(fork.forkUrl);\n  }\n\n  async startFork() {\n    await this.fork.start();\n  }\n  async stopFork() {\n    await this.fork.stop();\n  }\n\n  addBalance(address: string, amount: number | bigint) {\n    return this.getBalance(address, 'latest').then((balance) => {\n      const balanceBi = balance.toBigInt();\n      const amountBi = BigInt(amount);\n      return this.setBalance(address, balanceBi + amountBi);\n    });\n  }\n\n  setBalance(address: string, amount: number | bigint) {\n    return this.send('anvil_setBalance', [\n      address,\n      utils.hexValue(BigNumber.from(amount).toHexString()),\n    ]);\n  }\n\n  getErc20Balance(contract: string, wallet: string) {\n    const erc20 = new ethers.Contract(contract, ERC20_ABI, this);\n    return erc20.balanceOf(wallet);\n  }\n\n  async setErc20Balance(token: string, wallet: string, value: number | bigint) {\n    await setErc20Balance({token, recipient: wallet, amount: value}, this);\n  }\n}\n\nexport class AnvilFork implements TestingFork {\n  constructor(\n    protected readonly anvil: Anvil,\n    anvilSdk?: AnvilSdk,\n  ) {}\n\n  async start() {\n    const status = this.anvil.status;\n    // todo: how to ensure anvil is ready?\n    if (status === 'listening') return;\n    if (status === 'starting') return;\n    await this.anvil.start();\n    await waitFor(() => isAnvilReady(getAnvilUrl(this.anvil)));\n  }\n\n  async stop() {\n    await this.anvil.stop();\n  }\n\n  get forkUrl() {\n    return getAnvilUrl(this.anvil);\n  }\n}\n\ninterface AnvilSdkOptions {\n  log?: boolean;\n  chains: Record<ChainKey, CreateAnvilOptions>;\n}\n\nexport class AnvilSdk implements TestingSdk<AnvilFork> {\n  protected logger: typeof console | undefined = undefined;\n  constructor(public readonly options: AnvilSdkOptions) {\n    if (this.options.log) this.logger = console;\n  }\n\n  protected getAnvilOptions(chainKey: ChainKey) {\n    const config = this.options.chains[chainKey];\n    assert(config, `No Anvil chain config found for chainKey: ${chainKey}`);\n    return config;\n  }\n\n  async createFork(input: {chainKey: ChainKey}) {\n    this.logger?.log(`Creating Anvil fork for chainKey: ${input.chainKey}`);\n    const anvilOptions = this.getAnvilOptions(input.chainKey);\n    const {default: getPort} = await import('get-port');\n    const {createAnvil} = await import('@viem/anvil');\n    const port = await (anvilOptions.port ?? getPort());\n    const anvil = createAnvil({\n      ...anvilOptions,\n      port,\n    });\n    return new AnvilFork(anvil);\n  }\n}\n\ntype AnvilProxyProvider = TestingProxyProvider<AnvilProvider>;\n\nexport const createAnvilProviderFactory = (\n  anvilSdk: AnvilSdk,\n): ProviderFactory<AnvilProxyProvider> => {\n  const providers = new Map<ChainKey, AnvilProxyProvider>();\n\n  return (chainKey: ChainKey) => {\n    const existingProvider = providers.get(chainKey);\n    if (existingProvider) return existingProvider;\n    const createdProvider = new TestingProxyProvider(createAnvilProvider(chainKey));\n    providers.set(chainKey, createdProvider);\n    return createdProvider;\n  };\n\n  async function createAnvilProvider(chainKey: ChainKey): Promise<AnvilProvider> {\n    const fork = await anvilSdk.createFork({chainKey});\n    const anvilProvider = new AnvilProvider(fork);\n    return anvilProvider;\n  }\n};\n\nfunction getAnvilUrl(anvil: Anvil) {\n  return `http://${anvil.host}:${anvil.port}`;\n}\n\nasync function isAnvilReady(anvilUrl: string) {\n  const provider = new JsonRpcProvider(anvilUrl);\n  return provider.getBlock('latest').then(() => true);\n}\n","[\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"name\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"approve\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_from\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"decimals\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint8\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [\n      {\n        \"name\": \"_owner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"name\": \"balance\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": true,\n    \"inputs\": [\n      {\n        \"name\": \"_owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"name\": \"_spender\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"allowance\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"payable\": true,\n    \"stateMutability\": \"payable\",\n    \"type\": \"fallback\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Approval\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  }\n]\n","/* \n  This file is based on the hardhat-deal helpers: \n  https://github.com/Rubilmax/hardhat-deal/blob/master/src/helpers.ts \n*/\nimport type {JsonRpcProvider} from '@ethersproject/providers';\nimport {type BigNumberish, utils} from 'ethers';\n\nconst {Interface, solidityKeccak256, getAddress, hexZeroPad, hexlify} = utils;\n\nexport enum StorageLayoutType {\n  SOLIDITY = 'solidity',\n  VYPER = 'vyper',\n}\n\nconst balanceOfIfc = new Interface(['function balanceOf(address) external view returns (uint256)']);\n\nconst getBalanceOfSlot = (type: StorageLayoutType, slot: number, recipient: string) => {\n  if (type === StorageLayoutType.VYPER)\n    return solidityKeccak256(\n      ['uint256', 'uint256'],\n      [slot, recipient], // slot, key (vyper)\n    );\n\n  return solidityKeccak256(\n    ['uint256', 'uint256'],\n    [recipient, slot], // key, slot (solidity)\n  );\n};\n\ninterface Cache {\n  set(key: string, value: unknown): void;\n  get(key: string): unknown;\n  delete(key: string): void;\n  has(key: string): boolean;\n}\n\ninterface DealSlot {\n  type: StorageLayoutType;\n  slot: number;\n}\n\nconst defaultCache: Cache = new Map();\n\nexport const setErc20Balance = async (\n  {\n    token: erc20,\n    recipient,\n    amount,\n  }: {\n    token: string;\n    recipient: string;\n    amount: BigNumberish;\n  },\n  provider: JsonRpcProvider,\n  {\n    maxSlot = 256,\n    cache = defaultCache,\n    log = false,\n    // methods\n    getStorageAt = 'eth_getStorageAt',\n    setStorageAt = 'anvil_setStorageAt', // or hardhat_setStorageAt\n  }: {\n    maxSlot?: number;\n    cache?: Cache;\n    getStorageAt?: string;\n    setStorageAt?: string;\n    log?: boolean;\n  } = {},\n): Promise<DealSlot> => {\n  const logger = log ? console : undefined;\n  const [erc20Address, recipientAddress] = await Promise.all([\n    getAddress(erc20),\n    getAddress(recipient),\n  ]);\n  // might need to include chainId in the cache key\n  const cacheKey = `${erc20Address}`;\n  const hexAmount = hexZeroPad(hexlify(amount), 32);\n  let dealSlot: DealSlot = {type: StorageLayoutType.SOLIDITY, slot: 0};\n\n  const balanceOfCall = [\n    {\n      to: erc20Address,\n      data: balanceOfIfc.encodeFunctionData('balanceOf', [recipientAddress]),\n    },\n  ];\n\n  const trySlot = async () => {\n    logger?.log(`Trying slot ${dealSlot.slot} with type ${dealSlot.type} for ${erc20Address} ...`);\n    const balanceOfSlot = getBalanceOfSlot(dealSlot.type, dealSlot.slot, recipientAddress);\n\n    const storageBefore = await provider.send(getStorageAt, [\n      erc20Address,\n      balanceOfSlot,\n      'latest',\n    ]);\n\n    await provider.send(setStorageAt, [erc20Address, balanceOfSlot, hexAmount]);\n\n    const balance = await provider.send('eth_call', balanceOfCall);\n\n    if (balance === hexAmount) {\n      return true;\n    }\n\n    await provider.send(setStorageAt, [erc20Address, balanceOfSlot, storageBefore]);\n\n    return false;\n  };\n\n  const getNextDealSlot = () => {\n    const {type, slot} = dealSlot;\n\n    return {type, slot: slot + 1};\n  };\n\n  // Checking cache first\n  if (cache.has(cacheKey)) {\n    const slotNumber = Number(cache.get(cacheKey));\n    if (!isNaN(slotNumber)) {\n      dealSlot = {type: StorageLayoutType.SOLIDITY, slot: slotNumber};\n\n      const successCacheSolidity = await trySlot();\n      if (successCacheSolidity) return dealSlot;\n\n      dealSlot = {type: StorageLayoutType.VYPER, slot: slotNumber};\n      const successCacheVyper = await trySlot();\n      if (successCacheVyper) return dealSlot;\n    } else {\n      logger?.log(`Deleting invalid cache value for ${cacheKey}`);\n      // deleting invalid cache\n      cache.delete(cacheKey);\n    }\n  }\n\n  // checking solidity type first\n  dealSlot = {type: StorageLayoutType.SOLIDITY, slot: 0};\n\n  let success = await trySlot();\n\n  while (!success && dealSlot.slot <= maxSlot) {\n    dealSlot = getNextDealSlot();\n\n    success = await trySlot();\n  }\n  // vyper layout is tried in case of solidity layout failure\n  if (!success) {\n    logger?.log('Solidity layout failed, checking with Vyper...');\n\n    dealSlot.type = StorageLayoutType.VYPER;\n    dealSlot.slot = 0;\n    success = await trySlot();\n\n    while (!success && dealSlot.slot <= maxSlot) {\n      dealSlot = getNextDealSlot();\n      success = await trySlot();\n    }\n  }\n\n  // updating cache because the setStorageAt was successful for a given slot\n  if (success) {\n    cache.set(cacheKey, dealSlot.slot);\n  }\n\n  if (!success) throw Error(`Could not brute-force storage slot for ERC20 at: ${erc20Address}`);\n  return dealSlot;\n};\n"]}