{"version":3,"sources":["../src/providers/ProxyBaseProvider.ts","../src/testing.ts"],"names":[],"mappings":";AAAA,SAAQ,oBAAiC;AAElC,IAAM,oBAAN,cAAgE,aAAa;AAAA,EAClF,YAAsB,iBAAqC;AACzD,UAAM,KAAK;AADS;AAAA,EAEtB;AAAA,EAEA,MAAe,gBAAkC;AAC/C,UAAM,WAAW,MAAM,KAAK;AAC5B,WAAO,SAAS,cAAc;AAAA,EAChC;AAAA,EAEA,MAAe,QAAQ,QAAgB,QAA2B;AAChE,UAAM,WAAW,MAAM,KAAK;AAC5B,WAAO,SAAS,QAAQ,QAAQ,MAAM;AAAA,EACxC;AACF;;;ACMO,IAAM,uBAAN,cACG,kBAEV;AAAA,EACE,MAAM,YAAY;AAChB,UAAM,WAAW,MAAM,KAAK;AAC5B,WAAO,SAAS,UAAU;AAAA,EAC5B;AAAA,EAEA,MAAM,WAAW;AACf,UAAM,WAAW,MAAM,KAAK;AAC5B,WAAO,SAAS,SAAS;AAAA,EAC3B;AAAA,EAEA,MAAM,WAAW,SAAiB,QAAyB;AACzD,UAAM,WAAW,MAAM,KAAK;AAC5B,WAAO,SAAS,WAAW,SAAS,MAAM;AAAA,EAC5C;AAAA,EAEA,MAAM,WAAW,SAAiB,QAAyB;AACzD,UAAM,WAAW,MAAM,KAAK;AAC5B,WAAO,SAAS,WAAW,SAAS,MAAM;AAAA,EAC5C;AAAA,EAEA,MAAM,gBAAgB,OAAe,QAAgB,OAAwB;AAC3E,UAAM,WAAW,MAAM,KAAK;AAC5B,WAAO,SAAS,gBAAgB,OAAO,QAAQ,KAAK;AAAA,EACtD;AACF","sourcesContent":["import {BaseProvider, type Network} from '@ethersproject/providers';\n\nexport class ProxyBaseProvider<TProvider extends BaseProvider> extends BaseProvider {\n  constructor(protected providerPromise: Promise<TProvider>) {\n    super('any');\n  }\n\n  override async detectNetwork(): Promise<Network> {\n    const provider = await this.providerPromise;\n    return provider.detectNetwork();\n  }\n\n  override async perform(method: string, params: any): Promise<any> {\n    const provider = await this.providerPromise;\n    return provider.perform(method, params);\n  }\n}\n","import type {ChainKey} from '@layerzerolabs/ui-core';\nimport type {BaseProvider} from '@ethersproject/providers';\nimport {ProxyBaseProvider} from './providers/ProxyBaseProvider';\n\nexport interface TestingFork {\n  start: () => Promise<void>;\n  stop: () => Promise<void>;\n}\n\nexport type TestingSdk<T extends TestingFork> = {\n  createFork: (input: {chainKey: ChainKey}) => Promise<T>;\n};\n\nexport type TestingProvider = BaseProvider & {\n  startFork(): Promise<unknown>;\n  stopFork(): Promise<unknown>;\n\n  setBalance: (address: string, amount: number | bigint) => Promise<void>;\n  addBalance: (address: string, amount: number | bigint) => Promise<void>;\n  setErc20Balance: (token: string, wallet: string, value: number | bigint) => Promise<void>;\n};\n\nexport class TestingProxyProvider<TProvider extends TestingProvider>\n  extends ProxyBaseProvider<TProvider>\n  implements TestingProvider\n{\n  async startFork() {\n    const provider = await this.providerPromise;\n    return provider.startFork();\n  }\n\n  async stopFork() {\n    const provider = await this.providerPromise;\n    return provider.stopFork();\n  }\n\n  async setBalance(address: string, amount: number | bigint) {\n    const provider = await this.providerPromise;\n    return provider.setBalance(address, amount);\n  }\n\n  async addBalance(address: string, amount: number | bigint) {\n    const provider = await this.providerPromise;\n    return provider.addBalance(address, amount);\n  }\n\n  async setErc20Balance(token: string, wallet: string, value: number | bigint) {\n    const provider = await this.providerPromise;\n    return provider.setErc20Balance(token, wallet, value);\n  }\n}\n"]}