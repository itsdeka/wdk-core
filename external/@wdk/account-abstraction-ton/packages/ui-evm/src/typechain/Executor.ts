/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type OriginStruct = {
  srcEid: PromiseOrValue<BigNumberish>;
  sender: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
};

export type OriginStructOutput = [number, string, BigNumber] & {
  srcEid: number;
  sender: string;
  nonce: BigNumber;
};

export declare namespace IExecutor {
  export type DstConfigParamStruct = {
    dstEid: PromiseOrValue<BigNumberish>;
    baseGas: PromiseOrValue<BigNumberish>;
    multiplierBps: PromiseOrValue<BigNumberish>;
    floorMarginUSD: PromiseOrValue<BigNumberish>;
    nativeCap: PromiseOrValue<BigNumberish>;
  };

  export type DstConfigParamStructOutput = [
    number,
    BigNumber,
    number,
    BigNumber,
    BigNumber
  ] & {
    dstEid: number;
    baseGas: BigNumber;
    multiplierBps: number;
    floorMarginUSD: BigNumber;
    nativeCap: BigNumber;
  };

  export type NativeDropParamsStruct = {
    receiver: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type NativeDropParamsStructOutput = [string, BigNumber] & {
    receiver: string;
    amount: BigNumber;
  };

  export type ExecutionParamsStruct = {
    receiver: PromiseOrValue<string>;
    origin: OriginStruct;
    guid: PromiseOrValue<BytesLike>;
    message: PromiseOrValue<BytesLike>;
    extraData: PromiseOrValue<BytesLike>;
    gasLimit: PromiseOrValue<BigNumberish>;
  };

  export type ExecutionParamsStructOutput = [
    string,
    OriginStructOutput,
    string,
    string,
    string,
    BigNumber
  ] & {
    receiver: string;
    origin: OriginStructOutput;
    guid: string;
    message: string;
    extraData: string;
    gasLimit: BigNumber;
  };
}

export interface ExecutorInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "implementation()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "allowlistSize()": FunctionFragment;
    "assignJob(uint32,address,uint256,bytes)": FunctionFragment;
    "defaultMultiplierBps()": FunctionFragment;
    "dstConfig(uint32)": FunctionFragment;
    "endpoint()": FunctionFragment;
    "execute301(bytes,uint256)": FunctionFragment;
    "getFee(uint32,address,uint256,bytes)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSupportedOptionTypes(uint32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasAcl(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address[],address,address,address[])": FunctionFragment;
    "localEid()": FunctionFragment;
    "nativeDrop((uint32,bytes32,uint64),uint32,address,(address,uint256)[],uint256)": FunctionFragment;
    "nativeDropAndExecute301((uint32,bytes32,uint64),(address,uint256)[],uint256,bytes,uint256)": FunctionFragment;
    "nativeDropAndExecute302((address,uint256)[],uint256,(address,(uint32,bytes32,uint64),bytes32,bytes,bytes,uint256))": FunctionFragment;
    "onUpgrade(address)": FunctionFragment;
    "paused()": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "receiveUln301()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setDefaultMultiplierBps(uint16)": FunctionFragment;
    "setDstConfig((uint32,uint64,uint16,uint128,uint128)[])": FunctionFragment;
    "setPaused(bool)": FunctionFragment;
    "setPriceFeed(address)": FunctionFragment;
    "setSupportedOptionTypes(uint32,uint8[])": FunctionFragment;
    "setWorkerFeeLib(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "withdrawFee(address,address,uint256)": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
    "workerFeeLib()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "implementation"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "DEFAULT_ADMIN_ROLE"
      | "allowlistSize"
      | "assignJob"
      | "defaultMultiplierBps"
      | "dstConfig"
      | "endpoint"
      | "execute301"
      | "getFee"
      | "getRoleAdmin"
      | "getSupportedOptionTypes"
      | "grantRole"
      | "hasAcl"
      | "hasRole"
      | "initialize"
      | "localEid"
      | "nativeDrop"
      | "nativeDropAndExecute301"
      | "nativeDropAndExecute302"
      | "onUpgrade"
      | "paused"
      | "priceFeed"
      | "receiveUln301"
      | "renounceRole"
      | "revokeRole"
      | "setDefaultMultiplierBps"
      | "setDstConfig"
      | "setPaused"
      | "setPriceFeed"
      | "setSupportedOptionTypes"
      | "setWorkerFeeLib"
      | "supportsInterface"
      | "withdrawFee"
      | "withdrawToken"
      | "workerFeeLib"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assignJob",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMultiplierBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dstConfig",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute301",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedOptionTypes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAcl",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "localEid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nativeDrop",
    values: [
      OriginStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      IExecutor.NativeDropParamsStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeDropAndExecute301",
    values: [
      OriginStruct,
      IExecutor.NativeDropParamsStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeDropAndExecute302",
    values: [
      IExecutor.NativeDropParamsStruct[],
      PromiseOrValue<BigNumberish>,
      IExecutor.ExecutionParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onUpgrade",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveUln301",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultMultiplierBps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDstConfig",
    values: [IExecutor.DstConfigParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaused",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedOptionTypes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorkerFeeLib",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "workerFeeLib",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultMultiplierBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dstConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute301", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedOptionTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasAcl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "localEid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nativeDrop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeDropAndExecute301",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeDropAndExecute302",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onUpgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveUln301",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultMultiplierBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDstConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedOptionTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorkerFeeLib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workerFeeLib",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "DstConfigSet(tuple[])": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NativeDropApplied(tuple,uint32,address,tuple[],bool[])": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetDefaultMultiplierBps(uint16)": EventFragment;
    "SetPriceFeed(address)": EventFragment;
    "SetSupportedOptionTypes(uint32,uint8[])": EventFragment;
    "SetWorkerLib(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DstConfigSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NativeDropApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDefaultMultiplierBps"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSupportedOptionTypes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWorkerLib"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface DstConfigSetEventObject {
  params: IExecutor.DstConfigParamStructOutput[];
}
export type DstConfigSetEvent = TypedEvent<
  [IExecutor.DstConfigParamStructOutput[]],
  DstConfigSetEventObject
>;

export type DstConfigSetEventFilter = TypedEventFilter<DstConfigSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NativeDropAppliedEventObject {
  origin: OriginStructOutput;
  dstEid: number;
  oapp: string;
  params: IExecutor.NativeDropParamsStructOutput[];
  success: boolean[];
}
export type NativeDropAppliedEvent = TypedEvent<
  [
    OriginStructOutput,
    number,
    string,
    IExecutor.NativeDropParamsStructOutput[],
    boolean[]
  ],
  NativeDropAppliedEventObject
>;

export type NativeDropAppliedEventFilter =
  TypedEventFilter<NativeDropAppliedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetDefaultMultiplierBpsEventObject {
  multiplierBps: number;
}
export type SetDefaultMultiplierBpsEvent = TypedEvent<
  [number],
  SetDefaultMultiplierBpsEventObject
>;

export type SetDefaultMultiplierBpsEventFilter =
  TypedEventFilter<SetDefaultMultiplierBpsEvent>;

export interface SetPriceFeedEventObject {
  priceFeed: string;
}
export type SetPriceFeedEvent = TypedEvent<[string], SetPriceFeedEventObject>;

export type SetPriceFeedEventFilter = TypedEventFilter<SetPriceFeedEvent>;

export interface SetSupportedOptionTypesEventObject {
  dstEid: number;
  optionTypes: number[];
}
export type SetSupportedOptionTypesEvent = TypedEvent<
  [number, number[]],
  SetSupportedOptionTypesEventObject
>;

export type SetSupportedOptionTypesEventFilter =
  TypedEventFilter<SetSupportedOptionTypesEvent>;

export interface SetWorkerLibEventObject {
  workerLib: string;
}
export type SetWorkerLibEvent = TypedEvent<[string], SetWorkerLibEventObject>;

export type SetWorkerLibEventFilter = TypedEventFilter<SetWorkerLibEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  lib: string;
  to: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Executor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExecutorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    implementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    assignJob(
      _dstEid: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _calldataSize: PromiseOrValue<BigNumberish>,
      _options: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>;

    dstConfig(
      dstEid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber] & {
        baseGas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
        nativeCap: BigNumber;
      }
    >;

    endpoint(overrides?: CallOverrides): Promise<[string]>;

    execute301(
      _packet: PromiseOrValue<BytesLike>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getFee(
      _dstEid: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _calldataSize: PromiseOrValue<BigNumberish>,
      _options: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSupportedOptionTypes(
      _eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasAcl(
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _endpoint: PromiseOrValue<string>,
      _receiveUln301: PromiseOrValue<string>,
      _messageLibs: PromiseOrValue<string>[],
      _priceFeed: PromiseOrValue<string>,
      _roleAdmin: PromiseOrValue<string>,
      _admins: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    localEid(overrides?: CallOverrides): Promise<[number]>;

    nativeDrop(
      _origin: OriginStruct,
      _dstEid: PromiseOrValue<BigNumberish>,
      _oapp: PromiseOrValue<string>,
      _nativeDropParams: IExecutor.NativeDropParamsStruct[],
      _nativeDropGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nativeDropAndExecute301(
      _origin: OriginStruct,
      _nativeDropParams: IExecutor.NativeDropParamsStruct[],
      _nativeDropGasLimit: PromiseOrValue<BigNumberish>,
      _packet: PromiseOrValue<BytesLike>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nativeDropAndExecute302(
      _nativeDropParams: IExecutor.NativeDropParamsStruct[],
      _nativeDropGasLimit: PromiseOrValue<BigNumberish>,
      _executionParams: IExecutor.ExecutionParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onUpgrade(
      _receiveUln301: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    receiveUln301(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultMultiplierBps(
      _multiplierBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDstConfig(
      _params: IExecutor.DstConfigParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSupportedOptionTypes(
      _eid: PromiseOrValue<BigNumberish>,
      _optionTypes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWorkerFeeLib(
      _workerFeeLib: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawFee(
      _lib: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    workerFeeLib(overrides?: CallOverrides): Promise<[string]>;
  };

  admin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  implementation(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;

  assignJob(
    _dstEid: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<string>,
    _calldataSize: PromiseOrValue<BigNumberish>,
    _options: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;

  dstConfig(
    dstEid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber] & {
      baseGas: BigNumber;
      multiplierBps: number;
      floorMarginUSD: BigNumber;
      nativeCap: BigNumber;
    }
  >;

  endpoint(overrides?: CallOverrides): Promise<string>;

  execute301(
    _packet: PromiseOrValue<BytesLike>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getFee(
    _dstEid: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<string>,
    _calldataSize: PromiseOrValue<BigNumberish>,
    _options: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSupportedOptionTypes(
    _eid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasAcl(
    _sender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _endpoint: PromiseOrValue<string>,
    _receiveUln301: PromiseOrValue<string>,
    _messageLibs: PromiseOrValue<string>[],
    _priceFeed: PromiseOrValue<string>,
    _roleAdmin: PromiseOrValue<string>,
    _admins: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  localEid(overrides?: CallOverrides): Promise<number>;

  nativeDrop(
    _origin: OriginStruct,
    _dstEid: PromiseOrValue<BigNumberish>,
    _oapp: PromiseOrValue<string>,
    _nativeDropParams: IExecutor.NativeDropParamsStruct[],
    _nativeDropGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nativeDropAndExecute301(
    _origin: OriginStruct,
    _nativeDropParams: IExecutor.NativeDropParamsStruct[],
    _nativeDropGasLimit: PromiseOrValue<BigNumberish>,
    _packet: PromiseOrValue<BytesLike>,
    _gasLimit: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nativeDropAndExecute302(
    _nativeDropParams: IExecutor.NativeDropParamsStruct[],
    _nativeDropGasLimit: PromiseOrValue<BigNumberish>,
    _executionParams: IExecutor.ExecutionParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onUpgrade(
    _receiveUln301: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  receiveUln301(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultMultiplierBps(
    _multiplierBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDstConfig(
    _params: IExecutor.DstConfigParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaused(
    _paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSupportedOptionTypes(
    _eid: PromiseOrValue<BigNumberish>,
    _optionTypes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWorkerFeeLib(
    _workerFeeLib: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawFee(
    _lib: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  workerFeeLib(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;

    assignJob(
      _dstEid: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _calldataSize: PromiseOrValue<BigNumberish>,
      _options: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>;

    dstConfig(
      dstEid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber] & {
        baseGas: BigNumber;
        multiplierBps: number;
        floorMarginUSD: BigNumber;
        nativeCap: BigNumber;
      }
    >;

    endpoint(overrides?: CallOverrides): Promise<string>;

    execute301(
      _packet: PromiseOrValue<BytesLike>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getFee(
      _dstEid: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _calldataSize: PromiseOrValue<BigNumberish>,
      _options: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSupportedOptionTypes(
      _eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasAcl(
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _endpoint: PromiseOrValue<string>,
      _receiveUln301: PromiseOrValue<string>,
      _messageLibs: PromiseOrValue<string>[],
      _priceFeed: PromiseOrValue<string>,
      _roleAdmin: PromiseOrValue<string>,
      _admins: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    localEid(overrides?: CallOverrides): Promise<number>;

    nativeDrop(
      _origin: OriginStruct,
      _dstEid: PromiseOrValue<BigNumberish>,
      _oapp: PromiseOrValue<string>,
      _nativeDropParams: IExecutor.NativeDropParamsStruct[],
      _nativeDropGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    nativeDropAndExecute301(
      _origin: OriginStruct,
      _nativeDropParams: IExecutor.NativeDropParamsStruct[],
      _nativeDropGasLimit: PromiseOrValue<BigNumberish>,
      _packet: PromiseOrValue<BytesLike>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    nativeDropAndExecute302(
      _nativeDropParams: IExecutor.NativeDropParamsStruct[],
      _nativeDropGasLimit: PromiseOrValue<BigNumberish>,
      _executionParams: IExecutor.ExecutionParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    onUpgrade(
      _receiveUln301: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    receiveUln301(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultMultiplierBps(
      _multiplierBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDstConfig(
      _params: IExecutor.DstConfigParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupportedOptionTypes(
      _eid: PromiseOrValue<BigNumberish>,
      _optionTypes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setWorkerFeeLib(
      _workerFeeLib: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawFee(
      _lib: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    workerFeeLib(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "DstConfigSet(tuple[])"(params?: null): DstConfigSetEventFilter;
    DstConfigSet(params?: null): DstConfigSetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NativeDropApplied(tuple,uint32,address,tuple[],bool[])"(
      origin?: null,
      dstEid?: null,
      oapp?: null,
      params?: null,
      success?: null
    ): NativeDropAppliedEventFilter;
    NativeDropApplied(
      origin?: null,
      dstEid?: null,
      oapp?: null,
      params?: null,
      success?: null
    ): NativeDropAppliedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SetDefaultMultiplierBps(uint16)"(
      multiplierBps?: null
    ): SetDefaultMultiplierBpsEventFilter;
    SetDefaultMultiplierBps(
      multiplierBps?: null
    ): SetDefaultMultiplierBpsEventFilter;

    "SetPriceFeed(address)"(priceFeed?: null): SetPriceFeedEventFilter;
    SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter;

    "SetSupportedOptionTypes(uint32,uint8[])"(
      dstEid?: null,
      optionTypes?: null
    ): SetSupportedOptionTypesEventFilter;
    SetSupportedOptionTypes(
      dstEid?: null,
      optionTypes?: null
    ): SetSupportedOptionTypesEventFilter;

    "SetWorkerLib(address)"(workerLib?: null): SetWorkerLibEventFilter;
    SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdraw(address,address,uint256)"(
      lib?: null,
      to?: null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    implementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>;

    assignJob(
      _dstEid: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _calldataSize: PromiseOrValue<BigNumberish>,
      _options: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>;

    dstConfig(
      dstEid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endpoint(overrides?: CallOverrides): Promise<BigNumber>;

    execute301(
      _packet: PromiseOrValue<BytesLike>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getFee(
      _dstEid: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _calldataSize: PromiseOrValue<BigNumberish>,
      _options: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSupportedOptionTypes(
      _eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasAcl(
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _endpoint: PromiseOrValue<string>,
      _receiveUln301: PromiseOrValue<string>,
      _messageLibs: PromiseOrValue<string>[],
      _priceFeed: PromiseOrValue<string>,
      _roleAdmin: PromiseOrValue<string>,
      _admins: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    localEid(overrides?: CallOverrides): Promise<BigNumber>;

    nativeDrop(
      _origin: OriginStruct,
      _dstEid: PromiseOrValue<BigNumberish>,
      _oapp: PromiseOrValue<string>,
      _nativeDropParams: IExecutor.NativeDropParamsStruct[],
      _nativeDropGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nativeDropAndExecute301(
      _origin: OriginStruct,
      _nativeDropParams: IExecutor.NativeDropParamsStruct[],
      _nativeDropGasLimit: PromiseOrValue<BigNumberish>,
      _packet: PromiseOrValue<BytesLike>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nativeDropAndExecute302(
      _nativeDropParams: IExecutor.NativeDropParamsStruct[],
      _nativeDropGasLimit: PromiseOrValue<BigNumberish>,
      _executionParams: IExecutor.ExecutionParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onUpgrade(
      _receiveUln301: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    receiveUln301(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultMultiplierBps(
      _multiplierBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDstConfig(
      _params: IExecutor.DstConfigParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSupportedOptionTypes(
      _eid: PromiseOrValue<BigNumberish>,
      _optionTypes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWorkerFeeLib(
      _workerFeeLib: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFee(
      _lib: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    implementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assignJob(
      _dstEid: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _calldataSize: PromiseOrValue<BigNumberish>,
      _options: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defaultMultiplierBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dstConfig(
      dstEid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute301(
      _packet: PromiseOrValue<BytesLike>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getFee(
      _dstEid: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<string>,
      _calldataSize: PromiseOrValue<BigNumberish>,
      _options: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedOptionTypes(
      _eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasAcl(
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _endpoint: PromiseOrValue<string>,
      _receiveUln301: PromiseOrValue<string>,
      _messageLibs: PromiseOrValue<string>[],
      _priceFeed: PromiseOrValue<string>,
      _roleAdmin: PromiseOrValue<string>,
      _admins: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    localEid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nativeDrop(
      _origin: OriginStruct,
      _dstEid: PromiseOrValue<BigNumberish>,
      _oapp: PromiseOrValue<string>,
      _nativeDropParams: IExecutor.NativeDropParamsStruct[],
      _nativeDropGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nativeDropAndExecute301(
      _origin: OriginStruct,
      _nativeDropParams: IExecutor.NativeDropParamsStruct[],
      _nativeDropGasLimit: PromiseOrValue<BigNumberish>,
      _packet: PromiseOrValue<BytesLike>,
      _gasLimit: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nativeDropAndExecute302(
      _nativeDropParams: IExecutor.NativeDropParamsStruct[],
      _nativeDropGasLimit: PromiseOrValue<BigNumberish>,
      _executionParams: IExecutor.ExecutionParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onUpgrade(
      _receiveUln301: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveUln301(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultMultiplierBps(
      _multiplierBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDstConfig(
      _params: IExecutor.DstConfigParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaused(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSupportedOptionTypes(
      _eid: PromiseOrValue<BigNumberish>,
      _optionTypes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWorkerFeeLib(
      _workerFeeLib: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      _lib: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
