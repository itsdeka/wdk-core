/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IStargateWidget {
  export type FeeObjStruct = {
    tenthBps: PromiseOrValue<BigNumberish>;
    feeCollector: PromiseOrValue<string>;
  };

  export type FeeObjStructOutput = [BigNumber, string] & {
    tenthBps: BigNumber;
    feeCollector: string;
  };
}

export declare namespace IStargateRouter {
  export type LzTxObjStruct = {
    dstGasForCall: PromiseOrValue<BigNumberish>;
    dstNativeAmount: PromiseOrValue<BigNumberish>;
    dstNativeAddr: PromiseOrValue<BytesLike>;
  };

  export type LzTxObjStructOutput = [BigNumber, BigNumber, string] & {
    dstGasForCall: BigNumber;
    dstNativeAmount: BigNumber;
    dstNativeAddr: string;
  };
}

export interface StargateWidgetInterface extends utils.Interface {
  functions: {
    "MAX_UINT()": FunctionFragment;
    "TENTH_BPS_DENOMINATOR()": FunctionFragment;
    "partnerSwap(bytes2)": FunctionFragment;
    "stargateFactory()": FunctionFragment;
    "stargateRouter()": FunctionFragment;
    "stargateRouterETH()": FunctionFragment;
    "swapETH(uint16,uint256,uint256,bytes,bytes2,(uint256,address))": FunctionFragment;
    "swapTokens(uint16,uint16,uint16,uint256,uint256,(uint256,uint256,bytes),bytes,bytes2,(uint256,address))": FunctionFragment;
    "tokenApproved(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_UINT"
      | "TENTH_BPS_DENOMINATOR"
      | "partnerSwap"
      | "stargateFactory"
      | "stargateRouter"
      | "stargateRouterETH"
      | "swapETH"
      | "swapTokens"
      | "tokenApproved"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MAX_UINT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TENTH_BPS_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "partnerSwap",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "stargateFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stargateRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stargateRouterETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapETH",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      IStargateWidget.FeeObjStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      IStargateRouter.LzTxObjStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      IStargateWidget.FeeObjStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenApproved",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_UINT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TENTH_BPS_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partnerSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stargateFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stargateRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stargateRouterETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenApproved",
    data: BytesLike
  ): Result;

  events: {
    "PartnerSwap(bytes2)": EventFragment;
    "WidgetSwapped(bytes2,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PartnerSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WidgetSwapped"): EventFragment;
}

export interface PartnerSwapEventObject {
  partnerId: string;
}
export type PartnerSwapEvent = TypedEvent<[string], PartnerSwapEventObject>;

export type PartnerSwapEventFilter = TypedEventFilter<PartnerSwapEvent>;

export interface WidgetSwappedEventObject {
  partnerId: string;
  tenthBps: BigNumber;
  widgetFee: BigNumber;
}
export type WidgetSwappedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WidgetSwappedEventObject
>;

export type WidgetSwappedEventFilter = TypedEventFilter<WidgetSwappedEvent>;

export interface StargateWidget extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StargateWidgetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_UINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    TENTH_BPS_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    partnerSwap(
      _partnerId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stargateFactory(overrides?: CallOverrides): Promise<[string]>;

    stargateRouter(overrides?: CallOverrides): Promise<[string]>;

    stargateRouterETH(overrides?: CallOverrides): Promise<[string]>;

    swapETH(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      _partnerId: PromiseOrValue<BytesLike>,
      _feeObj: IStargateWidget.FeeObjStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokens(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      _to: PromiseOrValue<BytesLike>,
      _partnerId: PromiseOrValue<BytesLike>,
      _feeObj: IStargateWidget.FeeObjStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenApproved(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

  TENTH_BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  partnerSwap(
    _partnerId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stargateFactory(overrides?: CallOverrides): Promise<string>;

  stargateRouter(overrides?: CallOverrides): Promise<string>;

  stargateRouterETH(overrides?: CallOverrides): Promise<string>;

  swapETH(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _amountLD: PromiseOrValue<BigNumberish>,
    _minAmountLD: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BytesLike>,
    _partnerId: PromiseOrValue<BytesLike>,
    _feeObj: IStargateWidget.FeeObjStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokens(
    _dstChainId: PromiseOrValue<BigNumberish>,
    _srcPoolId: PromiseOrValue<BigNumberish>,
    _dstPoolId: PromiseOrValue<BigNumberish>,
    _amountLD: PromiseOrValue<BigNumberish>,
    _minAmountLD: PromiseOrValue<BigNumberish>,
    _lzTxParams: IStargateRouter.LzTxObjStruct,
    _to: PromiseOrValue<BytesLike>,
    _partnerId: PromiseOrValue<BytesLike>,
    _feeObj: IStargateWidget.FeeObjStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenApproved(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

    TENTH_BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    partnerSwap(
      _partnerId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    stargateFactory(overrides?: CallOverrides): Promise<string>;

    stargateRouter(overrides?: CallOverrides): Promise<string>;

    stargateRouterETH(overrides?: CallOverrides): Promise<string>;

    swapETH(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      _partnerId: PromiseOrValue<BytesLike>,
      _feeObj: IStargateWidget.FeeObjStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokens(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      _to: PromiseOrValue<BytesLike>,
      _partnerId: PromiseOrValue<BytesLike>,
      _feeObj: IStargateWidget.FeeObjStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenApproved(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "PartnerSwap(bytes2)"(
      partnerId?: PromiseOrValue<BytesLike> | null
    ): PartnerSwapEventFilter;
    PartnerSwap(
      partnerId?: PromiseOrValue<BytesLike> | null
    ): PartnerSwapEventFilter;

    "WidgetSwapped(bytes2,uint256,uint256)"(
      partnerId?: PromiseOrValue<BytesLike> | null,
      tenthBps?: null,
      widgetFee?: null
    ): WidgetSwappedEventFilter;
    WidgetSwapped(
      partnerId?: PromiseOrValue<BytesLike> | null,
      tenthBps?: null,
      widgetFee?: null
    ): WidgetSwappedEventFilter;
  };

  estimateGas: {
    MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

    TENTH_BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    partnerSwap(
      _partnerId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stargateFactory(overrides?: CallOverrides): Promise<BigNumber>;

    stargateRouter(overrides?: CallOverrides): Promise<BigNumber>;

    stargateRouterETH(overrides?: CallOverrides): Promise<BigNumber>;

    swapETH(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      _partnerId: PromiseOrValue<BytesLike>,
      _feeObj: IStargateWidget.FeeObjStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokens(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      _to: PromiseOrValue<BytesLike>,
      _partnerId: PromiseOrValue<BytesLike>,
      _feeObj: IStargateWidget.FeeObjStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenApproved(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_UINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TENTH_BPS_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    partnerSwap(
      _partnerId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stargateFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stargateRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stargateRouterETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapETH(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BytesLike>,
      _partnerId: PromiseOrValue<BytesLike>,
      _feeObj: IStargateWidget.FeeObjStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokens(
      _dstChainId: PromiseOrValue<BigNumberish>,
      _srcPoolId: PromiseOrValue<BigNumberish>,
      _dstPoolId: PromiseOrValue<BigNumberish>,
      _amountLD: PromiseOrValue<BigNumberish>,
      _minAmountLD: PromiseOrValue<BigNumberish>,
      _lzTxParams: IStargateRouter.LzTxObjStruct,
      _to: PromiseOrValue<BytesLike>,
      _partnerId: PromiseOrValue<BytesLike>,
      _feeObj: IStargateWidget.FeeObjStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenApproved(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
