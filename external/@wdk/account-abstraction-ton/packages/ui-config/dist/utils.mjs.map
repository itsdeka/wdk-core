{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":";AAAA,OAAO,UAAU;AACjB,OAAO,QAAQ;AACf,OAAO,WAAW;AAClB,SAAQ,gBAAe;AACvB;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAGP,IAAM,oBAA8B,CAAC,eAAe,UAAU,gBAAgB;AAE9E,IAAM,uBAAiC;AAAA,EACrC;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AACF;AAEA,IAAM,iBAA2B,CAAC,eAAe,YAAY,gBAAgB,gBAAgB;AAC7F,IAAM,oBAA8B;AAAA,EAClC;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AACF;AAEA,IAAM,OAA+D;AAAA,EACnE,wBAAwB;AAAA,IACtB,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,uBAAuB;AAAA,IACrB,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,iBAAiB;AAAA,IACf,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,mBAAmB;AAAA,IACjB,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,gBAAgB;AAAA,IACd,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,mBAAmB;AAAA,IACjB,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,uBAAuB;AAAA,IACrB,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,qBAAqB;AAAA,IACnB,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,sBAAsB;AAAA,IACpB,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,mBAAmB;AAAA,IACjB,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,oBAAoB;AAAA,IAClB,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,qBAAqB;AAAA,IACnB,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,oBAAoB;AAAA,IAClB,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,qBAAqB;AAAA,IACnB,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,eAAe;AAAA,IACb,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,uBAAuB;AAAA,IACrB,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,yBAAyB;AAAA,IACvB,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA;AAEF;AAEA,eAAsB,yBAAyB;AAC7C,QAAM,MACJ;AACF,QAAM,WAAW,KAAK,QAAQ,GAAG,YAAY,mBAAmB,CAAC;AACjE,QAAM,MAAM;AACZ,MAAI;AACF,QAAI,KAAK,gCAAgC,UAAU,UAAU;AAC7D,UAAM,MAAM,KAAK,EAAC,MAAM,OAAO,cAAc,MAAK,CAAC,EAAE,MAAM,QAAQ;AAEnE,UAAM,mBAAmB,SAAS,KAAK,KAAK,UAAU,MAAM,CAAC;AAC7D,UAAM,OAAc,CAAC;AACrB,eAAW,kBAAkB,kBAAkB;AAC7C,YAAM,UAAU,KAAK,SAAS,cAAc;AAC5C,UAAI;AACF,cAAM,MAAM,oBAAoB,SAAS,gBAAgB,EAAE;AAC3D,cAAM,WAAW,qBAAqB,GAAG;AAEzC,YAAI,eAAe,SAAS,QAAQ;AAAG;AACvC,YAAI,kBAAkB,SAAS,GAAG;AAAG;AACrC,mBAAW,YAAY,MAAM;AAC3B,gBAAM,OAAO,KAAK,QAAQ,EAAE;AAC5B,gBAAM,UAAU,cAAc,gBAAgB,QAAQ;AACtD,cAAI,CAAC;AAAS;AACd,gBAAM,MAAW;AAAA,YACf;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF;AACA,eAAK,KAAK,GAAG;AAAA,QACf;AAAA,MACF,SAAS,GAAP;AACA,YAAI,aAAa,OAAO;AACtB,cAAI,MAAM,gCAAgC,YAAY,EAAE,SAAS;AAAA,QACnE;AACA,YAAI,MAAM,CAAC;AAAA,MACb;AAAA,IACF;AACA,WAAO,UAAU,WAAW,IAAI,CAAC;AAAA,EACnC,UAAE;AACA,OAAG,UAAU,UAAU,EAAC,WAAW,KAAI,CAAC;AAAA,EAC1C;AACF;AAEA,eAAsB,gCAAgC;AACpD,QAAM,MACJ;AACF,QAAM,WAAW,KAAK,QAAQ,GAAG,YAAY,mBAAmB,CAAC;AACjE,QAAM,MAAM;AACZ,MAAI;AACF,QAAI,KAAK,gCAAgC,UAAU,UAAU;AAC7D,UAAM,MAAM,KAAK,EAAC,MAAM,OAAO,cAAc,MAAK,CAAC,EAAE,MAAM,QAAQ;AAEnE,UAAM,mBAAmB,SAAS,KAAK,KAAK,UAAU,MAAM,CAAC;AAC7D,UAAM,cAA8B,CAAC;AACrC,eAAW,kBAAkB,kBAAkB;AAC7C,YAAM,UAAU,KAAK,SAAS,cAAc;AAC5C,UAAI;AACF,cAAM,QAAQ,eAAe,OAAO;AACpC,cAAM,MAAM,oBAAoB,SAAS,gBAAgB,EAAE;AAC3D,cAAM,WAAW,qBAAqB,GAAG;AAEzC,YAAI,eAAe,SAAS,QAAQ;AAAG;AACvC,YAAI,kBAAkB,SAAS,GAAG;AAAG;AACrC,YAAI,UAAU;AAAW;AAEzB,cAAM,eACJ,kBAAkB,SAAS,QAAQ,KAAK,qBAAqB,SAAS,GAAG,KAAK;AAChF,cAAM,aAAa,eAAe,gBAAgB,iBAAiB;AACnE,cAAM,aAAa,eAAe,gBAAgB,iBAAiB;AACnE,cAAM,WAAW,eAAe,gBAAgB,eAAe;AAC/D,cAAM,aAAa,eAAe,gBAAgB,iBAAiB;AACnE,cAAM,aAAa,eAAe,gBAAgB,iBAAiB;AACnE,cAAM,gBAAgB,eAAe,gBAAgB,oBAAoB;AACzE,cAAM,gBAAgB,eAAe,gBAAgB,oBAAoB;AACzE,YAAI,CAAC;AAAY,gBAAM,IAAI,MAAM,2BAA2B,SAAS;AAErE,cAAM,aAA2B;AAAA,UAC/B,SAAS;AAAA,UACT;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,oBAAY,KAAK,UAAU;AAAA,MAC7B,SAAS,GAAP;AACA,YAAI,aAAa,OAAO;AACtB,cAAI,MAAM,gCAAgC,YAAY,EAAE,SAAS;AAAA,QACnE;AACA,YAAI,MAAM,CAAC;AAAA,MACb;AAAA,IACF;AACA,WAAO,UAAU,WAAW;AAAA,EAC9B,UAAE;AACA,OAAG,UAAU,UAAU,EAAC,WAAW,KAAI,CAAC;AAAA,EAC1C;AACF;AAEA,eAAsB,yBAAyB;AAC7C,QAAM,MAAM;AACZ,QAAM,OAMF,OAAO,MAAM,MAAM,GAAG,GAAG,KAAK;AAClC,SAAO,OAAO,QAAQ,IAAI,EACvB,IAAI,CAAC,CAAC,UAAU,MAAM,MAAM;AAC3B,UAAM,cAAc,OAAO,eAAe,CAAC;AAC3C,WAAO,YAAY,IAAI,CAAC,gBAAgB;AAAA,MACtC,GAAG;AAAA,MACH,KAAK,OAAO,WAAW,GAAG;AAAA,IAC5B,EAAE;AAAA,EACJ,CAAC,EACA,KAAK;AACV;AAEA,eAAsB,kBAAkB;AACtC,QAAM,MAAM;AACZ,QAAM,OAMF,OAAO,MAAM,MAAM,GAAG,GAAG,KAAK;AAClC,SAAO,OAAO,QAAQ,IAAI,EACvB,IAAI,CAAC,CAAC,UAAU,MAAM,MAAM;AAC3B,UAAM,OAAO,OAAO,QAAQ,CAAC;AAC7B,UAAM,cACJ,OAAO,aAAa,OAAO,CAAC,YAAY,eAAe;AACrD,aAAO;AAAA,QACL,GAAG;AAAA,QACH,CAAC,WAAW,OAAO,GAAG,OAAO,WAAW,GAAG;AAAA,MAC7C;AAAA,IACF,GAAG,CAAC,CAAC,KAAK,CAAC;AACb,WAAO,OAAO,QAAQ,IAAI,EAAE,IAAI,CAAC,CAAC,SAAS,SAAS,MAAM;AACxD,aAAO;AAAA,QACL,MAAM,UAAU;AAAA,QAChB;AAAA,QACA;AAAA,QACA,KAAK,YAAY,UAAU,OAAO,KAAK;AAAA,MACzC;AAAA,IACF,CAAC;AAAA,EACH,CAAC,EACA,KAAK;AACV;AAEA,eAAsB,gCAAgC;AACpD,QAAM,MAAM;AACZ,QAAM,WAAW,KAAK,QAAQ,GAAG,YAAY,mBAAmB,CAAC;AACjE,QAAM,MAAM;AACZ,MAAI;AACF,QAAI,KAAK,gCAAgC,UAAU,UAAU;AAC7D,UAAM,MAAM,KAAK,EAAC,MAAM,OAAO,cAAc,MAAK,CAAC,EAAE,MAAM,QAAQ;AAEnE,UAAM,mBAAmB,SAAS,GAAG,yBAAyB;AAE9D,UAAM,cAA8B,CAAC;AAErC,eAAW,kBAAkB,kBAAkB;AAC7C,YAAM,UAAU,KAAK,SAAS,cAAc;AAE5C,UAAI;AACF,cAAM,QAAQ,eAAe,OAAO;AACpC,cAAM,MAAM,oBAAoB,SAAS,gBAAgB,EAAE;AAC3D,cAAM,WAAW,qBAAqB,GAAG;AAEzC,YAAI,eAAe,SAAS,QAAQ;AAAG;AACvC,YAAI,kBAAkB,SAAS,GAAG;AAAG;AACrC,YAAI,UAAU;AAAW;AAEzB,cAAM,eACJ,kBAAkB,SAAS,QAAQ,KAAK,qBAAqB,SAAS,GAAG,KAAK;AAChF,cAAM,WAAW,eAAe,gBAAgB,eAAe;AAC/D,cAAM,UAAU,eAAe,gBAAgB,cAAc;AAC7D,cAAM,YAAY,eAAe,gBAAgB,gBAAgB;AACjE,cAAM,iBAAiB,eAAe,gBAAgB,qBAAqB;AAC3E,cAAM,mBAAmB,eAAe,gBAAgB,uBAAuB;AAC/E,YAAI,CAAC;AAAU,gBAAM,IAAI,MAAM,yBAAyB,SAAS;AAEjE,cAAM,aAA2B;AAAA,UAC/B,SAAS;AAAA,UACT;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,oBAAY,KAAK,UAAU;AAAA,MAC7B,SAAS,GAAP;AACA,YAAI,aAAa,OAAO;AACtB,cAAI,MAAM,gCAAgC,YAAY,EAAE,SAAS;AAAA,QACnE;AACA,YAAI,MAAM,CAAC;AAAA,MACb;AAAA,IACF;AACA,WAAO,UAAU,WAAW;AAAA,EAC9B,UAAE;AACA,OAAG,UAAU,UAAU,EAAC,WAAW,KAAI,CAAC;AAAA,EAC1C;AACF;AAEA,IAAM,iBAAiB,CAAC,SAAiB,aAAqB;AAC5D,QAAM,UAAU,cAAc,SAAS,QAAQ;AAC/C,SAAO,UAAU,EAAC,QAAO,IAAI;AAC/B;AAEA,SAAS,cAAc,SAAiB,UAAkB;AACxD,QAAM,WAAW,KAAK,KAAK,SAAS,QAAQ;AAC5C,MAAI,CAAC,GAAG,WAAW,QAAQ;AAAG,WAAO;AACrC,QAAM,UAAU,KAAK,MAAM,GAAG,aAAa,UAAU,MAAM,CAAC,EAAE;AAC9D,MAAI,OAAO,YAAY;AAAU,WAAO,QAAQ,YAAY;AAC5D,SAAO;AACT;AAEA,SAAS,UAAmC,aAAkB;AAC5D,SAAO,YAAY,KAAK,CAAC,GAAG,MAAM,EAAE,MAAM,EAAE,GAAG;AACjD;AAEA,SAAS,WAAqC,MAAW;AACvD,SAAO,KAAK,KAAK,CAAC,GAAG,MAAM,EAAE,KAAK,cAAc,EAAE,IAAI,CAAC;AACzD","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport degit from 'tiged';\nimport {globSync} from 'glob';\nimport {\n  networkToStage,\n  networkToEndpointId,\n  EndpointVersion,\n  endpointIdToChainKey,\n} from '@layerzerolabs/lz-definitions';\nimport type {DeploymentV2, DeploymentV1, DVN} from './types';\n\nconst DEPRECATED_CHAINS: string[] = ['base-goerli', 'goerli', 'zksync-testnet'];\n\nconst DEPRECATED_ENDPOINTS: number[] = [\n  10234, // chainKey: venn-testnet\n  10237, // chainKey: xchain-testnet\n  40158, // zkpolygon\n  40172, // kava-testnet\n  40195, // wanchain-testnet,zora-testnet\n  40201, // aurora-testnet\n  40234, // venn-testnet\n  40237, // xchain-testnet\n];\n\nconst PRIVATE_CHAINS: string[] = ['rc1-testnet', 'tiltyard', 'tron-testnet', 'zksync-sepolia'];\nconst PRIVATE_ENDPOINTS: number[] = [\n  10206, // chainKey: spruce-testnet\n  10207, // chainKey: pgjjtk-testnet\n  10208, // chainKey: oda-testnet\n  10209, // chainKey: kiwi-testnet\n  10233, // chainKey: bera-testnet\n  10236, // gunzilla-testnet\n  10241, // chainKey: kiwi2-testnet\n  40259, // exocore-testnet\n];\n\nconst DVNS: {[fileName: string]: {name: string; provider: string}} = {\n  'DVNBlockhunters.json': {\n    provider: 'blockhunters',\n    name: 'Blockhunters',\n  },\n  'DVNBlockdaemon.json': {\n    provider: 'blockdaemon',\n    name: 'Blockdaemon',\n  },\n  'DVNBware.json': {\n    provider: 'bware',\n    name: 'Bware',\n  },\n  'DVNHorizen.json': {\n    provider: 'horizen',\n    name: 'Horizen',\n  },\n  'DVNGCDA.json': {\n    provider: 'gcda',\n    name: 'GCDA',\n  },\n  'DVNTapioca.json': {\n    provider: 'tapioca',\n    name: 'Tapioca',\n  },\n  'DVNPlanetarium.json': {\n    provider: 'planetarium',\n    name: 'Planetarium',\n  },\n  'DVNNodesguru.json': {\n    provider: 'nodesguru',\n    name: 'Nodesguru',\n  },\n  'DVNNethermind.json': {\n    provider: 'nethermind',\n    name: 'Nethermind',\n  },\n  'DVNAnimoca.json': {\n    provider: 'animoca',\n    name: 'Animoca',\n  },\n  'DVNLagrange.json': {\n    provider: 'lagrange',\n    name: 'Lagrange',\n  },\n  'DVNStablelab.json': {\n    provider: 'stablelab',\n    name: 'Stablelab',\n  },\n  'DVNRepublic.json': {\n    provider: 'republic',\n    name: 'Republic',\n  },\n  'DVNNocturnal.json': {\n    provider: 'nocturnal',\n    name: 'Nocturnal',\n  },\n  'DVNMIM.json': {\n    provider: 'mim',\n    name: 'MIM',\n  },\n  'CCIPDVNAdapter.json': {\n    provider: 'ccip',\n    name: 'CCIP',\n  },\n  'AxelarDVNAdapter.json': {\n    provider: 'axelar',\n    name: 'Axelar',\n  },\n  // to-do: add 3rd party DVNs (e.g., polyhedra)\n};\n\nexport async function readV2DvnsFromMonorepo() {\n  const url =\n    'https://github.com/LayerZero-Labs/monorepo/packages/layerzero-v2/evm/sdk/deployments';\n  const tempPath = path.resolve(fs.mkdtempSync('temp-deployments-'));\n  const log = console;\n  try {\n    log.info(`Downloading deployments from ${url} to ${tempPath}`);\n    await degit(url, {mode: 'git', disableCache: false}).clone(tempPath);\n\n    const deploymentsPaths = globSync(path.join(tempPath, './*/'));\n    const dvns: DVN[] = [];\n    for (const deploymentPath of deploymentsPaths) {\n      const network = path.basename(deploymentPath);\n      try {\n        const eid = networkToEndpointId(network, EndpointVersion.V2);\n        const chainKey = endpointIdToChainKey(eid);\n\n        if (PRIVATE_CHAINS.includes(chainKey)) continue;\n        if (PRIVATE_ENDPOINTS.includes(eid)) continue;\n        for (const fileName in DVNS) {\n          const name = DVNS[fileName].name;\n          const address = tryGetAddress(deploymentPath, fileName);\n          if (!address) continue;\n          const dvn: DVN = {\n            name,\n            address,\n            chainKey,\n            eid,\n          };\n          dvns.push(dvn);\n        }\n      } catch (e) {\n        if (e instanceof Error) {\n          log.error(`Could not get deployment for ${network}: ${e.message}`);\n        }\n        log.error(e);\n      }\n    }\n    return sortByEid(sortByName(dvns));\n  } finally {\n    fs.rmdirSync(tempPath, {recursive: true});\n  }\n}\n\nexport async function readV2DeploymentsFromMonorepo() {\n  const url =\n    'https://github.com/LayerZero-Labs/monorepo/packages/layerzero-v2/evm/sdk/deployments';\n  const tempPath = path.resolve(fs.mkdtempSync('temp-deployments-'));\n  const log = console;\n  try {\n    log.info(`Downloading deployments from ${url} to ${tempPath}`);\n    await degit(url, {mode: 'git', disableCache: false}).clone(tempPath);\n\n    const deploymentsPaths = globSync(path.join(tempPath, './*/'));\n    const deployments: DeploymentV2[] = [];\n    for (const deploymentPath of deploymentsPaths) {\n      const network = path.basename(deploymentPath);\n      try {\n        const stage = networkToStage(network);\n        const eid = networkToEndpointId(network, EndpointVersion.V2);\n        const chainKey = endpointIdToChainKey(eid);\n\n        if (PRIVATE_CHAINS.includes(chainKey)) continue;\n        if (PRIVATE_ENDPOINTS.includes(eid)) continue;\n        if (stage === 'sandbox') continue;\n\n        const isDeprecated =\n          DEPRECATED_CHAINS.includes(chainKey) || DEPRECATED_ENDPOINTS.includes(eid) || undefined;\n        const lzExecutor = tryGetContract(deploymentPath, 'LzExecutor.json');\n        const endpointV2 = tryGetContract(deploymentPath, 'EndpointV2.json');\n        const executor = tryGetContract(deploymentPath, 'Executor.json');\n        const sendUln301 = tryGetContract(deploymentPath, 'SendUln301.json');\n        const sendUln302 = tryGetContract(deploymentPath, 'SendUln302.json');\n        const receiveUln301 = tryGetContract(deploymentPath, 'ReceiveUln301.json');\n        const receiveUln302 = tryGetContract(deploymentPath, 'ReceiveUln302.json');\n        if (!endpointV2) throw new Error(`No endpointV2 found for ${network}`);\n\n        const deployment: DeploymentV2 = {\n          version: 2,\n          stage,\n          eid,\n          chainKey,\n          isDeprecated,\n          executor,\n          lzExecutor,\n          endpointV2,\n          sendUln301,\n          sendUln302,\n          receiveUln301,\n          receiveUln302,\n        };\n        deployments.push(deployment);\n      } catch (e) {\n        if (e instanceof Error) {\n          log.error(`Could not get deployment for ${network}: ${e.message}`);\n        }\n        log.error(e);\n      }\n    }\n    return sortByEid(deployments);\n  } finally {\n    fs.rmdirSync(tempPath, {recursive: true});\n  }\n}\n\nexport async function readDeploymentsFromApi() {\n  const url = 'https://metadata.layerzero-api.com/v1/metadata/deployments';\n  const data: Record<\n    string,\n    {\n      deployments: any[];\n      dvns: Record<string, any>;\n    }\n  > = await (await fetch(url)).json();\n  return Object.entries(data)\n    .map(([chainKey, config]) => {\n      const deployments = config.deployments || [];\n      return deployments.map((deployment) => ({\n        ...deployment,\n        eid: Number(deployment.eid),\n      }));\n    })\n    .flat();\n}\n\nexport async function readDvnsFromApi() {\n  const url = 'https://metadata.layerzero-api.com/v1/metadata/deployments';\n  const data: Record<\n    string,\n    {\n      deployments: any[];\n      dvns: Record<string, any>;\n    }\n  > = await (await fetch(url)).json();\n  return Object.entries(data)\n    .map(([chainKey, config]) => {\n      const dvns = config.dvns || {};\n      const versionEids: Record<number, number> =\n        config.deployments?.reduce((versionMap, deployment) => {\n          return {\n            ...versionMap,\n            [deployment.version]: Number(deployment.eid),\n          };\n        }, {}) || {};\n      return Object.entries(dvns).map(([address, dvnConfig]) => {\n        return {\n          name: dvnConfig.canonicalName,\n          address,\n          chainKey,\n          eid: versionEids[dvnConfig.version] ?? 0,\n        };\n      });\n    })\n    .flat();\n}\n\nexport async function readV1DeploymentsFromMonorepo() {\n  const url = 'https://github.com/LayerZero-Labs/monorepo/packages/layerzero-v1/evm/sdk';\n  const tempPath = path.resolve(fs.mkdtempSync('temp-deployments-'));\n  const log = console;\n  try {\n    log.info(`Downloading deployments from ${url} to ${tempPath}`);\n    await degit(url, {mode: 'git', disableCache: false}).clone(tempPath);\n\n    const deploymentsPaths = globSync(`${tempPath}/deployments/*/`);\n\n    const deployments: DeploymentV1[] = [];\n\n    for (const deploymentPath of deploymentsPaths) {\n      const network = path.basename(deploymentPath);\n\n      try {\n        const stage = networkToStage(network);\n        const eid = networkToEndpointId(network, EndpointVersion.V1);\n        const chainKey = endpointIdToChainKey(eid);\n\n        if (PRIVATE_CHAINS.includes(chainKey)) continue;\n        if (PRIVATE_ENDPOINTS.includes(eid)) continue;\n        if (stage === 'sandbox') continue;\n\n        const isDeprecated =\n          DEPRECATED_CHAINS.includes(chainKey) || DEPRECATED_ENDPOINTS.includes(eid) || undefined;\n        const endpoint = tryGetContract(deploymentPath, 'Endpoint.json');\n        const relayer = tryGetContract(deploymentPath, 'Relayer.json');\n        const relayerV2 = tryGetContract(deploymentPath, 'RelayerV2.json');\n        const ultraLightNode = tryGetContract(deploymentPath, 'UltraLightNode.json');\n        const ultraLightNodeV2 = tryGetContract(deploymentPath, 'UltraLightNodeV2.json');\n        if (!endpoint) throw new Error(`No endpoint found for ${network}`);\n\n        const deployment: DeploymentV1 = {\n          version: 1,\n          stage,\n          eid,\n          chainKey,\n          endpoint,\n          isDeprecated,\n          relayer,\n          relayerV2,\n          ultraLightNode,\n          ultraLightNodeV2,\n        };\n        deployments.push(deployment);\n      } catch (e) {\n        if (e instanceof Error) {\n          log.error(`Could not get deployment for ${network}: ${e.message}`);\n        }\n        log.error(e);\n      }\n    }\n    return sortByEid(deployments);\n  } finally {\n    fs.rmdirSync(tempPath, {recursive: true});\n  }\n}\n\nconst tryGetContract = (dirPath: string, fileName: string) => {\n  const address = tryGetAddress(dirPath, fileName);\n  return address ? {address} : undefined;\n};\n\nfunction tryGetAddress(dirPath: string, fileName: string) {\n  const filePath = path.join(dirPath, fileName);\n  if (!fs.existsSync(filePath)) return undefined;\n  const address = JSON.parse(fs.readFileSync(filePath, 'utf8')).address;\n  if (typeof address === 'string') return address.toLowerCase();\n  return undefined;\n}\n\nfunction sortByEid<T extends {eid: number}>(deployments: T[]) {\n  return deployments.sort((a, b) => a.eid - b.eid);\n}\n\nfunction sortByName<T extends {name: string}>(dvns: T[]) {\n  return dvns.sort((a, b) => a.name.localeCompare(b.name));\n}\n"]}