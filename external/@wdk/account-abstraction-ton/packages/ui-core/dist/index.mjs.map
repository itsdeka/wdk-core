{"version":3,"sources":["../../../node_modules/viem/utils/data/isHex.ts","../../../node_modules/viem/utils/data/size.ts","../../../node_modules/viem/errors/version.ts","../../../node_modules/viem/errors/base.ts","../../../node_modules/viem/errors/data.ts","../../../node_modules/viem/utils/data/pad.ts","../../../node_modules/viem/errors/encoding.ts","../../../node_modules/viem/utils/encoding/fromHex.ts","../../../node_modules/viem/utils/encoding/toHex.ts","../../../node_modules/viem/utils/encoding/toBytes.ts","../../../node_modules/viem/node_modules/@noble/hashes/src/_assert.ts","../../../node_modules/viem/node_modules/@noble/hashes/src/_u64.ts","../../../node_modules/viem/node_modules/@noble/hashes/src/utils.ts","../../../node_modules/viem/node_modules/@noble/hashes/src/sha3.ts","../../../node_modules/viem/utils/hash/keccak256.ts","../../../node_modules/viem/errors/address.ts","../../../node_modules/viem/utils/lru.ts","../../../node_modules/viem/utils/address/getAddress.ts","../../../node_modules/viem/utils/address/isAddress.ts","../src/config/defaults.ts","../src/network/zod.ts","../src/utils/assert.ts","../src/currency/baseCurrency.ts","../src/currency/coin.ts","../../../node_modules/viem/node_modules/@noble/hashes/src/_md.ts","../../../node_modules/viem/node_modules/@noble/hashes/src/sha256.ts","../../../node_modules/viem/utils/hash/sha256.ts","../../../node_modules/viem/errors/unit.ts","../../../node_modules/viem/utils/unit/parseUnits.ts","../../../node_modules/viem/index.ts","../src/currency/utils/validateAndParseAddress.ts","../src/currency/token.ts","../src/currency/utils/assertToken.ts","../src/currency/zod.ts","../src/fraction/fraction.ts","../src/fraction/constants.ts","../src/fraction/currencyAmount.ts","../src/fraction/percent.ts","../src/fraction/price.ts","../src/fraction/fiat.ts","../src/fraction/utils/castCurrencyAmountUnsafe.ts","../src/fraction/utils/parseUnits.ts","../src/fraction/utils/parseCurrencyAmount.ts","../src/fraction/utils/parseFraction.ts","../src/fraction/utils/parsePercent.ts","../src/fraction/utils/parseAmount.ts","../src/fraction/utils/sumUnsafe.ts","../src/fraction/utils/sumFiat.ts","../src/fraction/utils/removeDust.ts","../src/types/ChainType.ts","../src/network/toULNv2.ts","../src/network/isEvmAddress.ts","../src/utils/globals.ts","../src/network/isEvmChainKey.ts","../src/network/isAptosAddress.ts","../src/network/isAptosChainKey.ts","../src/network/isTonChainKey.ts","../src/network/isSolanaAddress.ts","../src/network/isSolanaChainKey.ts","../src/network/isTronAddress.ts","../src/network/isTronChainKey.ts","../src/network/isTonAddress.ts","../src/core/CoreModule.ts","../src/core/index.ts","../src/config/blockExplorers.ts","../src/utils/interpolateString.ts","../src/config/rpcs.ts","../src/utils/createRpcMap.ts","../src/utils/waitFor.ts","../src/utils/parseNumber.ts","../src/utils/hasAddress.ts","../src/utils/unit8ArrayToHex.ts","../src/utils/hexToUnit8Array.ts","../src/utils/error.ts","../src/duration/DurationProvider.ts","../src/duration/defaultConfig.ts","../src/duration/globals.ts","../src/types/AdapterParams.ts","../src/types/MessageFee.ts","../src/types/Stage.ts"],"names":["size","encoder","toBytes","z","isLE","_32n","sha256","Rounding","_Big","toFormat","Big","parseUnits","version","networks","deployments","blockExplorers","rpcMap","InvalidAddressError"],"mappings":"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","sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\n\nexport type IsHexErrorType = ErrorType\n\nexport function isHex(\n  value: unknown,\n  { strict = true }: { strict?: boolean | undefined } = {},\n): value is Hex {\n  if (!value) return false\n  if (typeof value !== 'string') return false\n  return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith('0x')\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nimport { type IsHexErrorType, isHex } from './isHex.js'\n\nexport type SizeErrorType = IsHexErrorType | ErrorType\n\n/**\n * @description Retrieves the size of the value (in bytes).\n *\n * @param value The value (hex or byte array) to retrieve the size of.\n * @returns The size of the value (in bytes).\n */\nexport function size(value: Hex | ByteArray) {\n  if (isHex(value, { strict: false })) return Math.ceil((value.length - 2) / 2)\n  return value.length\n}\n","export const version = '2.22.10'\n","import { version } from './version.js'\n\ntype ErrorConfig = {\n  getDocsUrl?: ((args: BaseErrorParameters) => string | undefined) | undefined\n  version?: string | undefined\n}\n\nlet errorConfig: ErrorConfig = {\n  getDocsUrl: ({\n    docsBaseUrl,\n    docsPath = '',\n    docsSlug,\n  }: BaseErrorParameters) =>\n    docsPath\n      ? `${docsBaseUrl ?? 'https://viem.sh'}${docsPath}${\n          docsSlug ? `#${docsSlug}` : ''\n        }`\n      : undefined,\n  version: `viem@${version}`,\n}\n\nexport function setErrorConfig(config: ErrorConfig) {\n  errorConfig = config\n}\n\ntype BaseErrorParameters = {\n  cause?: BaseError | Error | undefined\n  details?: string | undefined\n  docsBaseUrl?: string | undefined\n  docsPath?: string | undefined\n  docsSlug?: string | undefined\n  metaMessages?: string[] | undefined\n  name?: string | undefined\n}\n\nexport type BaseErrorType = BaseError & { name: 'BaseError' }\nexport class BaseError extends Error {\n  details: string\n  docsPath?: string | undefined\n  metaMessages?: string[] | undefined\n  shortMessage: string\n  version: string\n\n  override name = 'BaseError'\n\n  constructor(shortMessage: string, args: BaseErrorParameters = {}) {\n    const details = (() => {\n      if (args.cause instanceof BaseError) return args.cause.details\n      if (args.cause?.message) return args.cause.message\n      return args.details!\n    })()\n    const docsPath = (() => {\n      if (args.cause instanceof BaseError)\n        return args.cause.docsPath || args.docsPath\n      return args.docsPath\n    })()\n    const docsUrl = errorConfig.getDocsUrl?.({ ...args, docsPath })\n\n    const message = [\n      shortMessage || 'An error occurred.',\n      '',\n      ...(args.metaMessages ? [...args.metaMessages, ''] : []),\n      ...(docsUrl ? [`Docs: ${docsUrl}`] : []),\n      ...(details ? [`Details: ${details}`] : []),\n      ...(errorConfig.version ? [`Version: ${errorConfig.version}`] : []),\n    ].join('\\n')\n\n    super(message, args.cause ? { cause: args.cause } : undefined)\n\n    this.details = details\n    this.docsPath = docsPath\n    this.metaMessages = args.metaMessages\n    this.name = args.name ?? this.name\n    this.shortMessage = shortMessage\n    this.version = version\n  }\n\n  walk(): Error\n  walk(fn: (err: unknown) => boolean): Error | null\n  walk(fn?: any): any {\n    return walk(this, fn)\n  }\n}\n\nfunction walk(\n  err: unknown,\n  fn?: ((err: unknown) => boolean) | undefined,\n): unknown {\n  if (fn?.(err)) return err\n  if (\n    err &&\n    typeof err === 'object' &&\n    'cause' in err &&\n    err.cause !== undefined\n  )\n    return walk(err.cause, fn)\n  return fn ? null : err\n}\n","import { BaseError } from './base.js'\n\nexport type SliceOffsetOutOfBoundsErrorType = SliceOffsetOutOfBoundsError & {\n  name: 'SliceOffsetOutOfBoundsError'\n}\nexport class SliceOffsetOutOfBoundsError extends BaseError {\n  constructor({\n    offset,\n    position,\n    size,\n  }: { offset: number; position: 'start' | 'end'; size: number }) {\n    super(\n      `Slice ${\n        position === 'start' ? 'starting' : 'ending'\n      } at offset \"${offset}\" is out-of-bounds (size: ${size}).`,\n      { name: 'SliceOffsetOutOfBoundsError' },\n    )\n  }\n}\n\nexport type SizeExceedsPaddingSizeErrorType = SizeExceedsPaddingSizeError & {\n  name: 'SizeExceedsPaddingSizeError'\n}\nexport class SizeExceedsPaddingSizeError extends BaseError {\n  constructor({\n    size,\n    targetSize,\n    type,\n  }: {\n    size: number\n    targetSize: number\n    type: 'hex' | 'bytes'\n  }) {\n    super(\n      `${type.charAt(0).toUpperCase()}${type\n        .slice(1)\n        .toLowerCase()} size (${size}) exceeds padding size (${targetSize}).`,\n      { name: 'SizeExceedsPaddingSizeError' },\n    )\n  }\n}\n\nexport type InvalidBytesLengthErrorType = InvalidBytesLengthError & {\n  name: 'InvalidBytesLengthError'\n}\nexport class InvalidBytesLengthError extends BaseError {\n  constructor({\n    size,\n    targetSize,\n    type,\n  }: {\n    size: number\n    targetSize: number\n    type: 'hex' | 'bytes'\n  }) {\n    super(\n      `${type.charAt(0).toUpperCase()}${type\n        .slice(1)\n        .toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size} ${type} long.`,\n      { name: 'InvalidBytesLengthError' },\n    )\n  }\n}\n","import {\n  SizeExceedsPaddingSizeError,\n  type SizeExceedsPaddingSizeErrorType,\n} from '../../errors/data.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\ntype PadOptions = {\n  dir?: 'left' | 'right' | undefined\n  size?: number | null | undefined\n}\nexport type PadReturnType<value extends ByteArray | Hex> = value extends Hex\n  ? Hex\n  : ByteArray\n\nexport type PadErrorType = PadHexErrorType | PadBytesErrorType | ErrorType\n\nexport function pad<value extends ByteArray | Hex>(\n  hexOrBytes: value,\n  { dir, size = 32 }: PadOptions = {},\n): PadReturnType<value> {\n  if (typeof hexOrBytes === 'string')\n    return padHex(hexOrBytes, { dir, size }) as PadReturnType<value>\n  return padBytes(hexOrBytes, { dir, size }) as PadReturnType<value>\n}\n\nexport type PadHexErrorType = SizeExceedsPaddingSizeErrorType | ErrorType\n\nexport function padHex(hex_: Hex, { dir, size = 32 }: PadOptions = {}) {\n  if (size === null) return hex_\n  const hex = hex_.replace('0x', '')\n  if (hex.length > size * 2)\n    throw new SizeExceedsPaddingSizeError({\n      size: Math.ceil(hex.length / 2),\n      targetSize: size,\n      type: 'hex',\n    })\n\n  return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](\n    size * 2,\n    '0',\n  )}` as Hex\n}\n\nexport type PadBytesErrorType = SizeExceedsPaddingSizeErrorType | ErrorType\n\nexport function padBytes(\n  bytes: ByteArray,\n  { dir, size = 32 }: PadOptions = {},\n) {\n  if (size === null) return bytes\n  if (bytes.length > size)\n    throw new SizeExceedsPaddingSizeError({\n      size: bytes.length,\n      targetSize: size,\n      type: 'bytes',\n    })\n  const paddedBytes = new Uint8Array(size)\n  for (let i = 0; i < size; i++) {\n    const padEnd = dir === 'right'\n    paddedBytes[padEnd ? i : size - i - 1] =\n      bytes[padEnd ? i : bytes.length - i - 1]\n  }\n  return paddedBytes\n}\n","import type { ByteArray, Hex } from '../types/misc.js'\n\nimport { BaseError } from './base.js'\n\nexport type IntegerOutOfRangeErrorType = IntegerOutOfRangeError & {\n  name: 'IntegerOutOfRangeError'\n}\nexport class IntegerOutOfRangeError extends BaseError {\n  constructor({\n    max,\n    min,\n    signed,\n    size,\n    value,\n  }: {\n    max?: string | undefined\n    min: string\n    signed?: boolean | undefined\n    size?: number | undefined\n    value: string\n  }) {\n    super(\n      `Number \"${value}\" is not in safe ${\n        size ? `${size * 8}-bit ${signed ? 'signed' : 'unsigned'} ` : ''\n      }integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`,\n      { name: 'IntegerOutOfRangeError' },\n    )\n  }\n}\n\nexport type InvalidBytesBooleanErrorType = InvalidBytesBooleanError & {\n  name: 'InvalidBytesBooleanError'\n}\nexport class InvalidBytesBooleanError extends BaseError {\n  constructor(bytes: ByteArray) {\n    super(\n      `Bytes value \"${bytes}\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`,\n      {\n        name: 'InvalidBytesBooleanError',\n      },\n    )\n  }\n}\n\nexport type InvalidHexBooleanErrorType = InvalidHexBooleanError & {\n  name: 'InvalidHexBooleanError'\n}\nexport class InvalidHexBooleanError extends BaseError {\n  constructor(hex: Hex) {\n    super(\n      `Hex value \"${hex}\" is not a valid boolean. The hex value must be \"0x0\" (false) or \"0x1\" (true).`,\n      { name: 'InvalidHexBooleanError' },\n    )\n  }\n}\n\nexport type InvalidHexValueErrorType = InvalidHexValueError & {\n  name: 'InvalidHexValueError'\n}\nexport class InvalidHexValueError extends BaseError {\n  constructor(value: Hex) {\n    super(\n      `Hex value \"${value}\" is an odd length (${value.length}). It must be an even length.`,\n      { name: 'InvalidHexValueError' },\n    )\n  }\n}\n\nexport type SizeOverflowErrorType = SizeOverflowError & {\n  name: 'SizeOverflowError'\n}\nexport class SizeOverflowError extends BaseError {\n  constructor({ givenSize, maxSize }: { givenSize: number; maxSize: number }) {\n    super(\n      `Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`,\n      { name: 'SizeOverflowError' },\n    )\n  }\n}\n","import {\n  InvalidHexBooleanError,\n  type InvalidHexBooleanErrorType,\n  SizeOverflowError,\n  type SizeOverflowErrorType,\n} from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type SizeErrorType, size as size_ } from '../data/size.js'\nimport { type TrimErrorType, trim } from '../data/trim.js'\n\nimport { type HexToBytesErrorType, hexToBytes } from './toBytes.js'\n\nexport type AssertSizeErrorType =\n  | SizeOverflowErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function assertSize(\n  hexOrBytes: Hex | ByteArray,\n  { size }: { size: number },\n): void {\n  if (size_(hexOrBytes) > size)\n    throw new SizeOverflowError({\n      givenSize: size_(hexOrBytes),\n      maxSize: size,\n    })\n}\n\nexport type FromHexParameters<\n  to extends 'string' | 'bigint' | 'number' | 'bytes' | 'boolean',\n> =\n  | to\n  | {\n      /** Size (in bytes) of the hex value. */\n      size?: number | undefined\n      /** Type to convert to. */\n      to: to\n    }\n\nexport type FromHexReturnType<to> = to extends 'string'\n  ? string\n  : to extends 'bigint'\n    ? bigint\n    : to extends 'number'\n      ? number\n      : to extends 'bytes'\n        ? ByteArray\n        : to extends 'boolean'\n          ? boolean\n          : never\n\nexport type FromHexErrorType =\n  | HexToNumberErrorType\n  | HexToBigIntErrorType\n  | HexToBoolErrorType\n  | HexToStringErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Decodes a hex string into a string, number, bigint, boolean, or byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex\n * - Example: https://viem.sh/docs/utilities/fromHex#usage\n *\n * @param hex Hex string to decode.\n * @param toOrOpts Type to convert to or options.\n * @returns Decoded value.\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x1a4', 'number')\n * // 420\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c6421', 'string')\n * // 'Hello world'\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *   size: 32,\n *   to: 'string'\n * })\n * // 'Hello world'\n */\nexport function fromHex<\n  to extends 'string' | 'bigint' | 'number' | 'bytes' | 'boolean',\n>(hex: Hex, toOrOpts: FromHexParameters<to>): FromHexReturnType<to> {\n  const opts = typeof toOrOpts === 'string' ? { to: toOrOpts } : toOrOpts\n  const to = opts.to\n\n  if (to === 'number') return hexToNumber(hex, opts) as FromHexReturnType<to>\n  if (to === 'bigint') return hexToBigInt(hex, opts) as FromHexReturnType<to>\n  if (to === 'string') return hexToString(hex, opts) as FromHexReturnType<to>\n  if (to === 'boolean') return hexToBool(hex, opts) as FromHexReturnType<to>\n  return hexToBytes(hex, opts) as FromHexReturnType<to>\n}\n\nexport type HexToBigIntOpts = {\n  /** Whether or not the number of a signed representation. */\n  signed?: boolean | undefined\n  /** Size (in bytes) of the hex value. */\n  size?: number | undefined\n}\n\nexport type HexToBigIntErrorType = AssertSizeErrorType | ErrorType\n\n/**\n * Decodes a hex value into a bigint.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobigint\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns BigInt value.\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x1a4', { signed: true })\n * // 420n\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420n\n */\nexport function hexToBigInt(hex: Hex, opts: HexToBigIntOpts = {}): bigint {\n  const { signed } = opts\n\n  if (opts.size) assertSize(hex, { size: opts.size })\n\n  const value = BigInt(hex)\n  if (!signed) return value\n\n  const size = (hex.length - 2) / 2\n  const max = (1n << (BigInt(size) * 8n - 1n)) - 1n\n  if (value <= max) return value\n\n  return value - BigInt(`0x${'f'.padStart(size * 2, 'f')}`) - 1n\n}\n\nexport type HexToBoolOpts = {\n  /** Size (in bytes) of the hex value. */\n  size?: number | undefined\n}\n\nexport type HexToBoolErrorType =\n  | AssertSizeErrorType\n  | InvalidHexBooleanErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Decodes a hex value into a boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobool\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Boolean value.\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x01')\n * // true\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x0000000000000000000000000000000000000000000000000000000000000001', { size: 32 })\n * // true\n */\nexport function hexToBool(hex_: Hex, opts: HexToBoolOpts = {}): boolean {\n  let hex = hex_\n  if (opts.size) {\n    assertSize(hex, { size: opts.size })\n    hex = trim(hex)\n  }\n  if (trim(hex) === '0x00') return false\n  if (trim(hex) === '0x01') return true\n  throw new InvalidHexBooleanError(hex)\n}\n\nexport type HexToNumberOpts = HexToBigIntOpts\n\nexport type HexToNumberErrorType = HexToBigIntErrorType | ErrorType\n\n/**\n * Decodes a hex string into a number.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextonumber\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Number value.\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToNumber('0x1a4')\n * // 420\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420\n */\nexport function hexToNumber(hex: Hex, opts: HexToNumberOpts = {}): number {\n  return Number(hexToBigInt(hex, opts))\n}\n\nexport type HexToStringOpts = {\n  /** Size (in bytes) of the hex value. */\n  size?: number | undefined\n}\n\nexport type HexToStringErrorType =\n  | AssertSizeErrorType\n  | HexToBytesErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Decodes a hex value into a UTF-8 string.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextostring\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns String value.\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c6421')\n * // 'Hello world!'\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *  size: 32,\n * })\n * // 'Hello world'\n */\nexport function hexToString(hex: Hex, opts: HexToStringOpts = {}): string {\n  let bytes = hexToBytes(hex)\n  if (opts.size) {\n    assertSize(bytes, { size: opts.size })\n    bytes = trim(bytes, { dir: 'right' })\n  }\n  return new TextDecoder().decode(bytes)\n}\n","import {\n  IntegerOutOfRangeError,\n  type IntegerOutOfRangeErrorType,\n} from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type PadErrorType, pad } from '../data/pad.js'\n\nimport { type AssertSizeErrorType, assertSize } from './fromHex.js'\n\nconst hexes = /*#__PURE__*/ Array.from({ length: 256 }, (_v, i) =>\n  i.toString(16).padStart(2, '0'),\n)\n\nexport type ToHexParameters = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number | undefined\n}\n\nexport type ToHexErrorType =\n  | BoolToHexErrorType\n  | BytesToHexErrorType\n  | NumberToHexErrorType\n  | StringToHexErrorType\n  | ErrorType\n\n/**\n * Encodes a string, number, bigint, or ByteArray into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex\n * - Example: https://viem.sh/docs/utilities/toHex#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world')\n * // '0x48656c6c6f20776f726c6421'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex(420)\n * // '0x1a4'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world', { size: 32 })\n * // '0x48656c6c6f20776f726c64210000000000000000000000000000000000000000'\n */\nexport function toHex(\n  value: string | number | bigint | boolean | ByteArray,\n  opts: ToHexParameters = {},\n): Hex {\n  if (typeof value === 'number' || typeof value === 'bigint')\n    return numberToHex(value, opts)\n  if (typeof value === 'string') {\n    return stringToHex(value, opts)\n  }\n  if (typeof value === 'boolean') return boolToHex(value, opts)\n  return bytesToHex(value, opts)\n}\n\nexport type BoolToHexOpts = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number | undefined\n}\n\nexport type BoolToHexErrorType = AssertSizeErrorType | PadErrorType | ErrorType\n\n/**\n * Encodes a boolean into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#booltohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true)\n * // '0x1'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(false)\n * // '0x0'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true, { size: 32 })\n * // '0x0000000000000000000000000000000000000000000000000000000000000001'\n */\nexport function boolToHex(value: boolean, opts: BoolToHexOpts = {}): Hex {\n  const hex: Hex = `0x${Number(value)}`\n  if (typeof opts.size === 'number') {\n    assertSize(hex, { size: opts.size })\n    return pad(hex, { size: opts.size })\n  }\n  return hex\n}\n\nexport type BytesToHexOpts = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number | undefined\n}\n\nexport type BytesToHexErrorType = AssertSizeErrorType | PadErrorType | ErrorType\n\n/**\n * Encodes a bytes array into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#bytestohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */\nexport function bytesToHex(value: ByteArray, opts: BytesToHexOpts = {}): Hex {\n  let string = ''\n  for (let i = 0; i < value.length; i++) {\n    string += hexes[value[i]]\n  }\n  const hex = `0x${string}` as const\n\n  if (typeof opts.size === 'number') {\n    assertSize(hex, { size: opts.size })\n    return pad(hex, { dir: 'right', size: opts.size })\n  }\n  return hex\n}\n\nexport type NumberToHexOpts =\n  | {\n      /** Whether or not the number of a signed representation. */\n      signed?: boolean | undefined\n      /** The size (in bytes) of the output hex value. */\n      size: number\n    }\n  | {\n      signed?: undefined\n      /** The size (in bytes) of the output hex value. */\n      size?: number | undefined\n    }\n\nexport type NumberToHexErrorType =\n  | IntegerOutOfRangeErrorType\n  | PadErrorType\n  | ErrorType\n\n/**\n * Encodes a number or bigint into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#numbertohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420)\n * // '0x1a4'\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420, { size: 32 })\n * // '0x00000000000000000000000000000000000000000000000000000000000001a4'\n */\nexport function numberToHex(\n  value_: number | bigint,\n  opts: NumberToHexOpts = {},\n): Hex {\n  const { signed, size } = opts\n\n  const value = BigInt(value_)\n\n  let maxValue: bigint | number | undefined\n  if (size) {\n    if (signed) maxValue = (1n << (BigInt(size) * 8n - 1n)) - 1n\n    else maxValue = 2n ** (BigInt(size) * 8n) - 1n\n  } else if (typeof value_ === 'number') {\n    maxValue = BigInt(Number.MAX_SAFE_INTEGER)\n  }\n\n  const minValue = typeof maxValue === 'bigint' && signed ? -maxValue - 1n : 0\n\n  if ((maxValue && value > maxValue) || value < minValue) {\n    const suffix = typeof value_ === 'bigint' ? 'n' : ''\n    throw new IntegerOutOfRangeError({\n      max: maxValue ? `${maxValue}${suffix}` : undefined,\n      min: `${minValue}${suffix}`,\n      signed,\n      size,\n      value: `${value_}${suffix}`,\n    })\n  }\n\n  const hex = `0x${(\n    signed && value < 0 ? (1n << BigInt(size * 8)) + BigInt(value) : value\n  ).toString(16)}` as Hex\n  if (size) return pad(hex, { size }) as Hex\n  return hex\n}\n\nexport type StringToHexOpts = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number | undefined\n}\n\nexport type StringToHexErrorType = BytesToHexErrorType | ErrorType\n\nconst encoder = /*#__PURE__*/ new TextEncoder()\n\n/**\n * Encodes a UTF-8 string into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#stringtohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!')\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!', { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */\nexport function stringToHex(value_: string, opts: StringToHexOpts = {}): Hex {\n  const value = encoder.encode(value_)\n  return bytesToHex(value, opts)\n}\n","import { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type PadErrorType, pad } from '../data/pad.js'\n\nimport { type AssertSizeErrorType, assertSize } from './fromHex.js'\nimport {\n  type NumberToHexErrorType,\n  type NumberToHexOpts,\n  numberToHex,\n} from './toHex.js'\n\nconst encoder = /*#__PURE__*/ new TextEncoder()\n\nexport type ToBytesParameters = {\n  /** Size of the output bytes. */\n  size?: number | undefined\n}\n\nexport type ToBytesErrorType =\n  | NumberToBytesErrorType\n  | BoolToBytesErrorType\n  | HexToBytesErrorType\n  | StringToBytesErrorType\n  | IsHexErrorType\n  | ErrorType\n\n/**\n * Encodes a UTF-8 string, hex value, bigint, number or boolean to a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes\n * - Example: https://viem.sh/docs/utilities/toBytes#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes('Hello world')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function toBytes(\n  value: string | bigint | number | boolean | Hex,\n  opts: ToBytesParameters = {},\n): ByteArray {\n  if (typeof value === 'number' || typeof value === 'bigint')\n    return numberToBytes(value, opts)\n  if (typeof value === 'boolean') return boolToBytes(value, opts)\n  if (isHex(value)) return hexToBytes(value, opts)\n  return stringToBytes(value, opts)\n}\n\nexport type BoolToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number | undefined\n}\n\nexport type BoolToBytesErrorType =\n  | AssertSizeErrorType\n  | PadErrorType\n  | ErrorType\n\n/**\n * Encodes a boolean into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#booltobytes\n *\n * @param value Boolean value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true)\n * // Uint8Array([1])\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true, { size: 32 })\n * // Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n */\nexport function boolToBytes(value: boolean, opts: BoolToBytesOpts = {}) {\n  const bytes = new Uint8Array(1)\n  bytes[0] = Number(value)\n  if (typeof opts.size === 'number') {\n    assertSize(bytes, { size: opts.size })\n    return pad(bytes, { size: opts.size })\n  }\n  return bytes\n}\n\n// We use very optimized technique to convert hex string to byte array\nconst charCodeMap = {\n  zero: 48,\n  nine: 57,\n  A: 65,\n  F: 70,\n  a: 97,\n  f: 102,\n} as const\n\nfunction charCodeToBase16(char: number) {\n  if (char >= charCodeMap.zero && char <= charCodeMap.nine)\n    return char - charCodeMap.zero\n  if (char >= charCodeMap.A && char <= charCodeMap.F)\n    return char - (charCodeMap.A - 10)\n  if (char >= charCodeMap.a && char <= charCodeMap.f)\n    return char - (charCodeMap.a - 10)\n  return undefined\n}\n\nexport type HexToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number | undefined\n}\n\nexport type HexToBytesErrorType = AssertSizeErrorType | PadErrorType | ErrorType\n\n/**\n * Encodes a hex string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#hextobytes\n *\n * @param hex Hex string to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function hexToBytes(hex_: Hex, opts: HexToBytesOpts = {}): ByteArray {\n  let hex = hex_\n  if (opts.size) {\n    assertSize(hex, { size: opts.size })\n    hex = pad(hex, { dir: 'right', size: opts.size })\n  }\n\n  let hexString = hex.slice(2) as string\n  if (hexString.length % 2) hexString = `0${hexString}`\n\n  const length = hexString.length / 2\n  const bytes = new Uint8Array(length)\n  for (let index = 0, j = 0; index < length; index++) {\n    const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++))\n    const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++))\n    if (nibbleLeft === undefined || nibbleRight === undefined) {\n      throw new BaseError(\n        `Invalid byte sequence (\"${hexString[j - 2]}${\n          hexString[j - 1]\n        }\" in \"${hexString}\").`,\n      )\n    }\n    bytes[index] = nibbleLeft * 16 + nibbleRight\n  }\n  return bytes\n}\n\nexport type NumberToBytesErrorType =\n  | NumberToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Encodes a number into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#numbertobytes\n *\n * @param value Number to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function numberToBytes(\n  value: bigint | number,\n  opts?: NumberToHexOpts | undefined,\n) {\n  const hex = numberToHex(value, opts)\n  return hexToBytes(hex)\n}\n\nexport type StringToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number | undefined\n}\n\nexport type StringToBytesErrorType =\n  | AssertSizeErrorType\n  | PadErrorType\n  | ErrorType\n\n/**\n * Encodes a UTF-8 string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#stringtobytes\n *\n * @param value String to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function stringToBytes(\n  value: string,\n  opts: StringToBytesOpts = {},\n): ByteArray {\n  const bytes = encoder.encode(value)\n  if (typeof opts.size === 'number') {\n    assertSize(bytes, { size: opts.size })\n    return pad(bytes, { dir: 'right', size: opts.size })\n  }\n  return bytes\n}\n","function anumber(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n\n// copied from utils\nfunction isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\nfunction abytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction ahash(h: Hash) {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n\nfunction aexists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction aoutput(out: any, instance: any) {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\n\nexport { anumber, anumber as number, abytes, abytes as bytes, ahash, aexists, aoutput };\n\nconst assert = {\n  number: anumber,\n  bytes: abytes,\n  hash: ahash,\n  exists: aexists,\n  output: aoutput,\n};\nexport default assert;\n","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\n// BigUint64Array is too slow as per 2024, so we implement it using Uint32Array.\n// TODO: re-check https://issues.chromium.org/issues/42212588\n\nfunction fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number) => l;\nconst rotr32L = (h: number, _l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word: number, shift: number) =>\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\n\nexport const isLE = /* @__PURE__ */ (() =>\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nexport const byteSwap = (word: number) =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\n\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr: Uint32Array) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('utf8ToBytes expected string, got ' + typeof str);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return crypto.randomBytes(bytesLength);\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import { abytes, aexists, anumber, aoutput } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapXOFConstructorWithOpts,\n  HashXOF,\n  isLE,\n  byteSwap32,\n} from './utils.js';\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n\n// Various per round constants calculations\nconst SHA3_PI: number[] = [];\nconst SHA3_ROTL: number[] = [];\nconst _SHA3_IOTA: bigint[] = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    anumber(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    if (!isLE) byteSwap32(this.state32);\n    keccakP(this.state32, this.rounds);\n    if (!isLE) byteSwap32(this.state32);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    aexists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    aexists(this, false);\n    abytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    anumber(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    aoutput(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapXOFConstructorWithOpts<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n","import { keccak_256 } from '@noble/hashes/sha3'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type Keccak256Hash<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type Keccak256ErrorType =\n  | IsHexErrorType\n  | ToBytesErrorType\n  | ToHexErrorType\n  | ErrorType\n\nexport function keccak256<to extends To = 'hex'>(\n  value: Hex | ByteArray,\n  to_?: to | undefined,\n): Keccak256Hash<to> {\n  const to = to_ || 'hex'\n  const bytes = keccak_256(\n    isHex(value, { strict: false }) ? toBytes(value) : value,\n  )\n  if (to === 'bytes') return bytes as Keccak256Hash<to>\n  return toHex(bytes) as Keccak256Hash<to>\n}\n","import { BaseError } from './base.js'\n\nexport type InvalidAddressErrorType = InvalidAddressError & {\n  name: 'InvalidAddressError'\n}\nexport class InvalidAddressError extends BaseError {\n  constructor({ address }: { address: string }) {\n    super(`Address \"${address}\" is invalid.`, {\n      metaMessages: [\n        '- Address must be a hex value of 20 bytes (40 hex characters).',\n        '- Address must match its checksum counterpart.',\n      ],\n      name: 'InvalidAddressError',\n    })\n  }\n}\n","/**\n * Map with a LRU (Least recently used) policy.\n *\n * @link https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\n */\nexport class LruMap<value = unknown> extends Map<string, value> {\n  maxSize: number\n\n  constructor(size: number) {\n    super()\n    this.maxSize = size\n  }\n\n  override get(key: string) {\n    const value = super.get(key)\n\n    if (super.has(key) && value !== undefined) {\n      this.delete(key)\n      super.set(key, value)\n    }\n\n    return value\n  }\n\n  override set(key: string, value: value) {\n    super.set(key, value)\n    if (this.maxSize && this.size > this.maxSize) {\n      const firstKey = this.keys().next().value\n      if (firstKey) this.delete(firstKey)\n    }\n    return this\n  }\n}\n","import type { Address } from 'abitype'\n\nimport { InvalidAddressError } from '../../errors/address.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type StringToBytesErrorType,\n  stringToBytes,\n} from '../encoding/toBytes.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport { LruMap } from '../lru.js'\nimport { type IsAddressErrorType, isAddress } from './isAddress.js'\n\nconst checksumAddressCache = /*#__PURE__*/ new LruMap<Address>(8192)\n\nexport type ChecksumAddressErrorType =\n  | Keccak256ErrorType\n  | StringToBytesErrorType\n  | ErrorType\n\nexport function checksumAddress(\n  address_: Address,\n  /**\n   * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n   * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n   * that relies on EIP-55 checksum encoding (checksum without chainId).\n   *\n   * It is highly recommended to not use this feature unless you\n   * know what you are doing.\n   *\n   * See more: https://github.com/ethereum/EIPs/issues/1121\n   */\n  chainId?: number | undefined,\n): Address {\n  if (checksumAddressCache.has(`${address_}.${chainId}`))\n    return checksumAddressCache.get(`${address_}.${chainId}`)!\n\n  const hexAddress = chainId\n    ? `${chainId}${address_.toLowerCase()}`\n    : address_.substring(2).toLowerCase()\n  const hash = keccak256(stringToBytes(hexAddress), 'bytes')\n\n  const address = (\n    chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress\n  ).split('')\n  for (let i = 0; i < 40; i += 2) {\n    if (hash[i >> 1] >> 4 >= 8 && address[i]) {\n      address[i] = address[i].toUpperCase()\n    }\n    if ((hash[i >> 1] & 0x0f) >= 8 && address[i + 1]) {\n      address[i + 1] = address[i + 1].toUpperCase()\n    }\n  }\n\n  const result = `0x${address.join('')}` as const\n  checksumAddressCache.set(`${address_}.${chainId}`, result)\n  return result\n}\n\nexport type GetAddressErrorType =\n  | ChecksumAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\nexport function getAddress(\n  address: string,\n  /**\n   * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n   * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n   * that relies on EIP-55 checksum encoding (checksum without chainId).\n   *\n   * It is highly recommended to not use this feature unless you\n   * know what you are doing.\n   *\n   * See more: https://github.com/ethereum/EIPs/issues/1121\n   */\n  chainId?: number,\n): Address {\n  if (!isAddress(address, { strict: false }))\n    throw new InvalidAddressError({ address })\n  return checksumAddress(address, chainId)\n}\n","import type { Address } from 'abitype'\nimport type { ErrorType } from '../../errors/utils.js'\nimport { LruMap } from '../lru.js'\nimport { checksumAddress } from './getAddress.js'\n\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/\n\n/** @internal */\nexport const isAddressCache = /*#__PURE__*/ new LruMap<boolean>(8192)\n\nexport type IsAddressOptions = {\n  /**\n   * Enables strict mode. Whether or not to compare the address against its checksum.\n   *\n   * @default true\n   */\n  strict?: boolean | undefined\n}\n\nexport type IsAddressErrorType = ErrorType\n\nexport function isAddress(\n  address: string,\n  options?: IsAddressOptions | undefined,\n): address is Address {\n  const { strict = true } = options ?? {}\n  const cacheKey = `${address}.${strict}`\n\n  if (isAddressCache.has(cacheKey)) return isAddressCache.get(cacheKey)!\n\n  const result = (() => {\n    if (!addressRegex.test(address)) return false\n    if (address.toLowerCase() === address) return true\n    if (strict) return checksumAddress(address as Address) === address\n    return true\n  })()\n  isAddressCache.set(cacheKey, result)\n  return result\n}\n","import {networks, deployments} from '@layerzerolabs/ui-config';\nimport {coreModule} from '../core';\nimport {blockExplorers} from './blockExplorers';\nimport {createRpcMap} from '../utils/createRpcMap';\nimport {rpcMap} from './rpcs';\n\nexport function setDefaults() {\n  coreModule.setNetworks(networks);\n  coreModule.setDeployments(deployments);\n  coreModule.setBlockExplorers(blockExplorers);\n  coreModule.setRpcMap(createRpcMap(rpcMap, {}));\n}\n\nsetDefaults();\n","import z from 'zod';\nimport type {Network} from './types';\nimport {Coin, Token} from '../currency';\nimport {ChainType} from '../types/ChainType';\nimport {ChainKey} from '../types/ChainKey';\n\nexport const serializedNetworkSchema = z.object({\n  name: z.string(),\n  shortName: z.string(),\n  chainKey: z.string(),\n  chainType: z.nativeEnum(ChainType),\n  nativeChainId: z.union([z.number(), z.string()]),\n  nativeCurrency: z.object({\n    name: z.string(),\n    symbol: z.string(),\n    decimals: z.number(),\n    address: z.string().optional(),\n  }),\n});\n\nexport const networkSchema = serializedNetworkSchema.transform(({nativeCurrency, ...input}) => {\n  const network: Network = {\n    name: input.name,\n    shortName: input.shortName,\n    chainKey: input.chainKey as ChainKey,\n    chainType: input.chainType as ChainType,\n    nativeChainId: input.nativeChainId,\n    nativeCurrency: nativeCurrency.address\n      ? // @ts-ignore\n        Token.from({\n          ...nativeCurrency,\n          address: nativeCurrency.address,\n          chainKey: input.chainKey,\n        })\n      : Coin.from({\n          ...nativeCurrency,\n          chainKey: input.chainKey,\n        }),\n  };\n  return network;\n});\n\nexport type SerializedNetwork = z.infer<typeof serializedNetworkSchema>;\n","import assert from 'tiny-invariant';\nexport {assert};\n","import {assert} from '../utils/assert';\nimport type {Currency} from './currency';\n\n/**\n * A currency is any fungible financial instrument, including all ERC20 tokens\n */\nexport abstract class BaseCurrency {\n  /**\n   * The layerzero chain key on which this currency resides\n   */\n  public readonly chainKey: string;\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number;\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol: string;\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string;\n\n  /**\n   * The id of the token used for comparisons\n   */\n  public readonly id!: string;\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainKey the chain key on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(\n    id: string,\n    chainKey: string,\n    decimals: number,\n    symbol: string,\n    name?: string,\n  ) {\n    assert(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS');\n\n    Object.defineProperty(this, 'id', {\n      enumerable: false,\n      writable: false,\n      value: id,\n    });\n    this.chainKey = chainKey;\n    this.decimals = decimals;\n    this.symbol = symbol;\n    this.name = name;\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean;\n}\n","import {BaseCurrency} from './baseCurrency';\nimport type {Currency} from './currency';\n\n/**\n * Represents an Coin with some metadata.\n */\nexport class Coin extends BaseCurrency {\n  protected constructor(chainKey: string, decimals: number, symbol: string, name?: string) {\n    super(String(chainKey), chainKey, decimals, symbol, name);\n  }\n  /**\n   * Returns true if the two Coins are equivalent, i.e. have the same chainKey\n   * @param other other currency to compare\n   */\n  public equals(other: Currency): boolean {\n    if (!(other instanceof Coin)) return false;\n    return this.chainKey === other.chainKey;\n  }\n\n  public static from(input: {chainKey: string; decimals: number; symbol: string; name?: string}) {\n    return new Coin(input.chainKey, input.decimals, input.symbol, input.name);\n  }\n}\n","import { aexists, aoutput } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n/**\n * Polyfill for Safari 14\n */\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/**\n * Choice: a ? b : c\n */\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n\n/**\n * Majority function, true if any two inputs is true\n */\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    aexists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    aexists(this);\n    aoutput(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per late 2024.\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = SHA256_IV[0] | 0;\n  B = SHA256_IV[1] | 0;\n  C = SHA256_IV[2] | 0;\n  D = SHA256_IV[3] | 0;\n  E = SHA256_IV[4] | 0;\n  F = SHA256_IV[5] | 0;\n  G = SHA256_IV[6] | 0;\n  H = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/**\n * SHA2-224 hash function\n */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","import { sha256 as noble_sha256 } from '@noble/hashes/sha256'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type Sha256Hash<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type Sha256ErrorType =\n  | IsHexErrorType\n  | ToBytesErrorType\n  | ToHexErrorType\n  | ErrorType\n\nexport function sha256<to extends To = 'hex'>(\n  value: Hex | ByteArray,\n  to_?: to | undefined,\n): Sha256Hash<to> {\n  const to = to_ || 'hex'\n  const bytes = noble_sha256(\n    isHex(value, { strict: false }) ? toBytes(value) : value,\n  )\n  if (to === 'bytes') return bytes as Sha256Hash<to>\n  return toHex(bytes) as Sha256Hash<to>\n}\n","import { BaseError } from './base.js'\n\nexport type InvalidDecimalNumberErrorType = InvalidDecimalNumberError & {\n  name: 'InvalidDecimalNumberError'\n}\nexport class InvalidDecimalNumberError extends BaseError {\n  constructor({ value }: { value: string }) {\n    super(`Number \\`${value}\\` is not a valid decimal number.`, {\n      name: 'InvalidDecimalNumberError',\n    })\n  }\n}\n","import { InvalidDecimalNumberError } from '../../errors/unit.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\nexport type ParseUnitsErrorType = ErrorType\n\n/**\n * Multiplies a string representation of a number by a given exponent of base 10 (10exponent).\n *\n * - Docs: https://viem.sh/docs/utilities/parseUnits\n *\n * @example\n * import { parseUnits } from 'viem'\n *\n * parseUnits('420', 9)\n * // 420000000000n\n */\nexport function parseUnits(value: string, decimals: number) {\n  if (!/^(-?)([0-9]*)\\.?([0-9]*)$/.test(value))\n    throw new InvalidDecimalNumberError({ value })\n\n  let [integer, fraction = '0'] = value.split('.')\n\n  const negative = integer.startsWith('-')\n  if (negative) integer = integer.slice(1)\n\n  // trim trailing zeros.\n  fraction = fraction.replace(/(0+)$/, '')\n\n  // round off if the fraction is larger than the number of decimals.\n  if (decimals === 0) {\n    if (Math.round(Number(`.${fraction}`)) === 1)\n      integer = `${BigInt(integer) + 1n}`\n    fraction = ''\n  } else if (fraction.length > decimals) {\n    const [left, unit, right] = [\n      fraction.slice(0, decimals - 1),\n      fraction.slice(decimals - 1, decimals),\n      fraction.slice(decimals),\n    ]\n\n    const rounded = Math.round(Number(`${unit}.${right}`))\n    if (rounded > 9)\n      fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, '0')\n    else fraction = `${left}${rounded}`\n\n    if (fraction.length > decimals) {\n      fraction = fraction.slice(1)\n      integer = `${BigInt(integer) + 1n}`\n    }\n\n    fraction = fraction.slice(0, decimals)\n  } else {\n    fraction = fraction.padEnd(decimals, '0')\n  }\n\n  return BigInt(`${negative ? '-' : ''}${integer}${fraction}`)\n}\n","// biome-ignore lint/performance/noBarrelFile: entrypoint module\nexport {\n  type Abi,\n  type AbiFunction,\n  type AbiParameter,\n  type AbiEvent,\n  type AbiStateMutability,\n  type AbiParameterKind,\n  type AbiParameterToPrimitiveType,\n  type Address,\n  type Narrow,\n  type ParseAbi,\n  type ParseAbiItem,\n  type ParseAbiParameter,\n  type ParseAbiParameters,\n  type ResolvedRegister,\n  type TypedData,\n  type TypedDataDomain,\n  type TypedDataParameter,\n  CircularReferenceError,\n  InvalidAbiParameterError,\n  InvalidAbiParametersError,\n  InvalidAbiItemError,\n  InvalidAbiTypeParameterError,\n  InvalidFunctionModifierError,\n  InvalidModifierError,\n  InvalidParameterError,\n  InvalidParenthesisError,\n  InvalidSignatureError,\n  InvalidStructSignatureError,\n  SolidityProtectedKeywordError,\n  UnknownTypeError,\n  UnknownSignatureError,\n  parseAbi,\n  parseAbiItem,\n  parseAbiParameter,\n  parseAbiParameters,\n} from 'abitype'\nexport type {\n  BlockOverrides,\n  Rpc as RpcBlockOverrides,\n} from 'ox/BlockOverrides'\n\nexport {\n  getContract,\n  type GetContractErrorType,\n  type GetContractParameters,\n  type GetContractReturnType,\n} from './actions/getContract.js'\nexport {\n  type GetContractEventsErrorType,\n  type GetContractEventsParameters,\n  type GetContractEventsReturnType,\n} from './actions/public/getContractEvents.js'\nexport {\n  type GetEip712DomainErrorType,\n  type GetEip712DomainParameters,\n  type GetEip712DomainReturnType,\n} from './actions/public/getEip712Domain.js'\nexport {\n  type AddChainErrorType,\n  type AddChainParameters,\n} from './actions/wallet/addChain.js'\nexport {\n  type CallErrorType,\n  type CallParameters,\n  type CallReturnType,\n} from './actions/public/call.js'\nexport type {\n  CreateBlockFilterErrorType,\n  CreateBlockFilterReturnType,\n} from './actions/public/createBlockFilter.js'\nexport type {\n  CreateContractEventFilterErrorType,\n  CreateContractEventFilterParameters,\n  CreateContractEventFilterReturnType,\n} from './actions/public/createContractEventFilter.js'\nexport type {\n  CreateEventFilterErrorType,\n  CreateEventFilterParameters,\n  CreateEventFilterReturnType,\n} from './actions/public/createEventFilter.js'\nexport type {\n  CreatePendingTransactionFilterErrorType,\n  CreatePendingTransactionFilterReturnType,\n} from './actions/public/createPendingTransactionFilter.js'\nexport type {\n  DeployContractErrorType,\n  DeployContractParameters,\n  DeployContractReturnType,\n} from './actions/wallet/deployContract.js'\nexport type {\n  DropTransactionErrorType,\n  DropTransactionParameters,\n} from './actions/test/dropTransaction.js'\nexport type {\n  DumpStateErrorType,\n  DumpStateReturnType,\n} from './actions/test/dumpState.js'\nexport type {\n  GetAutomineErrorType,\n  GetAutomineReturnType,\n} from './actions/test/getAutomine.js'\nexport type {\n  EstimateContractGasErrorType,\n  EstimateContractGasParameters,\n  EstimateContractGasReturnType,\n} from './actions/public/estimateContractGas.js'\nexport type {\n  EstimateGasErrorType,\n  EstimateGasParameters,\n  EstimateGasReturnType,\n} from './actions/public/estimateGas.js'\nexport type {\n  EstimateFeesPerGasErrorType,\n  EstimateFeesPerGasParameters,\n  EstimateFeesPerGasReturnType,\n} from './actions/public/estimateFeesPerGas.js'\nexport type {\n  EstimateMaxPriorityFeePerGasErrorType,\n  EstimateMaxPriorityFeePerGasParameters,\n  EstimateMaxPriorityFeePerGasReturnType,\n} from './actions/public/estimateMaxPriorityFeePerGas.js'\nexport type {\n  GetAddressesErrorType,\n  GetAddressesReturnType,\n} from './actions/wallet/getAddresses.js'\nexport type {\n  GetBalanceErrorType,\n  GetBalanceParameters,\n  GetBalanceReturnType,\n} from './actions/public/getBalance.js'\nexport type {\n  GetBlobBaseFeeErrorType,\n  GetBlobBaseFeeReturnType,\n} from './actions/public/getBlobBaseFee.js'\nexport type {\n  GetBlockNumberErrorType,\n  GetBlockNumberParameters,\n  GetBlockNumberReturnType,\n} from './actions/public/getBlockNumber.js'\nexport type {\n  GetBlockErrorType,\n  GetBlockParameters,\n  GetBlockReturnType,\n} from './actions/public/getBlock.js'\nexport type {\n  GetBlockTransactionCountErrorType,\n  GetBlockTransactionCountParameters,\n  GetBlockTransactionCountReturnType,\n} from './actions/public/getBlockTransactionCount.js'\nexport type {\n  /** @deprecated Use `GetCodeErrorType` instead */\n  GetCodeErrorType as GetBytecodeErrorType,\n  /** @deprecated Use `GetCodeParameters` instead */\n  GetCodeParameters as GetBytecodeParameters,\n  /** @deprecated Use `GetCodeReturnType` instead  */\n  GetCodeReturnType as GetBytecodeReturnType,\n  GetCodeErrorType,\n  GetCodeParameters,\n  GetCodeReturnType,\n} from './actions/public/getCode.js'\nexport type {\n  GetChainIdErrorType,\n  GetChainIdReturnType,\n} from './actions/public/getChainId.js'\nexport type {\n  GetEnsAddressErrorType,\n  GetEnsAddressParameters,\n  GetEnsAddressReturnType,\n} from './actions/ens/getEnsAddress.js'\nexport type {\n  GetEnsAvatarErrorType,\n  GetEnsAvatarParameters,\n  GetEnsAvatarReturnType,\n} from './actions/ens/getEnsAvatar.js'\nexport type {\n  GetEnsNameErrorType,\n  GetEnsNameParameters,\n  GetEnsNameReturnType,\n} from './actions/ens/getEnsName.js'\nexport type {\n  GetEnsResolverErrorType,\n  GetEnsResolverParameters,\n  GetEnsResolverReturnType,\n} from './actions/ens/getEnsResolver.js'\nexport type {\n  GetEnsTextErrorType,\n  GetEnsTextParameters,\n  GetEnsTextReturnType,\n} from './actions/ens/getEnsText.js'\nexport type {\n  GetFeeHistoryErrorType,\n  GetFeeHistoryParameters,\n  GetFeeHistoryReturnType,\n} from './actions/public/getFeeHistory.js'\nexport type {\n  GetFilterChangesErrorType,\n  GetFilterChangesParameters,\n  GetFilterChangesReturnType,\n} from './actions/public/getFilterChanges.js'\nexport type {\n  GetFilterLogsErrorType,\n  GetFilterLogsParameters,\n  GetFilterLogsReturnType,\n} from './actions/public/getFilterLogs.js'\nexport type {\n  GetGasPriceErrorType,\n  GetGasPriceReturnType,\n} from './actions/public/getGasPrice.js'\nexport type {\n  GetLogsErrorType,\n  GetLogsParameters,\n  GetLogsReturnType,\n} from './actions/public/getLogs.js'\nexport type {\n  GetPermissionsErrorType,\n  GetPermissionsReturnType,\n} from './actions/wallet/getPermissions.js'\nexport type {\n  GetProofErrorType,\n  GetProofParameters,\n  GetProofReturnType,\n} from './actions/public/getProof.js'\nexport type {\n  GetStorageAtErrorType,\n  GetStorageAtParameters,\n  GetStorageAtReturnType,\n} from './actions/public/getStorageAt.js'\nexport type {\n  GetTransactionConfirmationsErrorType,\n  GetTransactionConfirmationsParameters,\n  GetTransactionConfirmationsReturnType,\n} from './actions/public/getTransactionConfirmations.js'\nexport type {\n  GetTransactionCountErrorType,\n  GetTransactionCountParameters,\n  GetTransactionCountReturnType,\n} from './actions/public/getTransactionCount.js'\nexport type {\n  GetTransactionErrorType,\n  GetTransactionParameters,\n  GetTransactionReturnType,\n} from './actions/public/getTransaction.js'\nexport type {\n  GetTransactionReceiptErrorType,\n  GetTransactionReceiptParameters,\n  GetTransactionReceiptReturnType,\n} from './actions/public/getTransactionReceipt.js'\nexport type {\n  ImpersonateAccountErrorType,\n  ImpersonateAccountParameters,\n} from './actions/test/impersonateAccount.js'\nexport type {\n  IncreaseTimeErrorType,\n  IncreaseTimeParameters,\n} from './actions/test/increaseTime.js'\nexport type {\n  LoadStateErrorType,\n  LoadStateParameters,\n  LoadStateReturnType,\n} from './actions/test/loadState.js'\nexport type { MineErrorType, MineParameters } from './actions/test/mine.js'\nexport type {\n  MulticallErrorType,\n  MulticallParameters,\n  MulticallReturnType,\n} from './actions/public/multicall.js'\nexport type { SnapshotErrorType } from './actions/test/snapshot.js'\nexport type {\n  OnBlock,\n  OnBlockParameter,\n  WatchBlocksErrorType,\n  WatchBlocksParameters,\n  WatchBlocksReturnType,\n} from './actions/public/watchBlocks.js'\nexport type {\n  OnBlockNumberFn,\n  OnBlockNumberParameter,\n  WatchBlockNumberErrorType,\n  WatchBlockNumberParameters,\n  WatchBlockNumberReturnType,\n} from './actions/public/watchBlockNumber.js'\nexport type {\n  WatchEventOnLogsFn,\n  WatchEventOnLogsParameter,\n  WatchEventErrorType,\n  WatchEventParameters,\n  WatchEventReturnType,\n} from './actions/public/watchEvent.js'\nexport type {\n  OnTransactionsFn,\n  OnTransactionsParameter,\n  WatchPendingTransactionsErrorType,\n  WatchPendingTransactionsParameters,\n  WatchPendingTransactionsReturnType,\n} from './actions/public/watchPendingTransactions.js'\nexport type {\n  ReadContractErrorType,\n  ReadContractParameters,\n  ReadContractReturnType,\n} from './actions/public/readContract.js'\nexport type {\n  ReplacementReason,\n  ReplacementReturnType,\n  WaitForTransactionReceiptErrorType,\n  WaitForTransactionReceiptParameters,\n  WaitForTransactionReceiptReturnType,\n} from './actions/public/waitForTransactionReceipt.js'\nexport type {\n  RequestAddressesErrorType,\n  RequestAddressesReturnType,\n} from './actions/wallet/requestAddresses.js'\nexport type {\n  RequestPermissionsErrorType,\n  RequestPermissionsReturnType,\n  RequestPermissionsParameters,\n} from './actions/wallet/requestPermissions.js'\nexport type {\n  GetTxpoolContentErrorType,\n  GetTxpoolContentReturnType,\n} from './actions/test/getTxpoolContent.js'\nexport type {\n  GetTxpoolStatusErrorType,\n  GetTxpoolStatusReturnType,\n} from './actions/test/getTxpoolStatus.js'\nexport type {\n  InspectTxpoolErrorType,\n  InspectTxpoolReturnType,\n} from './actions/test/inspectTxpool.js'\nexport type { RemoveBlockTimestampIntervalErrorType } from './actions/test/removeBlockTimestampInterval.js'\nexport type { ResetErrorType, ResetParameters } from './actions/test/reset.js'\nexport type {\n  RevertErrorType,\n  RevertParameters,\n} from './actions/test/revert.js'\nexport type {\n  SendRawTransactionErrorType,\n  SendRawTransactionParameters,\n  SendRawTransactionReturnType,\n} from './actions/wallet/sendRawTransaction.js'\nexport type {\n  SendTransactionErrorType,\n  SendTransactionParameters,\n  SendTransactionRequest,\n  SendTransactionReturnType,\n} from './actions/wallet/sendTransaction.js'\nexport type {\n  SignTransactionErrorType,\n  SignTransactionParameters,\n  SignTransactionReturnType,\n} from './actions/wallet/signTransaction.js'\nexport type {\n  PrepareTransactionRequestErrorType,\n  PrepareTransactionRequestParameters,\n  PrepareTransactionRequestParameterType,\n  PrepareTransactionRequestRequest,\n  PrepareTransactionRequestReturnType,\n} from './actions/wallet/prepareTransactionRequest.js'\nexport type {\n  SendUnsignedTransactionErrorType,\n  SendUnsignedTransactionParameters,\n  SendUnsignedTransactionReturnType,\n} from './actions/test/sendUnsignedTransaction.js'\nexport type { SetAutomineErrorType } from './actions/test/setAutomine.js'\nexport type {\n  SetBalanceErrorType,\n  SetBalanceParameters,\n} from './actions/test/setBalance.js'\nexport type {\n  SetBlockGasLimitErrorType,\n  SetBlockGasLimitParameters,\n} from './actions/test/setBlockGasLimit.js'\nexport type {\n  SetBlockTimestampIntervalErrorType,\n  SetBlockTimestampIntervalParameters,\n} from './actions/test/setBlockTimestampInterval.js'\nexport type {\n  SetCodeErrorType,\n  SetCodeParameters,\n} from './actions/test/setCode.js'\nexport type {\n  SetCoinbaseErrorType,\n  SetCoinbaseParameters,\n} from './actions/test/setCoinbase.js'\nexport type {\n  SetIntervalMiningErrorType,\n  SetIntervalMiningParameters,\n} from './actions/test/setIntervalMining.js'\nexport type { SetLoggingEnabledErrorType } from './actions/test/setLoggingEnabled.js'\nexport type {\n  SetMinGasPriceErrorType,\n  SetMinGasPriceParameters,\n} from './actions/test/setMinGasPrice.js'\nexport type {\n  SetNextBlockBaseFeePerGasErrorType,\n  SetNextBlockBaseFeePerGasParameters,\n} from './actions/test/setNextBlockBaseFeePerGas.js'\nexport type {\n  SetNextBlockTimestampErrorType,\n  SetNextBlockTimestampParameters,\n} from './actions/test/setNextBlockTimestamp.js'\nexport type {\n  SetNonceErrorType,\n  SetNonceParameters,\n} from './actions/test/setNonce.js'\nexport type { SetRpcUrlErrorType } from './actions/test/setRpcUrl.js'\nexport type {\n  SetStorageAtErrorType,\n  SetStorageAtParameters,\n} from './actions/test/setStorageAt.js'\nexport type {\n  SignMessageErrorType,\n  SignMessageParameters,\n  SignMessageReturnType,\n} from './actions/wallet/signMessage.js'\nexport type {\n  SignTypedDataErrorType,\n  SignTypedDataParameters,\n  SignTypedDataReturnType,\n} from './actions/wallet/signTypedData.js'\nexport type {\n  SimulateContractErrorType,\n  SimulateContractParameters,\n  SimulateContractReturnType,\n} from './actions/public/simulateContract.js'\nexport type {\n  StopImpersonatingAccountErrorType,\n  StopImpersonatingAccountParameters,\n} from './actions/test/stopImpersonatingAccount.js'\nexport type {\n  SwitchChainErrorType,\n  SwitchChainParameters,\n} from './actions/wallet/switchChain.js'\nexport type {\n  UninstallFilterErrorType,\n  UninstallFilterParameters,\n  UninstallFilterReturnType,\n} from './actions/public/uninstallFilter.js'\nexport type {\n  WatchAssetErrorType,\n  WatchAssetParameters,\n  WatchAssetReturnType,\n} from './actions/wallet/watchAsset.js'\nexport type {\n  VerifyHashErrorType as VerifyHashActionErrorType,\n  VerifyHashParameters as VerifyHashActionParameters,\n  VerifyHashReturnType as VerifyHashActionReturnType,\n} from './actions/public/verifyHash.js'\nexport type {\n  VerifyTypedDataErrorType as VerifyTypedDataActionErrorType,\n  VerifyTypedDataParameters as VerifyTypedDataActionParameters,\n  VerifyTypedDataReturnType as VerifyTypedDataActionReturnType,\n} from './actions/public/verifyTypedData.js'\nexport type {\n  VerifyMessageErrorType as VerifyMessageActionErrorType,\n  VerifyMessageParameters as VerifyMessageActionParameters,\n  VerifyMessageReturnType as VerifyMessageActionReturnType,\n} from './actions/public/verifyMessage.js'\nexport type {\n  WatchContractEventOnLogsFn,\n  WatchContractEventOnLogsParameter,\n  WatchContractEventErrorType,\n  WatchContractEventParameters,\n  WatchContractEventReturnType,\n} from './actions/public/watchContractEvent.js'\nexport type {\n  WriteContractErrorType,\n  WriteContractParameters,\n  WriteContractReturnType,\n} from './actions/wallet/writeContract.js'\nexport type {\n  Chain,\n  ChainConfig,\n  ChainContract,\n  ChainEstimateFeesPerGasFn,\n  ChainFees,\n  ChainFeesFnParameters,\n  ChainFormatter,\n  ChainEstimateFeesPerGasFnParameters,\n  ChainMaxPriorityFeePerGasFn,\n  DeriveChain,\n  GetChainParameter,\n  ChainFormatters,\n  ChainSerializers,\n  ExtractChainFormatterExclude,\n  ExtractChainFormatterParameters,\n  ExtractChainFormatterReturnType,\n} from './types/chain.js'\nexport type { GetTransactionRequestKzgParameter, Kzg } from './types/kzg.js'\nexport {\n  type Client,\n  type ClientConfig,\n  type CreateClientErrorType,\n  type MulticallBatchOptions,\n  createClient,\n  rpcSchema,\n} from './clients/createClient.js'\nexport {\n  type CustomTransport,\n  type CustomTransportConfig,\n  type CustomTransportErrorType,\n  custom,\n} from './clients/transports/custom.js'\nexport {\n  type FallbackTransport,\n  type FallbackTransportConfig,\n  type FallbackTransportErrorType,\n  fallback,\n} from './clients/transports/fallback.js'\nexport {\n  type HttpTransport,\n  type HttpTransportConfig,\n  type HttpTransportErrorType,\n  http,\n} from './clients/transports/http.js'\nexport {\n  type PublicClient,\n  type PublicClientConfig,\n  type CreatePublicClientErrorType,\n  createPublicClient,\n} from './clients/createPublicClient.js'\nexport {\n  type TestClient,\n  type TestClientConfig,\n  type CreateTestClientErrorType,\n  createTestClient,\n} from './clients/createTestClient.js'\nexport {\n  type PublicActions,\n  publicActions,\n} from './clients/decorators/public.js'\nexport {\n  type TestActions,\n  testActions,\n} from './clients/decorators/test.js'\nexport {\n  type WalletActions,\n  walletActions,\n} from './clients/decorators/wallet.js'\nexport {\n  type Transport,\n  type TransportConfig,\n  type CreateTransportErrorType,\n  createTransport,\n} from './clients/transports/createTransport.js'\nexport {\n  type WalletClient,\n  type WalletClientConfig,\n  type CreateWalletClientErrorType,\n  createWalletClient,\n} from './clients/createWalletClient.js'\nexport {\n  type WebSocketTransport,\n  type WebSocketTransportConfig,\n  type WebSocketTransportErrorType,\n  webSocket,\n} from './clients/transports/webSocket.js'\nexport {\n  multicall3Abi,\n  erc20Abi,\n  erc20Abi_bytes32,\n  erc721Abi,\n  erc4626Abi,\n  universalSignatureValidatorAbi,\n} from './constants/abis.js'\nexport { zeroAddress } from './constants/address.js'\nexport {\n  deploylessCallViaBytecodeBytecode,\n  deploylessCallViaFactoryBytecode,\n  universalSignatureValidatorByteCode,\n} from './constants/contracts.js'\nexport { etherUnits, gweiUnits, weiUnits } from './constants/unit.js'\nexport {\n  maxInt8,\n  maxInt16,\n  maxInt24,\n  maxInt32,\n  maxInt40,\n  maxInt48,\n  maxInt56,\n  maxInt64,\n  maxInt72,\n  maxInt80,\n  maxInt88,\n  maxInt96,\n  maxInt104,\n  maxInt112,\n  maxInt120,\n  maxInt128,\n  maxInt136,\n  maxInt144,\n  maxInt152,\n  maxInt160,\n  maxInt168,\n  maxInt176,\n  maxInt184,\n  maxInt192,\n  maxInt200,\n  maxInt208,\n  maxInt216,\n  maxInt224,\n  maxInt232,\n  maxInt240,\n  maxInt248,\n  maxInt256,\n  maxUint8,\n  maxUint16,\n  maxUint24,\n  maxUint32,\n  maxUint40,\n  maxUint48,\n  maxUint56,\n  maxUint64,\n  maxUint72,\n  maxUint80,\n  maxUint88,\n  maxUint96,\n  maxUint104,\n  maxUint112,\n  maxUint120,\n  maxUint128,\n  maxUint136,\n  maxUint144,\n  maxUint152,\n  maxUint160,\n  maxUint168,\n  maxUint176,\n  maxUint184,\n  maxUint192,\n  maxUint200,\n  maxUint208,\n  maxUint216,\n  maxUint224,\n  maxUint232,\n  maxUint240,\n  maxUint248,\n  maxUint256,\n  minInt8,\n  minInt16,\n  minInt24,\n  minInt32,\n  minInt40,\n  minInt48,\n  minInt56,\n  minInt64,\n  minInt72,\n  minInt80,\n  minInt88,\n  minInt96,\n  minInt104,\n  minInt112,\n  minInt120,\n  minInt128,\n  minInt136,\n  minInt144,\n  minInt152,\n  minInt160,\n  minInt168,\n  minInt176,\n  minInt184,\n  minInt192,\n  minInt200,\n  minInt208,\n  minInt216,\n  minInt224,\n  minInt232,\n  minInt240,\n  minInt248,\n  minInt256,\n} from './constants/number.js'\nexport { zeroHash } from './constants/bytes.js'\nexport { presignMessagePrefix } from './constants/strings.js'\nexport {\n  AbiConstructorNotFoundError,\n  type AbiConstructorNotFoundErrorType,\n  AbiConstructorParamsNotFoundError,\n  type AbiConstructorParamsNotFoundErrorType,\n  AbiDecodingDataSizeInvalidError,\n  type AbiDecodingDataSizeInvalidErrorType,\n  AbiDecodingDataSizeTooSmallError,\n  type AbiDecodingDataSizeTooSmallErrorType,\n  AbiDecodingZeroDataError,\n  type AbiDecodingZeroDataErrorType,\n  AbiEncodingArrayLengthMismatchError,\n  type AbiEncodingArrayLengthMismatchErrorType,\n  AbiEncodingLengthMismatchError,\n  type AbiEncodingLengthMismatchErrorType,\n  AbiEncodingBytesSizeMismatchError,\n  type AbiEncodingBytesSizeMismatchErrorType,\n  AbiErrorInputsNotFoundError,\n  type AbiErrorInputsNotFoundErrorType,\n  AbiErrorNotFoundError,\n  type AbiErrorNotFoundErrorType,\n  AbiErrorSignatureNotFoundError,\n  type AbiErrorSignatureNotFoundErrorType,\n  AbiEventNotFoundError,\n  type AbiEventNotFoundErrorType,\n  AbiEventSignatureEmptyTopicsError,\n  type AbiEventSignatureEmptyTopicsErrorType,\n  AbiEventSignatureNotFoundError,\n  type AbiEventSignatureNotFoundErrorType,\n  AbiFunctionNotFoundError,\n  type AbiFunctionNotFoundErrorType,\n  AbiFunctionOutputsNotFoundError,\n  type AbiFunctionOutputsNotFoundErrorType,\n  AbiFunctionSignatureNotFoundError,\n  type AbiFunctionSignatureNotFoundErrorType,\n  BytesSizeMismatchError,\n  type BytesSizeMismatchErrorType,\n  DecodeLogDataMismatch,\n  type DecodeLogDataMismatchErrorType,\n  DecodeLogTopicsMismatch,\n  type DecodeLogTopicsMismatchErrorType,\n  InvalidAbiDecodingTypeError,\n  type InvalidAbiDecodingTypeErrorType,\n  InvalidAbiEncodingTypeError,\n  type InvalidAbiEncodingTypeErrorType,\n  InvalidArrayError,\n  type InvalidArrayErrorType,\n  InvalidDefinitionTypeError,\n  type InvalidDefinitionTypeErrorType,\n  UnsupportedPackedAbiType,\n  type UnsupportedPackedAbiTypeErrorType,\n} from './errors/abi.js'\nexport { BaseError, type BaseErrorType, setErrorConfig } from './errors/base.js'\nexport {\n  BlockNotFoundError,\n  type BlockNotFoundErrorType,\n} from './errors/block.js'\nexport {\n  CallExecutionError,\n  type CallExecutionErrorType,\n  ContractFunctionExecutionError,\n  type ContractFunctionExecutionErrorType,\n  ContractFunctionRevertedError,\n  type ContractFunctionRevertedErrorType,\n  ContractFunctionZeroDataError,\n  type ContractFunctionZeroDataErrorType,\n  RawContractError,\n  type RawContractErrorType,\n  CounterfactualDeploymentFailedError,\n  type CounterfactualDeploymentFailedErrorType,\n} from './errors/contract.js'\nexport {\n  BaseFeeScalarError,\n  type BaseFeeScalarErrorType,\n  Eip1559FeesNotSupportedError,\n  type Eip1559FeesNotSupportedErrorType,\n  MaxFeePerGasTooLowError,\n  type MaxFeePerGasTooLowErrorType,\n} from './errors/fee.js'\nexport {\n  ChainDisconnectedError,\n  type ChainDisconnectedErrorType,\n  InternalRpcError,\n  type InternalRpcErrorType,\n  InvalidInputRpcError,\n  type InvalidInputRpcErrorType,\n  InvalidParamsRpcError,\n  type InvalidParamsRpcErrorType,\n  InvalidRequestRpcError,\n  type InvalidRequestRpcErrorType,\n  JsonRpcVersionUnsupportedError,\n  type JsonRpcVersionUnsupportedErrorType,\n  LimitExceededRpcError,\n  type LimitExceededRpcErrorType,\n  MethodNotFoundRpcError,\n  type MethodNotFoundRpcErrorType,\n  MethodNotSupportedRpcError,\n  type MethodNotSupportedRpcErrorType,\n  ParseRpcError,\n  type ParseRpcErrorType,\n  ProviderDisconnectedError,\n  type ProviderDisconnectedErrorType,\n  ProviderRpcError,\n  type ProviderRpcErrorCode,\n  type ProviderRpcErrorType,\n  ResourceNotFoundRpcError,\n  type ResourceNotFoundRpcErrorType,\n  ResourceUnavailableRpcError,\n  type ResourceUnavailableRpcErrorType,\n  RpcError,\n  type RpcErrorType,\n  type RpcErrorCode,\n  SwitchChainError,\n  TransactionRejectedRpcError,\n  type TransactionRejectedRpcErrorType,\n  UnauthorizedProviderError,\n  type UnauthorizedProviderErrorType,\n  UnknownRpcError,\n  type UnknownRpcErrorType,\n  UnsupportedProviderMethodError,\n  type UnsupportedProviderMethodErrorType,\n  UserRejectedRequestError,\n  type UserRejectedRequestErrorType,\n} from './errors/rpc.js'\nexport {\n  ChainDoesNotSupportContract,\n  type ChainDoesNotSupportContractErrorType,\n  ChainMismatchError,\n  type ChainMismatchErrorType,\n  ChainNotFoundError,\n  type ChainNotFoundErrorType,\n  ClientChainNotConfiguredError,\n  type ClientChainNotConfiguredErrorType,\n  InvalidChainIdError,\n  type InvalidChainIdErrorType,\n} from './errors/chain.js'\nexport {\n  InvalidBytesBooleanError,\n  type InvalidBytesBooleanErrorType,\n  IntegerOutOfRangeError,\n  type IntegerOutOfRangeErrorType,\n  InvalidHexBooleanError,\n  type InvalidHexBooleanErrorType,\n  InvalidHexValueError,\n  type InvalidHexValueErrorType,\n  SizeOverflowError,\n  type SizeOverflowErrorType,\n} from './errors/encoding.js'\nexport {\n  type EnsAvatarInvalidMetadataError,\n  EnsAvatarUriResolutionError,\n  type EnsAvatarInvalidMetadataErrorType,\n  EnsAvatarInvalidNftUriError,\n  type EnsAvatarInvalidNftUriErrorType,\n  EnsAvatarUnsupportedNamespaceError,\n  type EnsAvatarUnsupportedNamespaceErrorType,\n  type EnsAvatarUriResolutionErrorType,\n} from './errors/ens.js'\nexport {\n  type InvalidDecimalNumberErrorType,\n  InvalidDecimalNumberError,\n} from './errors/unit.js'\nexport {\n  EstimateGasExecutionError,\n  type EstimateGasExecutionErrorType,\n} from './errors/estimateGas.js'\nexport {\n  ExecutionRevertedError,\n  type ExecutionRevertedErrorType,\n  FeeCapTooHighError,\n  type FeeCapTooHighErrorType,\n  FeeCapTooLowError,\n  type FeeCapTooLowErrorType,\n  InsufficientFundsError,\n  type InsufficientFundsErrorType,\n  IntrinsicGasTooHighError,\n  type IntrinsicGasTooHighErrorType,\n  IntrinsicGasTooLowError,\n  type IntrinsicGasTooLowErrorType,\n  NonceMaxValueError,\n  type NonceMaxValueErrorType,\n  NonceTooHighError,\n  type NonceTooHighErrorType,\n  NonceTooLowError,\n  type NonceTooLowErrorType,\n  TipAboveFeeCapError,\n  type TipAboveFeeCapErrorType,\n  TransactionTypeNotSupportedError,\n  type TransactionTypeNotSupportedErrorType,\n  UnknownNodeError,\n  type UnknownNodeErrorType,\n} from './errors/node.js'\nexport {\n  FilterTypeNotSupportedError,\n  type FilterTypeNotSupportedErrorType,\n} from './errors/log.js'\nexport {\n  HttpRequestError,\n  type HttpRequestErrorType,\n  RpcRequestError,\n  type RpcRequestErrorType,\n  TimeoutError,\n  type TimeoutErrorType,\n  SocketClosedError,\n  type SocketClosedErrorType,\n  WebSocketRequestError,\n  type WebSocketRequestErrorType,\n} from './errors/request.js'\nexport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from './errors/address.js'\nexport {\n  FeeConflictError,\n  type FeeConflictErrorType,\n  InvalidLegacyVError,\n  type InvalidLegacyVErrorType,\n  InvalidSerializableTransactionError,\n  type InvalidSerializableTransactionErrorType,\n  InvalidSerializedTransactionError,\n  type InvalidSerializedTransactionErrorType,\n  InvalidSerializedTransactionTypeError,\n  type InvalidSerializedTransactionTypeErrorType,\n  InvalidStorageKeySizeError,\n  type InvalidStorageKeySizeErrorType,\n  TransactionExecutionError,\n  type TransactionExecutionErrorType,\n  TransactionNotFoundError,\n  type TransactionNotFoundErrorType,\n  TransactionReceiptNotFoundError,\n  type TransactionReceiptNotFoundErrorType,\n  WaitForTransactionReceiptTimeoutError,\n  type WaitForTransactionReceiptTimeoutErrorType,\n} from './errors/transaction.js'\nexport {\n  SizeExceedsPaddingSizeError,\n  type SizeExceedsPaddingSizeErrorType,\n  SliceOffsetOutOfBoundsError,\n  type SliceOffsetOutOfBoundsErrorType,\n} from './errors/data.js'\nexport {\n  UrlRequiredError,\n  type UrlRequiredErrorType,\n} from './errors/transport.js'\nexport {\n  AccountStateConflictError,\n  type AccountStateConflictErrorType,\n  StateAssignmentConflictError,\n  type StateAssignmentConflictErrorType,\n} from './errors/stateOverride.js'\nexport {\n  InvalidDomainError,\n  type InvalidDomainErrorType,\n  InvalidPrimaryTypeError,\n  type InvalidPrimaryTypeErrorType,\n  InvalidStructTypeError,\n  type InvalidStructTypeErrorType,\n} from './errors/typedData.js'\nexport type {\n  AbiEventParameterToPrimitiveType,\n  AbiEventParametersToPrimitiveTypes,\n  AbiEventTopicToPrimitiveType,\n  AbiItem,\n  AbiItemArgs,\n  AbiItemName,\n  ContractConstructorArgs,\n  ContractEventArgsFromTopics,\n  EventDefinition,\n  ExtractAbiFunctionForArgs,\n  ExtractAbiItem,\n  ExtractAbiItemForArgs,\n  ExtractAbiItemNames,\n  ContractErrorArgs,\n  ContractErrorName,\n  ContractEventArgs,\n  ContractEventName,\n  ContractFunctionParameters,\n  ContractFunctionReturnType,\n  ContractFunctionArgs,\n  ContractFunctionName,\n  GetEventArgs,\n  GetValue,\n  LogTopicType,\n  MaybeAbiEventName,\n  MaybeExtractEventArgsFromAbi,\n  UnionWiden,\n  Widen,\n} from './types/contract.js'\nexport type {\n  AccessList,\n  Transaction,\n  TransactionBase,\n  TransactionEIP1559,\n  TransactionEIP2930,\n  TransactionEIP4844,\n  TransactionEIP7702,\n  TransactionLegacy,\n  TransactionReceipt,\n  TransactionRequest,\n  TransactionRequestBase,\n  TransactionRequestEIP1559,\n  TransactionRequestEIP2930,\n  TransactionRequestEIP4844,\n  TransactionRequestEIP7702,\n  TransactionRequestGeneric,\n  TransactionRequestLegacy,\n  TransactionSerializable,\n  TransactionSerializableBase,\n  TransactionSerializableEIP1559,\n  TransactionSerializableEIP2930,\n  TransactionSerializableEIP4844,\n  TransactionSerializableEIP7702,\n  TransactionSerializableGeneric,\n  TransactionSerializableLegacy,\n  TransactionSerialized,\n  TransactionSerializedEIP1559,\n  TransactionSerializedEIP2930,\n  TransactionSerializedEIP4844,\n  TransactionSerializedEIP7702,\n  TransactionSerializedGeneric,\n  TransactionSerializedLegacy,\n  TransactionType,\n} from './types/transaction.js'\nexport type {\n  Assign,\n  Branded,\n  Evaluate,\n  IsNarrowable,\n  IsUndefined,\n  IsUnion,\n  LooseOmit,\n  MaybePartial,\n  MaybePromise,\n  MaybeRequired,\n  Mutable,\n  NoInfer,\n  NoUndefined,\n  Omit,\n  Or,\n  PartialBy,\n  RequiredBy,\n  Some,\n  UnionEvaluate,\n  UnionLooseOmit,\n  ValueOf,\n  Prettify,\n  ExactPartial,\n  ExactRequired,\n  IsNever,\n  OneOf,\n  UnionOmit,\n  UnionPartialBy,\n  UnionPick,\n  UnionRequiredBy,\n  UnionToTuple,\n} from './types/utils.js'\nexport type {\n  Account,\n  AccountSource,\n  CustomSource,\n  HDAccount,\n  HDOptions,\n  JsonRpcAccount,\n  LocalAccount,\n  PrivateKeyAccount,\n} from './accounts/types.js'\nexport type { AssetGateway, AssetGatewayUrls } from './types/ens.js'\nexport type {\n  Block,\n  BlockIdentifier,\n  BlockNumber,\n  BlockTag,\n  Uncle,\n} from './types/block.js'\nexport type {\n  ByteArray,\n  Hash,\n  Hex,\n  LogTopic,\n  Signature,\n  CompactSignature,\n  SignableMessage,\n} from './types/misc.js'\nexport type {\n  AddEthereumChainParameter,\n  BundlerRpcSchema,\n  DebugBundlerRpcSchema,\n  EIP1193EventMap,\n  EIP1193Events,\n  EIP1193Parameters,\n  EIP1193Provider,\n  EIP1193RequestFn,\n  EIP1474Methods,\n  ProviderRpcErrorType as EIP1193ProviderRpcErrorType,\n  ProviderConnectInfo,\n  ProviderMessage,\n  PublicRpcSchema,\n  PaymasterRpcSchema,\n  NetworkSync,\n  RpcSchema,\n  RpcSchemaOverride,\n  TestRpcSchema,\n  WalletCapabilities,\n  WalletCapabilitiesRecord,\n  WalletCallReceipt,\n  WalletGetCallsStatusReturnType,\n  WalletGrantPermissionsParameters,\n  WalletGrantPermissionsReturnType,\n  WalletSendCallsParameters,\n  WalletPermissionCaveat,\n  WalletPermission,\n  WalletRpcSchema,\n  WatchAssetParams,\n} from './types/eip1193.js'\nexport { ProviderRpcError as EIP1193ProviderRpcError } from './types/eip1193.js'\nexport type { BlobSidecar, BlobSidecars } from './types/eip4844.js'\nexport type {\n  FeeHistory,\n  FeeValues,\n  FeeValuesEIP1559,\n  FeeValuesEIP4844,\n  FeeValuesLegacy,\n  FeeValuesType,\n} from './types/fee.js'\nexport type { Filter, FilterType } from './types/filter.js'\nexport type { TypedDataDefinition } from './types/typedData.js'\nexport type { GetTransportConfig, GetPollOptions } from './types/transport.js'\nexport type { Log } from './types/log.js'\nexport type {\n  MulticallContracts,\n  MulticallResponse,\n  MulticallResults,\n} from './types/multicall.js'\nexport type {\n  ParseAccount,\n  DeriveAccount,\n  HDKey,\n} from './types/account.js'\nexport type {\n  Index,\n  Quantity,\n  RpcBlock,\n  RpcBlockIdentifier,\n  RpcBlockNumber,\n  RpcFeeHistory,\n  RpcFeeValues,\n  RpcLog,\n  RpcTransaction,\n  RpcTransactionReceipt,\n  RpcTransactionRequest,\n  RpcUncle,\n  Status,\n  RpcProof,\n  RpcAccountStateOverride,\n  RpcStateOverride,\n  RpcStateMapping,\n} from './types/rpc.js'\nexport type { Withdrawal } from './types/withdrawal.js'\nexport type {\n  StateMapping,\n  StateOverride,\n} from './types/stateOverride.js'\nexport { labelhash, type LabelhashErrorType } from './utils/ens/labelhash.js'\nexport { namehash, type NamehashErrorType } from './utils/ens/namehash.js'\nexport {\n  type FormattedBlock,\n  defineBlock,\n  type DefineBlockErrorType,\n  formatBlock,\n  type FormatBlockErrorType,\n} from './utils/formatters/block.js'\nexport { formatLog, type FormatLogErrorType } from './utils/formatters/log.js'\nexport {\n  type DecodeAbiParametersErrorType,\n  type DecodeAbiParametersReturnType,\n  decodeAbiParameters,\n} from './utils/abi/decodeAbiParameters.js'\nexport {\n  type DecodeDeployDataErrorType,\n  type DecodeDeployDataParameters,\n  type DecodeDeployDataReturnType,\n  decodeDeployData,\n} from './utils/abi/decodeDeployData.js'\nexport {\n  type DecodeErrorResultErrorType,\n  type DecodeErrorResultParameters,\n  type DecodeErrorResultReturnType,\n  decodeErrorResult,\n} from './utils/abi/decodeErrorResult.js'\nexport {\n  type DecodeEventLogErrorType,\n  type DecodeEventLogParameters,\n  type DecodeEventLogReturnType,\n  decodeEventLog,\n} from './utils/abi/decodeEventLog.js'\nexport {\n  type DecodeFunctionDataErrorType,\n  type DecodeFunctionDataParameters,\n  type DecodeFunctionDataReturnType,\n  decodeFunctionData,\n} from './utils/abi/decodeFunctionData.js'\nexport {\n  type DecodeFunctionResultErrorType,\n  type DecodeFunctionResultParameters,\n  type DecodeFunctionResultReturnType,\n  decodeFunctionResult,\n} from './utils/abi/decodeFunctionResult.js'\nexport {\n  type EncodeAbiParametersErrorType,\n  type EncodeAbiParametersReturnType,\n  encodeAbiParameters,\n} from './utils/abi/encodeAbiParameters.js'\nexport {\n  type EncodeDeployDataErrorType,\n  type EncodeDeployDataParameters,\n  type EncodeDeployDataReturnType,\n  encodeDeployData,\n} from './utils/abi/encodeDeployData.js'\nexport {\n  type EncodeErrorResultErrorType,\n  type EncodeErrorResultParameters,\n  type EncodeErrorResultReturnType,\n  encodeErrorResult,\n} from './utils/abi/encodeErrorResult.js'\nexport {\n  type EncodeEventTopicsErrorType,\n  type EncodeEventTopicsParameters,\n  type EncodeEventTopicsReturnType,\n  encodeEventTopics,\n} from './utils/abi/encodeEventTopics.js'\nexport {\n  type EncodeFunctionDataErrorType,\n  type EncodeFunctionDataParameters,\n  type EncodeFunctionDataReturnType,\n  encodeFunctionData,\n} from './utils/abi/encodeFunctionData.js'\nexport {\n  type PrepareEncodeFunctionDataErrorType,\n  type PrepareEncodeFunctionDataParameters,\n  type PrepareEncodeFunctionDataReturnType,\n  prepareEncodeFunctionData,\n} from './utils/abi/prepareEncodeFunctionData.js'\nexport {\n  type EncodeFunctionResultErrorType,\n  type EncodeFunctionResultParameters,\n  type EncodeFunctionResultReturnType,\n  encodeFunctionResult,\n} from './utils/abi/encodeFunctionResult.js'\nexport {\n  type ParseEventLogsErrorType,\n  type ParseEventLogsParameters,\n  type ParseEventLogsReturnType,\n  parseEventLogs,\n} from './utils/abi/parseEventLogs.js'\nexport {\n  type FormattedTransaction,\n  defineTransaction,\n  type DefineTransactionErrorType,\n  formatTransaction,\n  type FormatTransactionErrorType,\n  transactionType,\n} from './utils/formatters/transaction.js'\nexport {\n  type FormattedTransactionReceipt,\n  defineTransactionReceipt,\n  type DefineTransactionReceiptErrorType,\n  formatTransactionReceipt,\n  type FormatTransactionReceiptErrorType,\n} from './utils/formatters/transactionReceipt.js'\nexport {\n  type FormattedTransactionRequest,\n  defineTransactionRequest,\n  type DefineTransactionRequestErrorType,\n  formatTransactionRequest,\n  type FormatTransactionRequestErrorType,\n  rpcTransactionType,\n} from './utils/formatters/transactionRequest.js'\nexport {\n  type GetAbiItemErrorType,\n  type GetAbiItemParameters,\n  type GetAbiItemReturnType,\n  getAbiItem,\n} from './utils/abi/getAbiItem.js'\nexport {\n  type GetContractAddressOptions,\n  type GetCreate2AddressOptions,\n  type GetCreate2AddressErrorType,\n  type GetCreateAddressOptions,\n  type GetCreateAddressErrorType,\n  getContractAddress,\n  getCreate2Address,\n  getCreateAddress,\n} from './utils/address/getContractAddress.js'\nexport {\n  type GetSerializedTransactionType,\n  type GetSerializedTransactionTypeErrorType,\n  getSerializedTransactionType,\n} from './utils/transaction/getSerializedTransactionType.js'\nexport {\n  type GetTransactionType,\n  type GetTransactionTypeErrorType,\n  getTransactionType,\n} from './utils/transaction/getTransactionType.js'\nexport {\n  type HashDomainErrorType,\n  type HashStructErrorType,\n  type HashTypedDataErrorType,\n  type HashTypedDataParameters,\n  type HashTypedDataReturnType,\n  hashDomain,\n  hashStruct,\n  hashTypedData,\n} from './utils/signature/hashTypedData.js'\nexport {\n  type CompactSignatureToSignatureErrorType,\n  compactSignatureToSignature,\n} from './utils/signature/compactSignatureToSignature.js'\nexport {\n  /** @deprecated Use `ParseCompactSignatureErrorType`. */\n  type ParseCompactSignatureErrorType as HexToCompactSignatureErrorType,\n  /** @deprecated Use `parseCompactSignature`. */\n  parseCompactSignature as hexToCompactSignature,\n  type ParseCompactSignatureErrorType,\n  parseCompactSignature,\n} from './utils/signature/parseCompactSignature.js'\nexport {\n  /** @deprecated Use `ParseSignatureErrorType`. */\n  type ParseSignatureErrorType as HexToSignatureErrorType,\n  /** @deprecated Use `parseSignature`. */\n  parseSignature as hexToSignature,\n  type ParseSignatureErrorType,\n  parseSignature,\n} from './utils/signature/parseSignature.js'\nexport {\n  type RecoverAddressErrorType,\n  type RecoverAddressParameters,\n  type RecoverAddressReturnType,\n  recoverAddress,\n} from './utils/signature/recoverAddress.js'\nexport {\n  type RecoverMessageAddressErrorType,\n  type RecoverMessageAddressParameters,\n  type RecoverMessageAddressReturnType,\n  recoverMessageAddress,\n} from './utils/signature/recoverMessageAddress.js'\nexport {\n  type RecoverPublicKeyErrorType,\n  type RecoverPublicKeyParameters,\n  type RecoverPublicKeyReturnType,\n  recoverPublicKey,\n} from './utils/signature/recoverPublicKey.js'\nexport {\n  type RecoverTransactionAddressErrorType,\n  type RecoverTransactionAddressParameters,\n  type RecoverTransactionAddressReturnType,\n  recoverTransactionAddress,\n} from './utils/signature/recoverTransactionAddress.js'\nexport {\n  type RecoverTypedDataAddressErrorType,\n  type RecoverTypedDataAddressParameters,\n  type RecoverTypedDataAddressReturnType,\n  recoverTypedDataAddress,\n} from './utils/signature/recoverTypedDataAddress.js'\nexport {\n  type SignatureToCompactSignatureErrorType,\n  signatureToCompactSignature,\n} from './utils/signature/signatureToCompactSignature.js'\nexport {\n  /** @deprecated Use `SignatureToHexErrorType` instead. */\n  type SerializeCompactSignatureErrorType as CompactSignatureToHexErrorType,\n  /** @deprecated Use `serializeCompactSignature` instead. */\n  serializeCompactSignature as compactSignatureToHex,\n  type SerializeCompactSignatureErrorType,\n  serializeCompactSignature,\n} from './utils/signature/serializeCompactSignature.js'\nexport {\n  /** @deprecated Use `SignatureToHexErrorType` instead. */\n  type SerializeSignatureErrorType as SignatureToHexErrorType,\n  /** @deprecated Use `serializeSignature` instead. */\n  serializeSignature as signatureToHex,\n  type SerializeSignatureParameters,\n  type SerializeSignatureReturnType,\n  type SerializeSignatureErrorType,\n  serializeSignature,\n} from './utils/signature/serializeSignature.js'\nexport {\n  bytesToRlp,\n  type BytesToRlpErrorType,\n  hexToRlp,\n  type HexToRlpErrorType,\n  toRlp,\n  type ToRlpErrorType,\n  type ToRlpReturnType,\n} from './utils/encoding/toRlp.js'\nexport {\n  type VerifyHashErrorType,\n  type VerifyHashParameters,\n  type VerifyHashReturnType,\n  verifyHash,\n} from './utils/signature/verifyHash.js'\nexport {\n  type VerifyMessageErrorType,\n  type VerifyMessageParameters,\n  type VerifyMessageReturnType,\n  verifyMessage,\n} from './utils/signature/verifyMessage.js'\nexport {\n  type VerifyTypedDataErrorType,\n  type VerifyTypedDataParameters,\n  type VerifyTypedDataReturnType,\n  verifyTypedData,\n} from './utils/signature/verifyTypedData.js'\nexport {\n  type ParseErc6492SignatureErrorType,\n  type ParseErc6492SignatureParameters,\n  type ParseErc6492SignatureReturnType,\n  parseErc6492Signature,\n} from './utils/signature/parseErc6492Signature.js'\nexport {\n  type IsErc6492SignatureErrorType,\n  type IsErc6492SignatureParameters,\n  type IsErc6492SignatureReturnType,\n  isErc6492Signature,\n} from './utils/signature/isErc6492Signature.js'\nexport {\n  type SerializeErc6492SignatureErrorType,\n  type SerializeErc6492SignatureParameters,\n  type SerializeErc6492SignatureReturnType,\n  serializeErc6492Signature,\n} from './utils/signature/serializeErc6492Signature.js'\nexport {\n  type AssertRequestErrorType,\n  assertRequest,\n} from './utils/transaction/assertRequest.js'\nexport {\n  type AssertTransactionEIP1559ErrorType,\n  assertTransactionEIP1559,\n  type AssertTransactionEIP2930ErrorType,\n  assertTransactionEIP2930,\n  type AssertTransactionLegacyErrorType,\n  assertTransactionLegacy,\n} from './utils/transaction/assertTransaction.js'\nexport {\n  type BoolToBytesErrorType,\n  type BoolToBytesOpts,\n  boolToBytes,\n  type HexToBytesErrorType,\n  type HexToBytesOpts,\n  hexToBytes,\n  type NumberToBytesErrorType,\n  numberToBytes,\n  type StringToBytesErrorType,\n  type StringToBytesOpts,\n  stringToBytes,\n  type ToBytesErrorType,\n  type ToBytesParameters,\n  toBytes,\n} from './utils/encoding/toBytes.js'\nexport {\n  type BoolToHexErrorType,\n  type BoolToHexOpts,\n  boolToHex,\n  type BytesToHexErrorType,\n  type BytesToHexOpts,\n  bytesToHex,\n  type NumberToHexErrorType,\n  type NumberToHexOpts,\n  numberToHex,\n  type StringToHexErrorType,\n  type StringToHexOpts,\n  stringToHex,\n  type ToHexErrorType,\n  type ToHexParameters,\n  toHex,\n} from './utils/encoding/toHex.js'\nexport {\n  type BytesToBigIntErrorType,\n  type BytesToBigIntOpts,\n  bytesToBigInt,\n  type BytesToBoolErrorType,\n  type BytesToBoolOpts,\n  bytesToBool,\n  type BytesToNumberErrorType,\n  type BytesToNumberOpts,\n  bytesToNumber,\n  type BytesToStringErrorType,\n  type BytesToStringOpts,\n  bytesToString,\n  type FromBytesErrorType,\n  type FromBytesParameters,\n  fromBytes,\n} from './utils/encoding/fromBytes.js'\nexport {\n  type CcipRequestParameters,\n  type CcipRequestErrorType,\n  ccipRequest,\n  /** @deprecated Use `ccipRequest`. */\n  ccipRequest as ccipFetch,\n  type OffchainLookupErrorType,\n  offchainLookup,\n  offchainLookupAbiItem,\n  offchainLookupSignature,\n} from './utils/ccip.js'\nexport {\n  type BlobsToCommitmentsErrorType,\n  type BlobsToCommitmentsParameters,\n  type BlobsToCommitmentsReturnType,\n  blobsToCommitments,\n} from './utils/blob/blobsToCommitments.js'\nexport {\n  type CommitmentToVersionedHashErrorType,\n  type CommitmentToVersionedHashParameters,\n  type CommitmentToVersionedHashReturnType,\n  commitmentToVersionedHash,\n} from './utils/blob/commitmentToVersionedHash.js'\nexport {\n  type CommitmentsToVersionedHashesErrorType,\n  type CommitmentsToVersionedHashesParameters,\n  type CommitmentsToVersionedHashesReturnType,\n  commitmentsToVersionedHashes,\n} from './utils/blob/commitmentsToVersionedHashes.js'\nexport {\n  type SidecarsToVersionedHashesErrorType,\n  type SidecarsToVersionedHashesParameters,\n  type SidecarsToVersionedHashesReturnType,\n  sidecarsToVersionedHashes,\n} from './utils/blob/sidecarsToVersionedHashes.js'\nexport {\n  type blobsToProofsErrorType,\n  type blobsToProofsParameters,\n  type blobsToProofsReturnType,\n  blobsToProofs,\n} from './utils/blob/blobsToProofs.js'\nexport {\n  type FromBlobsErrorType,\n  type FromBlobsParameters,\n  type FromBlobsReturnType,\n  fromBlobs,\n} from './utils/blob/fromBlobs.js'\nexport {\n  type ToBlobSidecarsErrorType,\n  type ToBlobSidecarsParameters,\n  type ToBlobSidecarsReturnType,\n  toBlobSidecars,\n} from './utils/blob/toBlobSidecars.js'\nexport {\n  type ToBlobsErrorType,\n  type ToBlobsParameters,\n  type ToBlobsReturnType,\n  toBlobs,\n} from './utils/blob/toBlobs.js'\nexport {\n  type DefineKzgErrorType,\n  type DefineKzgParameters,\n  type DefineKzgReturnType,\n  defineKzg,\n} from './utils/kzg/defineKzg.js'\nexport {\n  type SetupKzgErrorType,\n  type SetupKzgParameters,\n  type SetupKzgReturnType,\n  setupKzg,\n} from './utils/kzg/setupKzg.js'\nexport {\n  type ConcatBytesErrorType,\n  type ConcatErrorType,\n  type ConcatHexErrorType,\n  type ConcatReturnType,\n  concat,\n  concatBytes,\n  concatHex,\n} from './utils/data/concat.js'\nexport {\n  type AssertCurrentChainErrorType,\n  type AssertCurrentChainParameters,\n  assertCurrentChain,\n} from './utils/chain/assertCurrentChain.js'\nexport { defineChain } from './utils/chain/defineChain.js'\nexport {\n  type ExtractChainErrorType,\n  type ExtractChainParameters,\n  type ExtractChainReturnType,\n  extractChain,\n} from './utils/chain/extractChain.js'\nexport {\n  type GetChainContractAddressErrorType,\n  getChainContractAddress,\n} from './utils/chain/getChainContractAddress.js'\nexport {\n  type EncodePackedErrorType,\n  encodePacked,\n} from './utils/abi/encodePacked.js'\nexport {\n  type WithRetryErrorType,\n  withRetry,\n} from './utils/promise/withRetry.js'\nexport {\n  type WithTimeoutErrorType,\n  withTimeout,\n} from './utils/promise/withTimeout.js'\nexport {\n  type FormatEtherErrorType,\n  formatEther,\n} from './utils/unit/formatEther.js'\nexport {\n  type FormatGweiErrorType,\n  formatGwei,\n} from './utils/unit/formatGwei.js'\nexport {\n  type FormatUnitsErrorType,\n  formatUnits,\n} from './utils/unit/formatUnits.js'\nexport {\n  type FromHexErrorType,\n  fromHex,\n  type HexToBigIntErrorType,\n  hexToBigInt,\n  type HexToBoolErrorType,\n  hexToBool,\n  type HexToNumberErrorType,\n  hexToNumber,\n  type HexToStringErrorType,\n  hexToString,\n} from './utils/encoding/fromHex.js'\nexport {\n  type FromRlpErrorType,\n  type FromRlpReturnType,\n  fromRlp,\n} from './utils/encoding/fromRlp.js'\nexport {\n  type ChecksumAddressErrorType,\n  type GetAddressErrorType,\n  checksumAddress,\n  getAddress,\n} from './utils/address/getAddress.js'\nexport {\n  type GetContractErrorReturnType,\n  getContractError,\n} from './utils/errors/getContractError.js'\nexport {\n  type ToEventSelectorErrorType,\n  toEventSelector,\n  /** @deprecated use `ToEventSelectorErrorType`. */\n  type ToEventSelectorErrorType as GetEventSelectorErrorType,\n  /** @deprecated use `toEventSelector`. */\n  toEventSelector as getEventSelector,\n} from './utils/hash/toEventSelector.js'\nexport {\n  type ToFunctionSelectorErrorType,\n  toFunctionSelector,\n  /** @deprecated use `ToFunctionSelectorErrorType`. */\n  type ToFunctionSelectorErrorType as GetFunctionSelectorErrorType,\n  /** @deprecated use `toFunctionSelector`. */\n  toFunctionSelector as getFunctionSelector,\n} from './utils/hash/toFunctionSelector.js'\nexport {\n  type ToEventSignatureErrorType,\n  toEventSignature,\n  /** @deprecated use `ToEventSignatureErrorType`. */\n  type ToEventSignatureErrorType as GetEventSignatureErrorType,\n  /** @deprecated use `toEventSignature`. */\n  toEventSignature as getEventSignature,\n} from './utils/hash/toEventSignature.js'\nexport {\n  type ToFunctionSignatureErrorType,\n  toFunctionSignature,\n  /** @deprecated use `ToFunctionSignatureErrorType`. */\n  type ToFunctionSignatureErrorType as GetFunctionSignatureErrorType,\n  /** @deprecated use `toFunctionSignature`. */\n  toFunctionSignature as getFunctionSignature,\n} from './utils/hash/toFunctionSignature.js'\nexport {\n  type ToEventHashErrorType,\n  toEventHash,\n} from './utils/hash/toEventHash.js'\nexport {\n  type ToFunctionHashErrorType,\n  toFunctionHash,\n} from './utils/hash/toFunctionHash.js'\nexport {\n  type HashMessageErrorType,\n  hashMessage,\n} from './utils/signature/hashMessage.js'\nexport {\n  type ToPrefixedMessageErrorType,\n  toPrefixedMessage,\n} from './utils/signature/toPrefixedMessage.js'\nexport {\n  type IsAddressOptions,\n  type IsAddressErrorType,\n  isAddress,\n} from './utils/address/isAddress.js'\nexport {\n  type IsAddressEqualReturnType,\n  type IsAddressEqualErrorType,\n  isAddressEqual,\n} from './utils/address/isAddressEqual.js'\nexport { type IsBytesErrorType, isBytes } from './utils/data/isBytes.js'\nexport { type IsHashErrorType, isHash } from './utils/hash/isHash.js'\nexport { type IsHexErrorType, isHex } from './utils/data/isHex.js'\nexport {\n  type Keccak256Hash,\n  type Keccak256ErrorType,\n  keccak256,\n} from './utils/hash/keccak256.js'\nexport {\n  type Sha256Hash,\n  type Sha256ErrorType,\n  sha256,\n} from './utils/hash/sha256.js'\nexport {\n  type Ripemd160Hash,\n  type Ripemd160ErrorType,\n  ripemd160,\n} from './utils/hash/ripemd160.js'\nexport {\n  type PadBytesErrorType,\n  type PadErrorType,\n  type PadHexErrorType,\n  type PadReturnType,\n  pad,\n  padBytes,\n  padHex,\n} from './utils/data/pad.js'\nexport {\n  type ParseEtherErrorType,\n  parseEther,\n} from './utils/unit/parseEther.js'\nexport { type ParseGweiErrorType, parseGwei } from './utils/unit/parseGwei.js'\nexport {\n  type ParseTransactionErrorType,\n  type ParseTransactionReturnType,\n  parseTransaction,\n} from './utils/transaction/parseTransaction.js'\nexport {\n  type ParseUnitsErrorType,\n  parseUnits,\n} from './utils/unit/parseUnits.js'\nexport {\n  type SerializeAccessListErrorType,\n  serializeAccessList,\n} from './utils/transaction/serializeAccessList.js'\nexport {\n  serializeTransaction,\n  type SerializeTransactionErrorType,\n  type SerializedTransactionReturnType,\n  type SerializeTransactionFn,\n} from './utils/transaction/serializeTransaction.js'\nexport { type SizeErrorType, size } from './utils/data/size.js'\nexport {\n  type SliceBytesErrorType,\n  type SliceErrorType,\n  type SliceHexErrorType,\n  slice,\n  sliceBytes,\n  sliceHex,\n} from './utils/data/slice.js'\nexport { type StringifyErrorType, stringify } from './utils/stringify.js'\nexport {\n  type TrimErrorType,\n  type TrimReturnType,\n  trim,\n} from './utils/data/trim.js'\nexport {\n  type DomainSeparatorErrorType,\n  type GetTypesForEIP712DomainErrorType,\n  type SerializeTypedDataErrorType,\n  type ValidateTypedDataErrorType,\n  serializeTypedData,\n  validateTypedData,\n  domainSeparator,\n  getTypesForEIP712Domain,\n} from './utils/typedData.js'\nexport {\n  type CreateNonceManagerParameters,\n  type NonceManager,\n  type NonceManagerSource,\n  createNonceManager,\n  nonceManager,\n} from './utils/nonceManager.js'\nexport type {\n  RpcEstimateUserOperationGasReturnType,\n  RpcGetUserOperationByHashReturnType,\n  RpcUserOperation,\n  RpcUserOperationReceipt,\n  RpcUserOperationRequest,\n} from './account-abstraction/types/rpc.js'\n","import {getAddress as getEvmAddress, isAddress as isEvmAddress} from 'viem';\n\nexport function validateAndParseAddress(address: string, chainKey: string): string {\n  if (address === '') {\n    throw new Error('No address provided');\n  }\n  if (isEvmAddress(address)) {\n    return getEvmAddress(address);\n  }\n  return address;\n}\n","import {validateAndParseAddress} from './utils/validateAndParseAddress';\nimport {BaseCurrency} from './baseCurrency';\nimport type {Currency} from './currency';\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string;\n\n  protected constructor(\n    chainKey: string,\n    address: string,\n    decimals: number,\n    symbol: string,\n    name?: string,\n  ) {\n    address = validateAndParseAddress(address, chainKey);\n    super(`${chainKey}:${address}`, chainKey, decimals, symbol, name);\n    this.address = address;\n  }\n\n  public static from(input: {\n    chainKey: string;\n    address: string;\n    decimals: number;\n    symbol: string;\n    name?: string;\n  }) {\n    return new Token(input.chainKey, input.address, input.decimals, input.symbol, input.name);\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainKey and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    if (!(other instanceof Token)) return false;\n    return this.chainKey === other.chainKey && this.address === other.address;\n  }\n}\n","import {Coin} from '../coin';\nimport type {Currency} from '../currency';\nimport {Token} from '../token';\n\nexport function isToken(value: unknown): value is Token {\n  return value instanceof Token;\n}\n\nexport function assertToken(value: Currency, errorMessage?: string): asserts value is Token {\n  if (!isToken(value)) {\n    throw new Error(errorMessage ?? `Not a token (${value.symbol})`);\n  }\n}\n\nexport function isCoin(value: Currency): value is Coin {\n  return value instanceof Coin;\n}\n\nexport function isCurrency(value: unknown): value is Currency {\n  return value instanceof Token || value instanceof Coin;\n}\n","import z from 'zod';\nimport type {Currency} from './currency';\nimport {Token} from './token';\nimport {Coin} from './coin';\nimport {CurrencyAmount} from '../fraction';\n\nexport const serializedCoinSchema = z.object({\n  name: z.string().optional(),\n  symbol: z.string(),\n  decimals: z.number(),\n  chainKey: z.string(),\n});\n\nexport const serializedTokenSchema = z.object({\n  name: z.string().optional(),\n  symbol: z.string(),\n  decimals: z.number(),\n  chainKey: z.string(),\n  address: z.string(),\n});\n\nexport const serializedCurrencySchema = z.union([\n  // order matters\n  serializedTokenSchema,\n  serializedCoinSchema,\n]);\n\nexport const serializedAmountSchema = z.object({\n  // as bigint\n  amount: z.string(),\n  token: serializedCurrencySchema,\n});\n\nexport type SerializedCoin = z.infer<typeof serializedCoinSchema>;\nexport type SerializedToken = z.infer<typeof serializedTokenSchema>;\nexport type SerializedAmount = z.infer<typeof serializedAmountSchema>;\nexport type SerializedCurrency = z.infer<typeof serializedCurrencySchema>;\n\nexport const coinSchema: z.ZodSchema<Coin, z.ZodTypeDef, SerializedCoin> =\n  serializedCoinSchema.transform((obj) => Coin.from(obj));\n\nexport const tokenSchema: z.ZodSchema<Token, z.ZodTypeDef, SerializedToken> =\n  serializedTokenSchema.transform((obj) => Token.from(obj));\n\nexport const currencySchema: z.ZodSchema<Currency, z.ZodTypeDef, SerializedCurrency> = z.union([\n  // order matters\n  tokenSchema,\n  coinSchema,\n]);\n\nexport const amountSchema: z.ZodSchema<CurrencyAmount, z.ZodTypeDef, SerializedAmount> =\n  serializedAmountSchema.transform((obj) => {\n    const token = currencySchema.parse(obj.token);\n    const amount = BigInt(obj.amount);\n    return CurrencyAmount.fromBigInt(token, amount);\n  });\n\nexport function serializeToken(token: Token): SerializedToken {\n  return {\n    name: token.name,\n    symbol: token.symbol,\n    decimals: token.decimals,\n    chainKey: token.chainKey,\n    address: token.address,\n  };\n}\n\nexport function serializeCoin(coin: Coin): SerializedCoin {\n  return {\n    name: coin.name,\n    symbol: coin.symbol,\n    decimals: coin.decimals,\n    chainKey: coin.chainKey,\n  };\n}\n\nexport function serializeCurrency(currency: Currency): SerializedCurrency {\n  if ('address' in currency) {\n    return serializeToken(currency);\n  } else {\n    return serializeCoin(currency);\n  }\n}\n\nexport function serializeAmount(amount: CurrencyAmount): SerializedAmount {\n  return {\n    amount: amount.toBigInt().toString(),\n    token: serializeCurrency(amount.token),\n  };\n}\n","import _Decimal from 'decimal.js-light';\nimport _Big, {type RoundingMode} from 'big.js';\nimport toFormat from 'toformat';\n\nimport {type BigintIsh, Rounding} from './constants';\nimport {assert} from '../utils/assert';\n\nconst Decimal = toFormat(_Decimal);\nconst Big = toFormat(_Big);\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n};\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: 0 as RoundingMode,\n  [Rounding.ROUND_HALF_UP]: 1 as RoundingMode,\n  [Rounding.ROUND_UP]: 3 as RoundingMode,\n};\n\nexport class Fraction {\n  public readonly numerator: bigint;\n  public readonly denominator: bigint;\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = BigInt(1)) {\n    this.numerator = BigInt(numerator);\n    this.denominator = BigInt(denominator);\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (\n      typeof fractionish === 'number' ||\n      typeof fractionish === 'string' ||\n      typeof fractionish === 'bigint'\n    )\n      return new Fraction(fractionish);\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish;\n    throw new Error('Could not parse fraction');\n  }\n\n  // performs floor division\n  public get quotient(): bigint {\n    return this.numerator / this.denominator;\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(this.numerator % this.denominator, this.denominator);\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator);\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other);\n    if (this.denominator === otherParsed.denominator) {\n      return new Fraction(this.numerator + otherParsed.numerator, this.denominator);\n    }\n    return new Fraction(\n      this.numerator * otherParsed.denominator + otherParsed.numerator * this.denominator,\n      this.denominator * otherParsed.denominator,\n    );\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other);\n    if (this.denominator === otherParsed.denominator) {\n      return new Fraction(this.numerator - otherParsed.numerator, this.denominator);\n    }\n\n    return new Fraction(\n      this.numerator * otherParsed.denominator - otherParsed.numerator * this.denominator,\n      this.denominator * otherParsed.denominator,\n    );\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return this.numerator * otherParsed.denominator < otherParsed.numerator * this.denominator;\n  }\n\n  public lessThanOrEqualTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return this.numerator * otherParsed.denominator <= otherParsed.numerator * this.denominator;\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return this.numerator * otherParsed.denominator === otherParsed.numerator * this.denominator;\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return this.numerator * otherParsed.denominator > otherParsed.numerator * this.denominator;\n  }\n\n  public greaterThanOrEqualTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return this.numerator * otherParsed.denominator >= otherParsed.numerator * this.denominator;\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(\n      this.numerator * otherParsed.numerator,\n      this.denominator * otherParsed.denominator,\n    );\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(\n      this.numerator * otherParsed.denominator,\n      this.denominator * otherParsed.numerator,\n    );\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = {groupSeparator: ''},\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    assert(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`);\n    assert(significantDigits > 0, `${significantDigits} is not positive.`);\n\n    Decimal.set({precision: significantDigits + 1, rounding: toSignificantRounding[rounding]});\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = {groupSeparator: ''},\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\n  ): string {\n    assert(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`);\n    assert(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\n\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toFormat(decimalPlaces, format);\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator);\n  }\n}\n","// exports for external consumption\nexport type BigintIsh = string | number | bigint;\n\nexport enum Rounding {\n  ROUND_DOWN = 0,\n  ROUND_HALF_UP = 1,\n  ROUND_UP = 2,\n}\n\nexport const MaxUint256 = BigInt(\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\n);\n","import type {Currency} from '../currency/currency';\nimport {Fraction} from './fraction';\nimport _Big from 'big.js';\n\nimport toFormat from 'toformat';\nimport {type BigintIsh, Rounding, MaxUint256} from './constants';\nimport {assert} from '../utils/assert';\n\nconst Big = toFormat(_Big);\n\ninterface Format {\n  decimalSeparator?: string;\n  secondaryGroupSize?: number;\n  fractionGroupSeparator?: string;\n  groupSize?: number;\n  groupSeparator?: string;\n}\n\nconst defaultFormat: Format = {\n  decimalSeparator: '.',\n  groupSeparator: '',\n};\n\nexport class CurrencyAmount<T extends Currency = Currency> extends Fraction {\n  public readonly token: T;\n  public readonly decimalScale: bigint;\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(\n    currency: T,\n    rawAmount: BigintIsh,\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount);\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh,\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator);\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator);\n    assert(this.quotient <= MaxUint256, 'AMOUNT');\n    this.token = currency;\n    this.decimalScale = BigInt(10) ** BigInt(currency.decimals);\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    assert(this.token.equals(other.token), 'CURRENCY');\n    const added = super.add(other);\n    return CurrencyAmount.fromFractionalAmount(this.token, added.numerator, added.denominator);\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    assert(this.token.equals(other.token), 'CURRENCY');\n    const subtracted = super.subtract(other);\n    return CurrencyAmount.fromFractionalAmount(\n      this.token,\n      subtracted.numerator,\n      subtracted.denominator,\n    );\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other);\n    return CurrencyAmount.fromFractionalAmount(\n      this.token,\n      multiplied.numerator,\n      multiplied.denominator,\n    );\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other);\n    return CurrencyAmount.fromFractionalAmount(this.token, divided.numerator, divided.denominator);\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: Format,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.token.decimals,\n    format?: Format,\n    rounding: Rounding = Rounding.ROUND_DOWN,\n  ): string {\n    assert(decimalPlaces <= this.token.decimals, 'DECIMALS');\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding);\n  }\n\n  public toExact(format: Format = defaultFormat): string {\n    Big.DP = this.token.decimals;\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format);\n  }\n\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator).divide(this.decimalScale);\n  }\n\n  public static fromBigInt<T extends Currency>(currency: T, bigIntAmount: bigint) {\n    return new CurrencyAmount(currency, bigIntAmount);\n  }\n\n  public toBigInt(): bigint {\n    return this.quotient;\n  }\n}\n","import type {BigintIsh, Rounding} from './constants';\nimport {Fraction} from './fraction';\n\nconst ONE_HUNDRED = new Fraction(BigInt(100));\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator);\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true;\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other));\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other));\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other));\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other));\n  }\n\n  public toSignificant(\n    significantDigits: number = 5,\n    format?: object,\n    rounding?: Rounding,\n  ): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\n  }\n}\n","import invariant from 'tiny-invariant';\n\nimport type {BigintIsh, Rounding} from '../fraction/constants';\nimport type {Currency} from '../currency';\nimport {Fraction} from '../fraction/fraction';\nimport {CurrencyAmount} from './currencyAmount';\n\nexport class Price<\n  TBase extends Currency = Currency,\n  TQuote extends Currency = Currency,\n> extends Fraction {\n  public readonly baseCurrency: TBase; // input i.e. denominator\n  public readonly quoteCurrency: TQuote; // output i.e. numerator\n  public readonly scalar: Fraction; // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote>}]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh;\n\n    if (args.length === 4) {\n      [baseCurrency, quoteCurrency, denominator, numerator] = args;\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount);\n      [baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.token,\n        args[0].quoteAmount.token,\n        result.denominator,\n        result.numerator,\n      ];\n    }\n    super(numerator, denominator);\n\n    this.baseCurrency = baseCurrency;\n    this.quoteCurrency = quoteCurrency;\n    this.scalar = new Fraction(\n      BigInt(10) ** BigInt(baseCurrency.decimals),\n      BigInt(10) ** BigInt(quoteCurrency.decimals),\n    );\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(\n    other: Price<TQuote, TOtherQuote>,\n  ): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN');\n    const fraction = super.multiply(other);\n    return new Price(\n      this.baseCurrency,\n      other.quoteCurrency,\n      fraction.denominator,\n      fraction.numerator,\n    );\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.token.equals(this.baseCurrency), 'TOKEN');\n    const result = super.multiply(currencyAmount);\n    return CurrencyAmount.fromFractionalAmount(\n      this.quoteCurrency,\n      result.numerator,\n      result.denominator,\n    );\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar);\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding?: Rounding,\n  ): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);\n  }\n}\n","export const FiatCurrency = {\n  USD: 'USD',\n  EUR: 'EUR',\n} as const;\n\nexport type FiatCurrency = keyof typeof FiatCurrency;\nexport type FiatAmount = {\n  currency: FiatCurrency;\n  value: number;\n};\n","import type {Currency} from '../../currency';\nimport {CurrencyAmount} from '../currencyAmount';\n\nexport function castCurrencyAmountUnsafe(\n  input: CurrencyAmount,\n  dstToken: Currency,\n): CurrencyAmount {\n  const srcToken = input.token;\n  if (srcToken.decimals === dstToken.decimals) {\n    return CurrencyAmount.fromBigInt(dstToken, input.quotient);\n  }\n  return CurrencyAmount.fromBigInt(dstToken, input.quotient)\n    .multiply(10 ** dstToken.decimals)\n    .divide(10 ** srcToken.decimals);\n}\n","import {parseUnits as parseUnitsViem} from 'viem';\n\n// throws when too many decimals\nexport function parseUnits(value: string, decimals: number): bigint {\n  // parse first to throw early if invalid\n  const result = parseUnitsViem(value, decimals);\n  const [integer, fraction = ''] = value.split('.');\n  // viem does not handle case when too many decimals are provided\n  if (fraction.length > decimals) {\n    const tail = fraction.substring(decimals); // should be all 0s\n    if (BigInt(tail) > 0) {\n      throw new Error('Too many decimal places');\n    }\n  }\n  return result;\n}\n","import type {Currency} from '../../currency';\nimport {CurrencyAmount} from '../currencyAmount';\nimport {parseUnits} from './parseUnits';\n\nexport function parseCurrencyAmount<T extends Currency>(\n  currency: T,\n  value: string,\n): CurrencyAmount<T> {\n  const typedValueParsed = parseUnits(value, currency.decimals);\n  return CurrencyAmount.fromRawAmount(currency, typedValueParsed);\n}\n\nexport function tryParseCurrencyAmount<T extends Currency>(\n  currency?: T,\n  value?: string,\n): CurrencyAmount<T> | undefined {\n  if (currency === undefined || value === undefined) return undefined;\n  try {\n    return parseCurrencyAmount(currency, value);\n  } catch {\n    //\n  }\n  return undefined;\n}\n","import {Fraction} from '../fraction';\nimport {parseUnits} from './parseUnits';\n\nexport function parseFraction(value: string, decimals: number): Fraction {\n  const parsed = parseUnits(value, decimals);\n  const denominator = 10 ** decimals;\n  return new Fraction(parsed, denominator);\n}\n\nexport function tryParseFraction(value?: string, decimals: number = 4): Fraction | undefined {\n  if (value === undefined) return undefined;\n  try {\n    return parseFraction(value, decimals);\n  } catch {\n    //\n  }\n  return undefined;\n}\n","import {Percent} from '../percent';\nimport {parseUnits} from './parseUnits';\n\nexport function parsePercent(value: string, decimals: number): Percent {\n  const parsed = parseUnits(value, decimals);\n  const denominator = 100 * 10 ** decimals;\n  return new Percent(parsed, denominator);\n}\n\nexport function tryParsePercent(value?: string, decimals: number = 4): Percent | undefined {\n  if (value === undefined) return undefined;\n  try {\n    return parsePercent(value, decimals);\n  } catch {\n    //\n  }\n  return undefined;\n}\n","import type {Currency} from '../../currency';\nimport type {CurrencyAmount} from '../currencyAmount';\nimport {parseCurrencyAmount, tryParseCurrencyAmount} from './parseCurrencyAmount';\n\nexport function parseAmount<TToken extends Currency = Currency>(\n  amount: string,\n  token: TToken,\n): CurrencyAmount<TToken> {\n  return parseCurrencyAmount(token, amount);\n}\n\nexport function tryParseAmount<TToken extends Currency = Currency>(\n  amount?: string,\n  token?: TToken,\n): CurrencyAmount<TToken> | undefined {\n  return tryParseCurrencyAmount(token, amount);\n}\n","import type {Currency} from '../../currency';\nimport type {CurrencyAmount} from '../currencyAmount';\nimport {tryParseCurrencyAmount} from './parseCurrencyAmount';\n\nexport function sumUnsafe(amounts?: (CurrencyAmount | undefined)[], asCurrency?: Currency) {\n  if (!amounts || amounts.length === 0 || amounts.some((i) => !i)) {\n    return undefined;\n  }\n  asCurrency = asCurrency ?? amounts[0]!.token;\n  let sum = 0;\n  for (const amount of amounts as CurrencyAmount[]) {\n    const float = Number.parseFloat(amount.toExact());\n    sum += float;\n  }\n  if (!Number.isFinite(sum)) return undefined;\n  return tryParseCurrencyAmount(asCurrency, sum.toFixed(asCurrency.decimals));\n}\n","import type {FiatAmount} from '../fiat';\n\nexport function sumFiat(amounts?: (FiatAmount | undefined)[]): FiatAmount | undefined {\n  if (!amounts || amounts.length === 0) return undefined;\n  let sum = 0;\n  const currency = amounts[0]!.currency;\n  for (const amount of amounts) {\n    if (!amount) return undefined;\n    if (currency !== amount.currency) return undefined;\n    sum += amount.value;\n  }\n  if (!Number.isFinite(sum)) return undefined;\n  return {\n    currency,\n    value: sum,\n  };\n}\n","import {CurrencyAmount} from '../currencyAmount';\n\nexport function removeDust(amount: CurrencyAmount, sharedDecimals: number) {\n  const localDecimals = amount.token.decimals;\n  const diff = localDecimals - sharedDecimals;\n  if (diff > 0) {\n    return CurrencyAmount.fromBigInt(\n      //\n      amount.token,\n      amount.divide(10 ** diff).quotient,\n    ).multiply(10 ** diff);\n  }\n  return amount;\n}\n","export const ChainType = {\n  EVM: 'evm',\n  APTOS: 'aptos',\n  SOLANA: 'solana',\n  COSMOS: 'cosmos',\n  TON: 'ton',\n  TRON: 'tron',\n} as const;\n\n// Type is being redefined here\n// eslint-disable-next-line\nexport type ChainType = (typeof ChainType)[keyof typeof ChainType] | (string & {});\n","const EXCEPTIONS: Set<number> = new Set([20008]);\n\nexport function toULNv2(eid: number): number {\n  if (EXCEPTIONS.has(eid)) return eid;\n  if (eid < 100) return eid + 100;\n  if (eid < 10000) return eid;\n  if (eid < 10100) return eid + 100;\n  if (eid < 20000) return eid;\n  if (eid < 20100) return eid + 100;\n  return eid;\n}\n","import {isAddress} from 'viem';\n\nexport const isEvmAddress = isAddress;\n","import {coreModule} from '../core';\n\n// users should use CoreModule\n// exposing single functions for backwards compatibility\n\n// wrapping to enable monkey patching of coreModule\nexport const tryGetNetwork: typeof coreModule.tryGetNetwork = (chainKey) => {\n  return coreModule.tryGetNetwork(chainKey);\n};\n\nexport const getNetwork: typeof coreModule.getNetwork = (chainKey) => {\n  return coreModule.getNetwork(chainKey);\n};\n\nexport const getBlockExplorers: typeof coreModule.getBlockExplorers = (chainKey) => {\n  return coreModule.getBlockExplorers(chainKey);\n};\n\nexport const getRpcs: typeof coreModule.getRpcs = (chainKey) => coreModule.getRpcs(chainKey);\n\nexport const tryGetNativeCurrency: typeof coreModule.tryGetNativeCurrency = (chainKey) => {\n  return coreModule.tryGetNativeCurrency(chainKey);\n};\n\nexport const getNativeCurrency: typeof coreModule.getNativeCurrency = (chainKey) => {\n  return coreModule.getNativeCurrency(chainKey);\n};\n\nexport const tryGetNetworkByNativeChainId: typeof coreModule.tryGetNetworkByNativeChainId = (\n  chainType,\n  nativeChainId,\n) => {\n  return coreModule.tryGetNetworkByNativeChainId(chainType, nativeChainId);\n};\n\nexport const getNetworkByNativeChainId: typeof coreModule.getNetworkByNativeChainId = (\n  chainType,\n  nativeChainId,\n) => {\n  return coreModule.getNetworkByNativeChainId(chainType, nativeChainId);\n};\n\nexport const isNativeCurrency: typeof coreModule.isNativeCurrency = (currency) => {\n  return coreModule.isNativeCurrency(currency);\n};\n\nexport const endpointIdToStage: typeof coreModule.endpointIdToStage = (eid) =>\n  coreModule.endpointIdToStage(eid);\n\nexport const endpointIdToChainKey: typeof coreModule.endpointIdToChainKey = (eid) => {\n  return coreModule.endpointIdToChainKey(eid);\n};\n\nexport const chainKeyToEndpointId: typeof coreModule.chainKeyToEndpointId = (\n  chainKey,\n  version,\n  stage,\n) => {\n  return coreModule.chainKeyToEndpointId(chainKey, version, stage);\n};\n\nexport const isChainType: typeof coreModule.isChainType = (chainKey, chainType) => {\n  return coreModule.isChainType(chainKey, chainType);\n};\n\nexport const getScanLink: typeof coreModule.getScanLink = (input) => {\n  return coreModule.getScanLink(input);\n};\n\nexport const getExplorerLink = (\n  input: {chainKey: string; address: string} | {chainKey: string; txHash: string},\n) => {\n  if ('address' in input) {\n    return `https://layerzeroscan.com/api/explorer/${input.chainKey}/address/${input.address}`;\n  }\n  return `https://layerzeroscan.com/api/explorer/${input.chainKey}/tx/${input.txHash}`;\n};\n","import {isChainType} from '../utils/globals';\nimport type {ChainKey} from '../types/ChainKey';\nimport {ChainType} from '../types/ChainType';\n\nexport function isEvmChainKey(chainKey: ChainKey): boolean {\n  return isChainType(chainKey, ChainType.EVM);\n}\n","export function isAptosAddress(address: string): boolean {\n  // todo: implement\n  throw new Error('Not implemented');\n}\n","import {isChainType} from '../utils/globals';\nimport type {ChainKey} from '../types/ChainKey';\nimport {ChainType} from '../types/ChainType';\n\nexport function isAptosChainKey(chainKey: ChainKey): boolean {\n  return isChainType(chainKey, ChainType.APTOS);\n}\n","import type {ChainKey} from '../types/ChainKey';\nimport {ChainType} from '../types/ChainType';\n\nexport function isTonChainKey(chainKey: ChainKey): boolean {\n  return chainKey === 'ton' || chainKey.startsWith('ton-');\n}\n","const solanaAddressRegex = /^([1-9A-HJ-NP-Za-km-z]{32,44})$/;\n\nexport function isSolanaAddress(address: string): boolean {\n  return solanaAddressRegex.test(address);\n}\n","import {isChainType} from '../utils/globals';\nimport type {ChainKey} from '../types/ChainKey';\nimport {ChainType} from '../types/ChainType';\n\nexport function isSolanaChainKey(chainKey: ChainKey): boolean {\n  return isChainType(chainKey, ChainType.SOLANA);\n}\n","import {base58} from '@scure/base';\nimport {bytesToHex, type Hex, sha256} from 'viem';\n\nimport {isEvmAddress} from './isEvmAddress';\n\n/**\n * Validates whether a given address is a valid Tron address.\n *\n * Tron address format:\n * - Starts with 'T'.\n * - Followed by 33 base58 characters (excluding 0, O, I, and l).\n *\n * The function also verifies the checksum:\n * - Decoded address is 21 bytes long, first byte is 0x41 (Tron network prefix).\n * - Last 4 bytes of the decoded address are the checksum.\n *\n * EVM compatibility:\n * - If the address starts with '0x', it is validated as an EVM address using `isEvmAddress`.\n *\n * @param {string} address - The address to validate.\n * @returns {boolean} - Returns true if the address is a valid Tron or EVM address, otherwise false.\n */\nconst tronAddressRegex = /^T[1-9A-HJ-NP-Za-km-z]{33}$/;\nexport function isTronAddress(address: string): boolean {\n  if (address.startsWith('0x')) {\n    return isEvmAddress(address);\n  }\n  if (!tronAddressRegex.test(address)) {\n    return false;\n  }\n\n  try {\n    const decoded = base58.decode(address);\n    // The decoded address is 21 bytes; the first byte should be 0x41 (which is the Tron network prefix)\n    if (decoded[0] !== 0x41) {\n      return false;\n    }\n\n    if (decoded.length !== 25) {\n      return false;\n    }\n\n    // ensure checksum is correct\n    const hex = bytesToHex(decoded);\n    const checkSum0 = hex.substring(hex.length - 8, hex.length);\n    const checkSum1 = sha256(sha256(hex.substring(0, hex.length - 8) as Hex)).substring(2, 10);\n\n    if (checkSum0 !== checkSum1) {\n      return false;\n    }\n\n    return true;\n  } catch {\n    return false;\n  }\n}\n","import {isChainType} from '../utils/globals';\nimport type {ChainKey} from '../types/ChainKey';\nimport {ChainType} from '../types/ChainType';\n\nexport function isTronChainKey(chainKey: ChainKey): boolean {\n  return isChainType(chainKey, ChainType.TRON) || chainKey.startsWith('tron-');\n}\n","import {Address} from '@ton/core';\n\nexport const isTonAddress = (address: string) => {\n  try {\n    return /^(0|-1):([a-f0-9]{64}|[A-F0-9]{64})$/.test(Address.parse(address).toRawString());\n  } catch (error) {\n    return false;\n  }\n};\n","import type {Currency} from '../currency';\nimport type {BlockExplorer, Network, NetworkInfo} from '../network/types';\nimport type {Deployment} from '../types/Deployment';\nimport type {ChainKey} from '../types/ChainKey';\nimport type {RpcMap} from '../types/Rpc';\nimport {networkSchema} from '../network';\nimport type {ChainType} from '../types/ChainType';\nimport type {Stage} from '../types/Stage';\n\nexport class CoreModule {\n  protected _networks: Network[] = [];\n  protected _networkByChainKey = new Map<string, Network>();\n  protected _deployments: Deployment[] = [];\n  protected _deploymentByEndpointId = new Map<number, Deployment>();\n  protected _rpcMap: RpcMap = {};\n  protected _log = console;\n  protected _blockExplorers: Record<ChainKey, BlockExplorer[]> = {};\n\n  constructor() {}\n\n  public get networks(): Network[] {\n    return this._networks;\n  }\n\n  public get rpcMap(): RpcMap {\n    return this._rpcMap;\n  }\n\n  public get blockExplorers(): Record<ChainKey, BlockExplorer[]> {\n    return this.blockExplorers;\n  }\n\n  public setNetworks<TNetworkInfo extends NetworkInfo>(networks: TNetworkInfo[]) {\n    this._networks = networkSchema.array().parse(networks);\n    this._networkByChainKey = new Map();\n    for (const network of this._networks) {\n      this._networkByChainKey.set(network.chainKey, network);\n    }\n  }\n\n  public setDeployments(deployments: Deployment[]) {\n    this._deployments = deployments;\n    this._deploymentByEndpointId = new Map();\n    for (const deployment of deployments) {\n      this._deploymentByEndpointId.set(deployment.eid, deployment);\n    }\n  }\n\n  public setBlockExplorers(blockExplorers: Record<ChainKey, BlockExplorer[]>) {\n    this._blockExplorers = blockExplorers;\n  }\n\n  public setRpcMap(rpcMap: RpcMap) {\n    this._rpcMap = rpcMap;\n  }\n\n  // Network\n  tryGetNetwork = (chainKey: ChainKey | undefined): Network | undefined => {\n    if (chainKey === undefined) return undefined;\n    return this._networkByChainKey.get(chainKey);\n  };\n\n  getNetwork = (chainKey: ChainKey): Network => {\n    const network = this.tryGetNetwork(chainKey);\n    if (!network) {\n      throw new Error(`No network for chainKey: ${chainKey}`);\n    }\n    return network;\n  };\n\n  tryGetNetworkByNativeChainId = (\n    chainType?: ChainType,\n    nativeChainId?: number | string,\n  ): Network | undefined => {\n    if (chainType === undefined) return undefined;\n    if (nativeChainId === undefined) return undefined;\n    for (const network of this.networks) {\n      if (nativeChainId === network.nativeChainId && chainType === network.chainType) {\n        return network;\n      }\n    }\n  };\n\n  getRpcs = (chainKey: ChainKey) => {\n    return this.rpcMap[chainKey] ?? [];\n  };\n\n  getBlockExplorers = (chainKey: ChainKey) => {\n    return this._blockExplorers[chainKey] ?? [];\n  };\n\n  getNetworkByNativeChainId = (chainType: ChainType, nativeChainId: number | string): Network => {\n    const network = this.tryGetNetworkByNativeChainId(chainType, nativeChainId);\n    if (network) return network;\n\n    throw new Error(`No network for chainType: ${chainType} and native chain id: ${nativeChainId}`);\n  };\n\n  tryGetNativeCurrency = (chainKey: ChainKey | undefined): Currency | undefined => {\n    const network = this.tryGetNetwork(chainKey);\n    return network?.nativeCurrency;\n  };\n\n  getNativeCurrency = (chainKey: ChainKey): Currency => {\n    return this.getNetwork(chainKey).nativeCurrency;\n  };\n\n  getScanLink(\n    input:\n      | {\n          txHash: string;\n          chainKey: string;\n        }\n      | {\n          address: string;\n          chainKey: string;\n        },\n  ): string {\n    const domain = input.chainKey.endsWith('-sandbox' as string)\n      ? 'sandbox.layerzeroscan.com'\n      : 'layerzeroscan.com';\n\n    if ('address' in input) {\n      return `https://${domain}/address/${input.address}`;\n    }\n    if ('txHash' in input) {\n      return `https://${domain}/tx/${input.txHash}`;\n    }\n    return `https://${domain}/`;\n  }\n\n  isNativeCurrency = (currency: Currency): boolean => {\n    const nativeCurrency = this.getNativeCurrency(currency.chainKey);\n    return nativeCurrency.equals(currency);\n  };\n\n  endpointIdToStage = (endpointId: number): Stage => {\n    const deployment = this.getDeployment(endpointId);\n    return deployment.stage as Stage;\n  };\n\n  tryGetDeployment = (endpointId: number): Deployment | undefined => {\n    return this._deploymentByEndpointId.get(endpointId);\n  };\n\n  getDeployment = (endpointId: number): Deployment => {\n    const deployment = this.tryGetDeployment(endpointId);\n    if (deployment) return deployment;\n    throw new Error(`No deployment for endpointId: ${endpointId}`);\n  };\n\n  getNetworks() {\n    return this._networks;\n  }\n\n  getDeployments() {\n    return this._deployments;\n  }\n\n  endpointIdToChainKey = (endpointId: number): string => {\n    const deployment = this.getDeployment(endpointId);\n    if (deployment) return deployment.chainKey;\n    throw new Error(`No chainKey for endpointId: ${endpointId}`);\n  };\n\n  chainKeyToEndpointId = (chainKey: string, endpointVersion: 1 | 2, stage: Stage): number => {\n    for (const deployment of this._deployments) {\n      if (deployment.chainKey !== chainKey) continue;\n      if (deployment.stage !== stage) continue;\n      if (deployment.version !== endpointVersion) continue;\n      return deployment.eid;\n    }\n    throw new Error(\n      `No EndpointId for chainKey: ${chainKey} and endpointVersion: ${endpointVersion} and stage: ${stage}`,\n    );\n  };\n\n  isChainType = (chainKey: ChainKey, chainType: ChainType): boolean => {\n    const network = this.getNetwork(chainKey);\n    return network.chainType === chainType;\n  };\n}\n","import {CoreModule} from './CoreModule';\n\nexport const coreModule = new CoreModule();\n","import type {BlockExplorer} from '../network/types';\n\nexport const blockExplorers: Record<string, BlockExplorer[]> = {\n  arbitrum: [\n    {\n      name: 'Arbiscan',\n      url: 'https://arbiscan.io',\n    },\n  ],\n  'arbitrum-goerli': [\n    {\n      name: 'Arbiscan',\n      url: 'https://goerli.arbiscan.io',\n    },\n  ],\n  nova: [\n    {\n      name: 'BlockScout',\n      url: 'https://nova-explorer.arbitrum.io',\n    },\n  ],\n  astar: [\n    {\n      name: 'Astar Subscan',\n      url: 'https://astar.subscan.io',\n    },\n  ],\n  aurora: [\n    {\n      name: 'Aurorascan',\n      url: 'https://aurorascan.dev',\n    },\n  ],\n  'aurora-testnet': [\n    {\n      name: 'Aurorascan',\n      url: 'https://testnet.aurorascan.dev',\n    },\n  ],\n  avalanche: [\n    {\n      name: 'SnowTrace',\n      url: 'https://snowtrace.io',\n    },\n  ],\n  fuji: [\n    {\n      name: 'SnowTrace',\n      url: 'https://testnet.snowtrace.io',\n    },\n  ],\n  base: [\n    {\n      name: 'Basescan',\n      url: 'https://basescan.org',\n    },\n  ],\n  'base-goerli': [\n    {\n      name: 'Basescan',\n      url: 'https://goerli.basescan.org',\n    },\n  ],\n  bsc: [\n    {\n      name: 'BscScan',\n      url: 'https://bscscan.com',\n    },\n  ],\n  'bsc-testnet': [\n    {\n      name: 'BscScan',\n      url: 'https://testnet.bscscan.com',\n    },\n  ],\n  canto: [\n    {\n      name: 'Tuber.Build (Blockscout)',\n      url: 'https://tuber.build',\n    },\n  ],\n  celo: [\n    {\n      name: 'CeloScan',\n      url: 'https://celoscan.io',\n    },\n  ],\n  coredao: [\n    {\n      name: 'CoreDao',\n      url: 'https://scan.coredao.org',\n    },\n  ],\n  dfk: [\n    {\n      name: 'DFKSubnetScan',\n      url: 'https://subnets.avax.network/defi-kingdoms',\n    },\n  ],\n  fantom: [\n    {\n      name: 'FTMScan',\n      url: 'https://ftmscan.com',\n    },\n  ],\n  'fantom-testnet': [\n    {\n      name: 'FTMScan',\n      url: 'https://testnet.ftmscan.com',\n    },\n  ],\n  fuse: [\n    {\n      name: 'Fuse Explorer',\n      url: 'https://explorer.fuse.io',\n    },\n  ],\n  gnosis: [\n    {\n      name: 'Gnosis Chain Explorer',\n      url: 'https://blockscout.com/xdai/mainnet',\n    },\n  ],\n  chiado: [\n    {\n      name: 'Blockscout',\n      url: 'https://blockscout.chiadochain.net',\n    },\n  ],\n  goerli: [\n    {\n      name: 'Etherscan',\n      url: 'https://goerli.etherscan.io',\n    },\n  ],\n  harmony: [\n    {\n      name: 'Harmony Explorer',\n      url: 'https://explorer.harmony.one',\n    },\n  ],\n  kava: [\n    {\n      name: 'Kava EVM Explorer',\n      url: 'https://kavascan.com',\n    },\n  ],\n  'kava-testnet': [\n    {\n      name: 'Kava EVM Testnet Explorer',\n      url: 'https://testnet.kavascan.com',\n    },\n  ],\n  klaytn: [\n    {\n      name: 'KlaytnScope',\n      url: 'https://scope.klaytn.com',\n    },\n  ],\n  'klaytn-baobab': [\n    {\n      name: 'KlaytnScope',\n      url: 'https://baobab.klaytnscope.com',\n    },\n  ],\n  linea: [\n    {\n      name: 'Blockscout',\n      url: 'https://explorer.linea.build',\n    },\n  ],\n  ethereum: [\n    {\n      name: 'Etherscan',\n      url: 'https://etherscan.io',\n    },\n  ],\n  manta: [\n    {\n      name: 'Manta Explorer',\n      url: 'https://pacific-explorer.manta.network',\n    },\n  ],\n  'manta-testnet': [\n    {\n      name: 'Manta Testnet Explorer',\n      url: 'https://pacific-explorer.testnet.manta.network',\n    },\n  ],\n  mantle: [\n    {\n      name: 'Mantle Explorer',\n      url: 'https://explorer.mantle.xyz',\n    },\n  ],\n  'mantle-testnet': [\n    {\n      name: 'Mantle Testnet Explorer',\n      url: 'https://explorer.testnet.mantle.xyz',\n    },\n  ],\n  meter: [\n    {\n      name: 'MeterScan',\n      url: 'https://scan.meter.io',\n    },\n  ],\n  'meter-testnet': [\n    {\n      name: 'MeterTestnetScan',\n      url: 'https://scan-warringstakes.meter.io',\n    },\n  ],\n  metis: [\n    {\n      name: 'Andromeda Explorer',\n      url: 'https://andromeda-explorer.metis.io',\n    },\n  ],\n  'metis-goerli': [\n    {\n      name: 'Metis Goerli Explorer',\n      url: 'https://goerli.explorer.metisdevops.link',\n    },\n  ],\n  moonbeam: [\n    {\n      name: 'Moonscan',\n      url: 'https://moonscan.io',\n    },\n  ],\n  moonriver: [\n    {\n      name: 'Moonscan',\n      url: 'https://moonriver.moonscan.io',\n    },\n  ],\n  opbnb: [\n    {\n      name: 'opbnbscan',\n      url: 'https://mainnet.opbnbscan.com',\n    },\n  ],\n  'opbnb-testnet': [\n    {\n      name: 'opbnbscan',\n      url: 'https://opbnbscan.com',\n    },\n  ],\n  optimism: [\n    {\n      name: 'Optimism Explorer',\n      url: 'https://explorer.optimism.io',\n    },\n  ],\n  'optimism-goerli': [\n    {\n      name: 'Etherscan',\n      url: 'https://goerli-optimism.etherscan.io',\n    },\n  ],\n  pgn: [\n    {\n      name: 'PGN Explorer',\n      url: 'https://explorer.publicgoods.network',\n    },\n  ],\n  'pgn-testnet': [\n    {\n      name: 'PGN Testnet Explorer',\n      url: 'https://explorer.sepolia.publicgoods.network',\n    },\n  ],\n  polygon: [\n    {\n      name: 'PolygonScan',\n      url: 'https://polygonscan.com',\n    },\n  ],\n  mumbai: [\n    {\n      name: 'PolygonScan',\n      url: 'https://mumbai.polygonscan.com',\n    },\n  ],\n  zkevm: [\n    {\n      name: 'PolygonScan',\n      url: 'https://zkevm.polygonscan.com',\n    },\n  ],\n  'zkevm-testnet': [\n    {\n      name: 'PolygonScan',\n      url: 'https://testnet-zkevm.polygonscan.com',\n    },\n  ],\n  scroll: [\n    {\n      name: 'Blockscout',\n      url: 'https://blockscout.scroll.io',\n    },\n  ],\n  'scroll-sepolia': [\n    {\n      name: 'Blockscout',\n      url: 'https://sepolia-blockscout.scroll.io',\n    },\n  ],\n  sepolia: [\n    {\n      name: 'Etherscan',\n      url: 'https://sepolia.etherscan.io',\n    },\n  ],\n  shimmer: [\n    {\n      name: 'Shimmer Network Explorer',\n      url: 'https://explorer.evm.shimmer.network',\n    },\n  ],\n  'shimmer-testnet': [\n    {\n      name: 'Shimmer Network Explorer',\n      url: 'https://explorer.evm.testnet.shimmer.network',\n    },\n  ],\n  telos: [\n    {\n      name: 'Teloscan',\n      url: 'https://www.teloscan.io',\n    },\n  ],\n  'telos-testnet': [\n    {\n      name: 'Teloscan (testnet)',\n      url: 'https://testnet.teloscan.io',\n    },\n  ],\n  tenet: [\n    {\n      name: 'TenetScan Mainnet',\n      url: 'https://tenetscan.io',\n    },\n  ],\n  zksync: [\n    {\n      name: 'zkExplorer',\n      url: 'https://explorer.zksync.io',\n    },\n  ],\n  'zksync-testnet': [\n    {\n      name: 'zkExplorer',\n      url: 'https://goerli.explorer.zksync.io',\n    },\n  ],\n  zora: [\n    {\n      name: 'Explorer',\n      url: 'https://explorer.zora.energy',\n    },\n  ],\n  'zora-testnet': [\n    {\n      name: 'Explorer',\n      url: 'https://testnet.explorer.zora.energy',\n    },\n  ],\n};\n","export function interpolateString(str: string, variables: Record<string, string | number>) {\n  const regex = /\\${([a-zA-Z0-9_]+)}/g;\n  return str.replace(regex, (_, variable) => {\n    const value = variables[variable];\n    if (value === undefined) {\n      throw new Error(`Undefined environment variable: ${variable}`);\n    }\n    return String(value);\n  });\n}\n","import {rpcs} from '@layerzerolabs/ui-config';\nimport type {RpcMap} from '../types/Rpc';\n\nexport const rpcMap: RpcMap = rpcs;\n","import {interpolateString} from './interpolateString';\nimport type {RpcMap} from '../types/Rpc';\nimport {rpcMap as defaultRpcMap} from '../config/rpcs';\n\nexport function createRpcMap(\n  rawRpcMap: RpcMap = defaultRpcMap,\n  env: Record<string, string | number> = {},\n): RpcMap {\n  const rpcMap: RpcMap = {};\n  for (const [chainKey, rawRpcList] of Object.entries(rawRpcMap)) {\n    if (!rawRpcList) continue;\n    const rpcList = [];\n    for (const rpc of rawRpcList) {\n      if (!rpc.url.startsWith('https://')) continue;\n      try {\n        const url = interpolateString(rpc.url, env);\n        rpcList.push({\n          ...rpc,\n          url,\n        });\n      } catch {\n        // no variable interpolation error\n      }\n    }\n    rpcMap[chainKey] = rpcList;\n  }\n  return rpcMap;\n}\n","interface WaitForPromise extends Promise<void> {\n  cancel(): void;\n}\n\nconst noop = () => {};\n\nexport function waitFor(\n  condition: () => boolean | undefined | null | Promise<boolean>,\n  {timeout = 1000, interval = 100} = {},\n): WaitForPromise {\n  let cancel: WaitForPromise['cancel'] = noop;\n  const promise: WaitForPromise = new Promise<void>(async (resolve, reject) => {\n    try {\n      if (await condition()) {\n        resolve();\n        return;\n      }\n    } catch {\n      //pass\n    }\n\n    //\n    const id = setInterval(() => {\n      if (condition()) {\n        cancel();\n        resolve();\n      }\n    }, interval);\n\n    cancel = () => clearInterval(id);\n\n    setTimeout(() => {\n      cancel();\n      reject(new Error(`Timed out after ${timeout}ms`, {cause: condition}));\n    }, timeout);\n  }) as WaitForPromise;\n\n  promise.cancel = cancel;\n\n  return promise;\n}\n","function formatUserInput(value: string) {\n  value = value.replace(/,/g, '.');\n  // if (value.startsWith(\"0\") && value[1] !== \".\") {\n  //   value = value.slice(1);\n  // }\n  return value;\n}\n\nexport const tryParseNumber = (value: string) => {\n  const nextUserInput = formatUserInput(value);\n  if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n    return nextUserInput;\n  }\n  return undefined;\n};\n\nexport const parseNumber = (value: string) => {\n  const number = tryParseNumber(value);\n  if (!number) throw new Error(`Value \"${value}\" is invalid number`);\n  return number;\n};\n\nconst inputRegex = /^\\d*(?:\\\\[.])?\\d*$/;\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n","export function hasAddress<T extends object>(obj: T): obj is T & {address: string} {\n  return 'address' in obj && !!obj.address;\n}\n","export function unit8ArrayToHex(value: Uint8Array): string {\n  // biome-ignore lint/style/useTemplate: <explanation>\n  return '0x' + Buffer.from(value).toString('hex');\n}\n","export function hexToUnit8Array(hex: string): Uint8Array {\n  return new Uint8Array(Buffer.from(hex.slice(2), 'hex'));\n}\n","import {ChainType} from '../types/ChainType';\n\nexport class InvalidAddressError extends Error {\n  public readonly name = 'InvalidAddressError';\n  constructor({address, type}: {address: string; type: ChainType}) {\n    super(`Invalid address: ${address} for chain type: ${type}`);\n  }\n}\n","import {coreModule} from '../core';\nimport type {ChainKey} from '../types/ChainKey';\n\nexport type DurationProviderConfig = {\n  blockConfirmation: {[chainKey: string]: Seconds} & {default: Seconds};\n  averageBlockTime: {[chainKey: string]: Seconds} & {default: Seconds};\n  extraDelay: Seconds;\n};\n\n// todo: better naming ?\nexport class DurationProvider {\n  constructor(protected config: DurationProviderConfig) {}\n\n  setConfig(config: DurationProviderConfig) {\n    this.config = config;\n  }\n\n  public async getExpectedDate(\n    ua: UA,\n    dstEid: number,\n    sentTimestamp = getUnixTime(new Date()),\n  ): Promise<UnixTimestamp> {\n    const duration = await this.getMessageDuration(ua, dstEid);\n    const expected = sentTimestamp + duration + this.config.extraDelay;\n    return expected;\n  }\n\n  public async getMessageDuration(ua: UA, dstEid: number): Promise<Seconds> {\n    const srcChainKey = this.endpointIdToChainKey(ua.eid);\n    const dstChainKey = this.endpointIdToChainKey(dstEid);\n    const [confirmations, srcBlockTime, dstBlockTime] = await Promise.all([\n      this.getRequiredConfirmations(ua, dstEid),\n      this.getAverageBlockTime(srcChainKey),\n      this.getAverageBlockTime(dstChainKey),\n    ]);\n\n    return (confirmations + 1) * srcBlockTime + dstBlockTime * 2 + this.config.extraDelay;\n  }\n\n  public async getRequiredConfirmations(ua: UA, dstEid: number): Promise<Seconds> {\n    const srcChainKey = this.endpointIdToChainKey(ua.eid);\n    const dstChainKey = this.endpointIdToChainKey(dstEid);\n\n    if (srcChainKey) {\n      const confirmations = this.config.blockConfirmation[srcChainKey];\n      if (confirmations) return confirmations;\n    }\n    return this.config.blockConfirmation.default;\n  }\n\n  // returns seconds\n  public async getAverageBlockTime(chainKey: ChainKey): Promise<Seconds> {\n    if (chainKey) {\n      // @ts-ignore\n      const blockTime = this.config.averageBlockTime[chainKey];\n      if (blockTime) return blockTime;\n    }\n    return this.config.averageBlockTime.default;\n  }\n\n  protected endpointIdToChainKey(eid: number): ChainKey {\n    return coreModule.endpointIdToChainKey(eid);\n  }\n}\n\nfunction getUnixTime(date: Date) {\n  return Math.floor(date.getTime() / 1000);\n}\n\ntype UnixTimestamp = number;\n\ntype Seconds = number;\n\ntype UA = {eid: number; address: string};\n","export const defaultConfig = {\n  extraDelay: 10,\n  blockConfirmation: {\n    ethereum: 15,\n    avalanche: 12,\n    bsc: 20,\n    polygon: 512,\n    arbitrum: 20,\n    optimism: 20,\n    fantom: 5,\n    default: 20,\n  } as Record<string, number> & {default: number},\n  averageBlockTime: {\n    default: 10,\n    solana: 0.4,\n    'solana-testnet': 0.4,\n    ethereum: 12.0888,\n    rinkeby: 15,\n    goerli: 30,\n    bsc: 3.0145,\n    'bsc-testnet': 3.0006,\n    polygon: 2.174,\n    mumbai: 2.1251,\n    avalanche: 2.0261,\n    fuji: 2.4164,\n    fantom: 0.7371,\n    'fantom-testnet': 3.3419,\n    arbitrum: 0.3016,\n    'arbitrum-goerli': 0.479,\n    'arbitrum-rinkeby': 2,\n    optimism: 2,\n    'optimism-kovan': 2,\n    'optimism-goerli': 2,\n    swimmer: 35,\n    dfk: 2.0937,\n    harmony: 2.0004,\n    aptos: 5,\n    'aptos-testnet': 5,\n    moonbeam: 12.1626,\n    metis: 8.178,\n    'metis-goerli': 25.7157,\n    'dfk-testnet': 25.0134,\n    'harmony-testnet': 1,\n    'dexalot-testnet': 150.913,\n    kovan: 2,\n    chiado: 1,\n    celo: 5,\n    alfajores: 5,\n    moonbase: 12.2118,\n    boba: 174.893,\n    'boba-rinkeby': 2,\n    'portal-fantasy-testnet': 100000,\n    aurora: 1.0254,\n    'aurora-testnet': 0.636,\n    astar: 100000,\n    coredao: 3,\n    'coredao-testnet': 3,\n    dexalot: 2.0017,\n    dos: 330.0842,\n    'dos-testnet': 284.9476,\n    fuse: 5.035,\n    gnosis: 5.3655,\n    klaytn: 1.0005,\n    'klaytn-baobab': 1,\n    meter: 1.8928,\n    'meter-testnet': 1.3163,\n    moonriver: 12.4302,\n    okx: 4.0994,\n    sepolia: 13.0404,\n    zksync: 1.0137,\n    'zksync-testnet': 2.9454,\n    'base-goerli': 2,\n    shrapnel: 73.9795,\n    tenet: 3.5818,\n    'tenet-testnet': 3.7681,\n    zkevm: 1.7976,\n    'zkevm-testnet': 10.8423,\n    canto: 5.795,\n    'canto-testnet': 1,\n    nova: 0.8291,\n    kava: 6.3176,\n    'kava-testnet': 5.2017,\n    base: 2,\n    'linea-goerli': 6.0032,\n    linea: 8,\n    mantle: 1.0913,\n    'mantle-testnet': 1.8003,\n    beam: 25.4688,\n    'beam-testnet': 11.6942,\n    'okx-testnet': 3.3526,\n    'scroll-testnet': 1,\n    zora: 2,\n    telos: 100000,\n    'telos-testnet': 0.5,\n    'conflux-testnet': 0.6396,\n    opbnb: 0.9999,\n    conflux: 1.3113,\n    'opbnb-testnet': 1.0001,\n    scroll: 3.0401,\n    orderly: 2,\n    'astar-testnet': 1,\n    eon: 1,\n    'eon-testnet': 1,\n    'frame-testnet': 1,\n    'holesky-testnet': 1,\n    'kiwi-testnet': 1,\n    'manta-testnet': 1,\n    'oda-testnet': 1,\n    'orderly-testnet': 1,\n    'pgn-testnet': 1,\n    'shimmer-testnet': 1,\n    'shrapnel-testnet': 1,\n    'spruce-testnet': 1,\n    tomo: 1,\n    'tomo-testnet': 1,\n    xpla: 1,\n    'xpla-testnet': 1,\n    'zkatana-testnet': 1,\n    'zora-testnet': 1,\n  } as Record<string, number> & {default: number},\n};\n","import {DurationProvider} from './DurationProvider';\nimport {defaultConfig} from './defaultConfig';\n\nexport const durationProvider = new DurationProvider(defaultConfig);\n\nexport const getExpectedDate: typeof durationProvider.getExpectedDate = (\n  ua,\n  dstEid,\n  sentTimestamp,\n) => durationProvider.getExpectedDate(ua, dstEid, sentTimestamp);\n\nexport const getMessageDuration: typeof durationProvider.getMessageDuration = (ua, dstEid) =>\n  durationProvider.getMessageDuration(ua, dstEid);\n","import type {CurrencyAmount} from '../fraction/currencyAmount';\nimport {assert} from '../utils/assert';\n\nexport class AdapterParams {\n  private constructor(\n    public readonly version: number,\n    public readonly extraGas = 200_000,\n    public readonly dstNativeAmount?: CurrencyAmount,\n    public readonly dstNativeAddress?: string,\n  ) {}\n\n  static forV1(extraGas?: number): AdapterParams {\n    return new AdapterParams(1, extraGas);\n  }\n\n  static forV2(input: AdapterParamsV2Input): AdapterParams {\n    assert(input.dstNativeAmount);\n    assert(input.dstNativeAddress);\n    return new AdapterParams(2, input.extraGas, input.dstNativeAmount, input.dstNativeAddress);\n  }\n\n  static create(input: AdapterParamsV1Input | AdapterParamsV2Input): AdapterParams {\n    if ('dstNativeAmount' in input && input.dstNativeAmount) {\n      return AdapterParams.forV2(input);\n    } else {\n      return AdapterParams.forV1(input.extraGas);\n    }\n  }\n}\n\ntype AdapterParamsV1Input = {\n  extraGas?: number;\n};\n\ntype AdapterParamsV2Input = {\n  extraGas?: number;\n  dstNativeAmount: CurrencyAmount;\n  dstNativeAddress: string;\n};\n","import {CurrencyAmount} from '../fraction/currencyAmount';\nimport {getNativeCurrency} from '../utils/globals';\nimport type {ChainKey} from './ChainKey';\nimport type {FeeQuote} from './FeeQuote';\n\nexport class MessageFee implements FeeQuote {\n  protected constructor(\n    public readonly nativeFee: CurrencyAmount,\n    public readonly zroFee: CurrencyAmount,\n  ) {}\n\n  static from(\n    chainKey: ChainKey,\n    {nativeFee, zroFee}: {nativeFee: number | string | bigint; zroFee: number | string | bigint},\n  ): MessageFee {\n    const native = getNativeCurrency(chainKey);\n    const zroToken = native; // dummy token\n    return new MessageFee(\n      CurrencyAmount.fromBigInt(native, BigInt(nativeFee)),\n      CurrencyAmount.fromBigInt(zroToken, BigInt(zroFee)),\n    );\n  }\n}\n","export const Stage = {\n  MAINNET: 'mainnet',\n  TESTNET: 'testnet',\n  SANDBOX: 'sandbox',\n} as const;\n\nexport type Stage = (typeof Stage)[keyof typeof Stage] | (string & {});\n"]}