{"version":3,"sources":["../src/types/zod.ts","../src/config/testnet/eth.ts","../src/config/testnet/usdc.ts","../src/config/testnet/usdt.ts","../src/config/testnet/tokenMessaging.ts","../src/config/testnet/stargateStaking.ts","../src/config/sandbox/eth.ts","../src/config/sandbox/usdc.ts","../src/config/sandbox/usdt.ts","../src/config/sandbox/tokenMessaging.ts","../src/config/sandbox/stargateStaking.ts","../src/config/mainnet/eth.ts","../src/config/mainnet/usdc.ts","../src/config/mainnet/usdt.ts","../src/config/mainnet/meth.ts","../src/config/mainnet/metis.ts","../src/config/mainnet/tokenMessaging.ts","../src/config/mainnet/stargateStaking.ts","../src/bridge/StargateV2Bus.ts","../../../node_modules/redaxios/src/index.js","../src/bridge/StargateV2Bridge.ts","../src/types/OftCmd.ts","../src/types/SendMode.ts","../src/types/MsgType.ts","../src/types/StargateV2AssetId.ts","../src/typechain/factories/OFTToken__factory.ts"],"names":["z","create","defaults","deepMerge","opts","overrides","lowerCase","i","out","Array","isArray","concat","toLowerCase","key","value","redaxios","urlOrConfig","config","_method","data","_undefined","url","response","options","customHeaders","transformRequest","map","f","headers","auth","authorization","append","text","JSON","stringify","xsrfHeaderName","decodeURIComponent","document","cookie","match","RegExp","xsrfCookieName","e","baseURL","replace","params","indexOf","paramsSerializer","URLSearchParams","fetch","method","toUpperCase","body","credentials","withCredentials","then","res","responseType","parse","catch","Object","validateStatus","status","ok","Promise","reject","request","get","delete","head","post","put","patch","all","bind","spread","fn","apply","CancelToken","AbortController","path","MessageFee","createTransaction","utils","SendMode","MsgType"],"mappings":";;;;;;;;;AAAA,OAAO,OAAO;AAEd,SAAQ,MAAM,aAAY;AAE1B,IAAM,iBAAiB,EAAE,OAAO;AAAA,EAC9B,QAAQ,EAAE,OAAO;AAAA,EACjB,UAAU,EAAE,OAAO;AAAA,EACnB,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,EAC1B,SAAS,EAAE,OAAO,EAAE,SAAS;AAC/B,CAAC;AAED,IAAM,cAAc,eAAe,OAAO;AAAA,EACxC,SAAS,EAAE,OAAO;AACpB,CAAC;AAED,IAAM,iBAAiB,EAAE,OAAO;AAAA,EAC9B,SAAS,EAAE,OAAO;AACpB,CAAC;AAED,IAAM,mCAAmC,EAAE,OAAO;AAAA,EAChD,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG;AAAA,EACxC,gBAAgB,EAAE,OAAO;AAAA,EACzB,aAAa,EAAE;AAAA,IACb,EAAE,OAAO;AAAA,MACP,KAAK,EAAE,OAAO;AAAA,MACd,OAAO;AAAA,MACP,SAAS,YAAY,SAAS;AAAA,MAC9B,oBAAoB,eAAe,SAAS;AAAA,MAC5C,cAAc,eAAe,SAAS;AAAA,MACtC,aAAa,eAAe,SAAS;AAAA,MACrC,QAAQ;AAAA,MACR,gBAAgB;AAAA,IAClB,CAAC;AAAA,EACH;AACF,CAAC;AAID,IAAM,yBAAyB,iCAAiC,UAAU,CAAC,SAAS;AAClF,QAAM,SAA2B;AAAA,IAC/B,SAAS,KAAK;AAAA,IACd,gBAAgB,KAAK;AAAA,IACrB,aAAa,CAAC;AAAA,EAChB;AAEA,aAAW,YAAY,KAAK,aAAa;AACvC,UAAM,aAAa,KAAK,YAAY,QAAQ;AAC5C,WAAO,YAAY,QAAQ,IAAI;AAAA,MAC7B,KAAK,WAAW;AAAA,MAChB,SACE,WAAW,WACX,MAAM,KAAK;AAAA,QACT;AAAA,QACA,QAAQ,WAAW,QAAQ;AAAA,QAC3B,UAAU,WAAW,QAAQ;AAAA,QAC7B,SAAS,WAAW,QAAQ;AAAA,QAC5B,MAAM,WAAW,QAAQ;AAAA,MAC3B,CAAC;AAAA,MACH,OAAO,WAAW,MAAM,UACpB,MAAM,KAAK;AAAA,QACT;AAAA,QACA,QAAQ,WAAW,MAAM;AAAA,QACzB,UAAU,WAAW,MAAM;AAAA,QAC3B,SAAS,WAAW,MAAM;AAAA,QAC1B,MAAM,WAAW,MAAM;AAAA,MACzB,CAAC,IACD,KAAK,KAAK;AAAA,QACR;AAAA,QACA,UAAU,WAAW,MAAM;AAAA,QAC3B,QAAQ,WAAW,MAAM;AAAA,MAC3B,CAAC;AAAA,MACL,QAAQ;AAAA,QACN,SAAS,WAAW,OAAO;AAAA,MAC7B;AAAA,MACA,cAAc,WAAW,eACrB;AAAA,QACE,SAAS,WAAW,aAAa;AAAA,MACnC,IACA;AAAA,MACJ,oBAAoB,WAAW,qBAC3B;AAAA,QACE,SAAS,WAAW,mBAAmB;AAAA,MACzC,IACA;AAAA,MACJ,aAAa,WAAW,cACpB;AAAA,QACE,SAAS,WAAW,YAAY;AAAA,MAClC,IACA;AAAA,MACJ,gBAAgB,WAAW;AAAA,IAC7B;AAAA,EACF;AACA,SAAO;AACT,CAAC;AAEM,SAAS,aACd,OACkB;AAClB,SAAO,uBAAuB,MAAM,KAAK;AAC3C;AAGA,IAAM,2CAA2C,EAAE,OAAO;AAAA,EACxD,KAAK,EAAE,OAAO,EAAC,KAAK,EAAE,OAAO,EAAC,CAAC;AAAA,EAC/B,aAAa,EAAE;AAAA,IACb,EAAE,OAAO;AAAA,MACP,KAAK,EAAE,OAAO;AAAA,MACd,gBAAgB;AAAA,IAClB,CAAC;AAAA,EACH;AACF,CAAC;AAUD,IAAM,oCAAoC,EAAE,OAAO;AAAA,EACjD,aAAa,EAAE;AAAA,IACb,EAAE,OAAO;AAAA,MACP,iBAAiB;AAAA,MACjB,uBAAuB;AAAA,IACzB,CAAC;AAAA,EACH;AACF,CAAC;;;AC5HM,IAAM,cAAgC,aAAa;AAAA,EACxD,SAAS;AAAA,EACT,aAAa;AAAA,IACX,oBAAoB;AAAA,MAClB,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,oBAAoB;AAAA,QAClB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,MACf,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,oBAAoB;AAAA,MAClB,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,oBAAoB;AAAA,QAClB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,oBAAoB;AAAA,QAClB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AAAA,EACA,gBAAgB;AAClB,CAAC;;;AC5FM,IAAM,eAAiC,aAAa;AAAA,EACzD,SAAS;AAAA,EACT,aAAa;AAAA,IACX,oBAAoB;AAAA,MAClB,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,MACf,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,oBAAoB;AAAA,MAClB,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AAAA,EACA,gBAAgB;AAClB,CAAC;;;AC/FM,IAAM,eAAiC,aAAa;AAAA,EACzD,SAAS;AAAA,EACT,aAAa;AAAA,IACX,oBAAoB;AAAA,MAClB,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,eAAe;AAAA,MACb,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,MACf,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,oBAAoB;AAAA,MAClB,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AAAA,EACA,gBAAgB;AAClB,CAAC;;;ACxHM,IAAM,0BAA0D;AAAA,EACrE,KAAK;AAAA,IACH,KAAK;AAAA,EACP;AAAA,EACA,aAAa;AAAA,IACX,oBAAoB;AAAA,MAClB,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,eAAe;AAAA,MACb,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,iBAAiB;AAAA,MACf,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,oBAAoB;AAAA,MAClB,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACF;;;ACpCO,IAAM,8BAAiE;AAAA,EAC5E,aAAa;AAAA,IACX,oBAAoB;AAAA,MAClB,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,eAAe;AAAA,MACb,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,oBAAoB;AAAA,MAClB,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACF;;;AClCO,IAAM,cAAgC,aAAa;AAAA,EACxD,SAAS;AAAA,EACT,aAAa;AAAA;AAAA,EAEb;AAAA,EACA,gBAAgB;AAClB,CAAC;;;ACNM,IAAM,eAAiC,aAAa;AAAA,EACzD,SAAS;AAAA,EACT,aAAa;AAAA;AAAA,EAEb;AAAA,EACA,gBAAgB;AAClB,CAAC;;;ACNM,IAAM,eAAiC,aAAa;AAAA,EACzD,SAAS;AAAA,EACT,aAAa;AAAA;AAAA,EAEb;AAAA,EACA,gBAAgB;AAClB,CAAC;;;ACPM,IAAM,0BAA0D;AAAA,EACrE,KAAK;AAAA,IACH,KAAK;AAAA,EACP;AAAA,EACA,aAAa;AAAA,IACX,eAAe;AAAA,MACb,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,oBAAoB;AAAA,MAClB,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,mBAAmB;AAAA,MACjB,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACF;;;ACxBO,IAAM,8BAAiE;AAAA,EAC5E,aAAa;AAAA,IACX,eAAe;AAAA,MACb,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,oBAAoB;AAAA,MAClB,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,mBAAmB;AAAA,MACjB,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACF;;;AC1BO,IAAM,cAAgC,aAAa;AAAA,EACxD,SAAS;AAAA,EACT,aAAa;AAAA,IACX,UAAU;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,oBAAoB;AAAA,QAClB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,oBAAoB;AAAA,QAClB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,oBAAoB;AAAA,QAClB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,oBAAoB;AAAA,QAClB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,oBAAoB;AAAA,QAClB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,KAAK;AAAA,MACH,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,oBAAoB;AAAA,QAClB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AAAA,EACA,gBAAgB;AAClB,CAAC;;;ACzRM,IAAM,eAAiC,aAAa;AAAA,EACzD,SAAS;AAAA,EACT,aAAa;AAAA,IACX,UAAU;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,WAAW;AAAA,MACT,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,KAAK;AAAA,MACH,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,KAAK;AAAA,MACH,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBF;AAAA,EACA,gBAAgB;AAClB,CAAC;;;AC3YM,IAAM,eAAiC,aAAa;AAAA,EACzD,SAAS;AAAA,EACT,aAAa;AAAA,IACX,UAAU;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,WAAW;AAAA,MACT,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,KAAK;AAAA,MACH,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,KAAK;AAAA,MACH,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,KAAK;AAAA,MACH,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AAAA,EACA,gBAAgB;AAClB,CAAC;;;ACnXM,IAAM,eAAiC,aAAa;AAAA,EACzD,SAAS;AAAA,EACT,aAAa;AAAA,IACX,UAAU;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AAAA,EACA,gBAAgB;AAClB,CAAC;;;ACrDM,IAAM,gBAAkC,aAAa;AAAA,EAC1D,SAAS;AAAA,EACT,aAAa;AAAA,IACX,UAAU;AAAA,MACR,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,KAAK;AAAA,MACL,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,UAAU;AAAA,QACV,SAAS;AAAA,MACX;AAAA,MACA,QAAQ;AAAA,QACN,SAAS;AAAA,MACX;AAAA,MACA,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AAAA,EACA,gBAAgB;AAClB,CAAC;;;ACtDM,IAAM,0BAA0D;AAAA,EACrE,KAAK;AAAA,IACH,KAAK;AAAA,EACP;AAAA,EACA,aAAa;AAAA,IACX,UAAU;AAAA,MACR,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,WAAW;AAAA,MACT,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,KAAK;AAAA,MACH,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,KAAK;AAAA,MACH,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,KAAK;AAAA,MACH,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,KAAK;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACF;;;AC1IO,IAAM,8BAAiE;AAAA,EAC5E,aAAa;AAAA,IACX,UAAU;AAAA,MACR,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,WAAW;AAAA,MACT,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,KAAK;AAAA,MACH,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,UAAU;AAAA,MACR,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,MACN,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,KAAK;AAAA,MACH,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,OAAO;AAAA,MACL,iBAAiB;AAAA,QACf,SAAS;AAAA,MACX;AAAA,MACA,uBAAuB;AAAA,QACrB,SAAS;AAAA,MACX;AAAA,IACF;AAAA,EACF;AACF;;;ACrHA,SAA8B,yBAAwB;AACtD,SAAsC,kBAAmC;AACzE,SAAQ,KAAAA,UAAQ;;;8BCqEhB,SAASC,EAAOC,GAAAA;AAAAA,WAkDNC,EAAUC,IAAMC,IAAWC,IAAAA;AAAAA,QAElCC,GADGC,IAAAA,CAAAA;AAAAA,QAEAC,MAAMC,QAAQN,EAAAA;AAAAA,aAEVA,GAAKO,OAAON,EAAAA;AAAAA,SAEfE,KAAKH;AAETI,QADYF,KAAYC,EAAEK,YAAAA,IAAgBL,CAAAA,IAC/BH,GAAKG,CAAAA;AAAAA,SAEZA,KAAKF,IAAW;AAAA,UACdQ,IAAMP,KAAYC,EAAEK,YAAAA,IAAgBL,GACpCO,IAA4BT,GAAWE,CAAAA;AAC7CC,QAAIK,CAAAA,IAAOA,KAAOL,KAAuB,YAAA,OAATM,IAAoBX,EAAUK,EAAIK,CAAAA,GAAMC,GAAc,aAAPD,CAAAA,IAAoBC;IAAAA;AAAAA,WAE7FN;EAAAA;AAAAA,WAcCO,EAASC,IAAaC,IAAQC,GAASC,GAAMC,GAAAA;AAAAA,QACjDC,IAAmD,YAAA,OAAfL,MAA2BC,KAASD,IAAaK,MAAML,IAEzFM,IAAAA,EAAAA,QAA2CL,GAAAA,GAG3CM,IAAUpB,EAAUD,GAAUe,EAAAA,GAG9BO,IAAgB,CAAA;AAEtBL,QAAOA,KAAQI,EAAQJ,OAEtBI,EAAQE,oBAAoB,CAAA,GAAIC,IAAAA,SAAKC,IAAAA;AACrCR,UAAOQ,GAAER,GAAMI,EAAQK,OAAAA,KAAYT;IAAAA,CAAAA,GAGhCI,EAAQM,SACXL,EAAcM,gBAAgBP,EAAQM,OAGnCV,KAAwB,YAAA,OAATA,KAA4C,cAAA,OAAhBA,EAAKY,UAA8C,cAAA,OAAdZ,EAAKa,SACxFb,IAAOc,KAAKC,UAAUf,CAAAA,GACtBK,EAAc,cAAA,IAAkB;AAAA,QAAA;AAKhCA,QAAcD,EAAQY,cAAAA,IAAkBC,mBAEvCC,SAASC,OAAOC,MAAMC,OAAO,WAAWjB,EAAQkB,iBAAiB,UAAA,CAAA,EAAa,CAAA,CAAA;IAAA,SAEvEC,IAAP;IAAOA;AAAAA,WAELnB,EAAQoB,YACXtB,IAAMA,EAAIuB,QAAQ,kBAAkBrB,EAAQoB,UAAU,GAAA,IAGnDpB,EAAQsB,WACXxB,MAAAA,CACGA,EAAIyB,QAAQ,GAAA,IAAO,MAAM,QAC1BvB,EAAQwB,mBAAmBxB,EAAQwB,iBAAiBxB,EAAQsB,MAAAA,IAAU,IAAIG,gBAAgBzB,EAAQsB,MAAAA,MAGnFtB,EAAQ0B,SAASA,OAElB5B,GAAK,EACrB6B,SAAShC,KAAWK,EAAQ2B,UAAU,OAAOC,YAAAA,GAC7CC,MAAMjC,GACNS,SAASzB,EAAUoB,EAAQK,SAASJ,GAAAA,IAAe,GACnD6B,aAAa9B,EAAQ+B,kBAAkB,YAAYlC,EAAAA,CAAAA,EACjDmC,KAAAA,SAAMC,IAAAA;AAAAA,eACGjD,MAAKiD;AACM,sBAAA,OAAVA,GAAIjD,EAAAA,MAAkBe,EAASf,EAAAA,IAAKiD,GAAIjD,EAAAA;AAAAA,aAGxB,YAAxBgB,EAAQkC,gBACXnC,EAASH,OAAOqC,GAAIJ,MACb9B,KAGDkC,GAAIjC,EAAQkC,gBAAgB,MAAA,EAAA,EACjCF,KAAAA,SAAMpC,IAAAA;AACNG,UAASH,OAAOA,IAEhBG,EAASH,OAAOc,KAAKyB,MAAMvC,EAAAA;MAAAA,CAAAA,EAE3BwC,MAAMC,MAAAA,EACNL,KAAAA,WAAAA;AAAAA,gBACWhC,EAAQsC,iBAAiBtC,EAAQsC,eAAeL,GAAIM,MAAAA,IAAUN,GAAIO,MACjEzC,IAAW0C,QAAQC,OAAO3C,CAAAA;MAAAA,CAAAA;IAAAA,CAAAA;EAAAA;AAAAA,SArJ1CpB,IAAWA,KAAY,CAAA,GAOvBa,EAASmD,UAAUnD,GAGnBA,EAASoD,MAAAA,SAAO9C,IAAKJ,IAAAA;AAAAA,WAAWF,EAASM,IAAKJ,IAAQ,KAAA;EAAA,GAGtDF,EAASqD,SAAAA,SAAU/C,IAAKJ,IAAAA;AAAAA,WAAWF,EAASM,IAAKJ,IAAQ,QAAA;EAAA,GAGzDF,EAASsD,OAAAA,SAAQhD,IAAKJ,IAAAA;AAAAA,WAAWF,EAASM,IAAKJ,IAAQ,MAAA;EAAA,GAGvDF,EAASQ,UAAAA,SAAWF,IAAKJ,IAAAA;AAAAA,WAAWF,EAASM,IAAKJ,IAAQ,SAAA;EAAA,GAG1DF,EAASuD,OAAAA,SAAQjD,IAAKF,IAAMF,IAAAA;AAAAA,WAAWF,EAASM,IAAKJ,IAAQ,QAAQE,EAAAA;EAAAA,GAGrEJ,EAASwD,MAAAA,SAAOlD,IAAKF,IAAMF,IAAAA;AAAAA,WAAWF,EAASM,IAAKJ,IAAQ,OAAOE,EAAAA;EAAAA,GAGnEJ,EAASyD,QAAAA,SAASnD,IAAKF,IAAMF,IAAAA;AAAAA,WAAWF,EAASM,IAAKJ,IAAQ,SAASE,EAAAA;EAAAA,GAGvEJ,EAAS0D,MAAMT,QAAQS,IAAIC,KAAKV,OAAAA,GAQhCjD,EAAS4D,SAAAA,SAAUC,IAAAA;AAAAA,WAA2BA,GAAGC,MAAMH,KAAKE,IAAIA,EAAAA;EAAAA,GAuHhE7D,EAAS+D,cAA4D,cAAA,OAAnBC,kBAAgCA,kBAAkBnB,QAMpG7C,EAASb,WAAWA,GAKpBa,EAASd,SAASA,GAEXc;AAAAA,EAGOd;;;AD7Of,IAAM,eAAeD,GAClB,OAAO,EACP,UAAU,CAAC,UAAU;AACpB,MAAI;AACF,WAAO,OAAO,KAAK;AAAA,EACrB,SAAS,OAAP;AACA,WAAO;AAAA,EACT;AACF,CAAC,EACA,KAAKA,GAAE,OAAO,CAAC;AAElB,IAAM,kBAAkBA,GAAE,OAAO;AAAA,EAC/B,QAAQA,GAAE,OAAO;AAAA,EACjB,UAAUA,GAAE,OAAO;AAAA,EACnB,UAAU;AAAA,EACV,SAASA,GAAE,OAAO;AAAA,EAClB,OAAOA,GAAE,OAAO;AAAA,EAChB,UAAU;AAAA,EACV,YAAYA,GAAE,OAAO;AAAA,EACrB,QAAQA,GAAE,OAAO;AAAA,EACjB,aAAaA,GAAE,OAAO;AAAA,EACtB,WAAWA,GAAE,OAAO;AAAA,EACpB,YAAYA,GAAE,QAAQ;AAAA,EACtB,gBAAgBA,GAAE,OAAO;AAC3B,CAAC;AAED,IAAM,OAAOA,GAAE,OAAO;AAAA,EACpB,QAAQA,GAAE,OAAO;AAAA,EACjB,QAAQA,GAAE,OAAO;AAAA,EACjB,aAAaA,GAAE,OAAO;AAAA,EACtB,aAAaA,GAAE,OAAO;AACxB,CAAC;AAED,IAAM,YAAY,KAAK,OAAO;AAAA,EAC5B,KAAKA,GAAE,OAAO;AAAA,IACZ,OAAOA,GAAE,OAAO;AAAA,IAChB,MAAMA,GAAE,OAAO;AAAA,IACf,WAAWA,GAAE,OAAO;AAAA,IACpB,QAAQA,GAAE,OAAO;AAAA,EACnB,CAAC;AACH,CAAC;AAED,IAAM,cAAc,KAAK,OAAO;AAAA,EAC9B,OAAOA,GAAE,OAAO;AAAA,IACd,kBAAkBA,GAAE,OAAO;AAAA,MACzB,UAAUA,GAAE,OAAO;AAAA,IACrB,CAAC;AAAA,IACD,YAAY,gBAAgB,MAAM;AAAA,EACpC,CAAC;AACH,CAAC;AAED,IAAM,iBAAiBA,GAAE,mBAAmB,WAAW;AAAA,EACrD,YAAY,OAAO;AAAA,IACjB,KAAKA,GAAE,UAAU,EAAE,SAAS;AAAA,IAC5B,SAASA,GAAE,QAAQ,IAAI;AAAA,EACzB,CAAC;AAAA,EACD,UAAU,OAAO;AAAA,IACf,OAAOA,GAAE,UAAU,EAAE,SAAS;AAAA,IAC9B,SAASA,GAAE,QAAQ,KAAK;AAAA,EAC1B,CAAC;AACH,CAAC;AAED,IAAM,yBAAyBA,GAAE,OAAO;AAAA;AAAA,EAEtC,aAAaA,GAAE,OAAO,EAAE,UAAU,CAAC,QAAQ,EAAC,SAAS,KAAK,IAAI,EAAE;AAAA,EAChE,mBAAmBA,GAAE,OAAO;AAC9B,CAAC;AA6BM,IAAM,gBAAN,MAAoB;AAAA,EAGzB,YACY,QACA,iBACV;AAFU;AACA;AAEV,SAAK,OAAO,wBAAS,OAAO,EAAC,SAAS,OAAO,IAAI,IAAG,CAAC;AAAA,EACvD;AAAA,EAPU;AAAA,EASV,aAAagF,OAA+D;AAC1E,WAAO,CAAC,CAAC,KAAK,iBAAiBA,MAAK,WAAW,KAAK,CAAC,CAAC,KAAK,iBAAiBA,MAAK,WAAW;AAAA,EAC9F;AAAA,EAEA,MAAM,cAAc,OAAyD;AAC3E,QAAI,MAAM,MAAM,WAAW,WAAW,GAAG;AACvC,YAAM,IAAI,4BAA4B,KAAK;AAAA,IAC7C;AACA,UAAM,YAAY,KAAK,0BAA0B,MAAM,WAAW;AAClE,UAAM,WAAW,MAAM,MAAM,iBAAiB;AAC9C,UAAM,aAAa,MAAM,MAAM,WAAW,MAAM,GAAG,QAAQ;AAC3D,UAAM,iBAAiB,KAAK,kBAAkB,UAAU;AACxD,UAAM,MAAM,MAAM,UAAU,cAAc,MAAM,QAAQ,cAAc;AACtE,WAAO,WAAW,KAAK,MAAM,aAAa;AAAA,MACxC,WAAW,IAAI,UAAU,SAAS;AAAA,MAClC,QAAQ,IAAI,UAAU,SAAS;AAAA,IACjC,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,eAAeA,OAGa;AAChC,UAAM,SAAS,KAAK,cAAcA,MAAK,WAAW;AAClD,UAAM,SAAS,KAAK,cAAcA,MAAK,WAAW;AAClD,UAAM,WAAW,MAAM,KAAK,KAAK,IAAI,kBAAkB,UAAU,QAAQ;AACzE,UAAM,QAAQ,YAAY,MAAM,KAAK,SAAS,SAAS,MAAMA,KAAI,CAAC;AAClE,WAAO,KAAK,YAAY,KAAK;AAAA,EAC/B;AAAA,EAEA,MAAM,oBAAoBA,OAAoE;AAC5F,UAAM,SAAS,KAAK,cAAcA,MAAK,WAAW;AAClD,UAAM,SAAS,KAAK,cAAcA,MAAK,WAAW;AAClD,UAAM,WAAW,MAAM,KAAK,KAAK,IAAI,+BAA+B,UAAU,QAAQ;AACtF,UAAM,mBAAmB,uBAAuB,MAAM,SAAS,IAAI;AACnE,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,eAAe,OAA2D;AAC9E,UAAM,WAAW,MAAM,KAAK,KAAK,IAAI,sBAAsB,MAAM,QAAQ;AACzE,UAAM,CAAC,GAAG,IAAI,eAAe,MAAM,EAAE,OAAO,CAAC,EAAE,MAAM,SAAS,IAAI;AAClE,WAAO,KAAK,YAAY,GAAG;AAAA,EAC7B;AAAA,EAEO,cAAc,UAA4B;AAC/C,WAAO,KAAK,cAAc,QAAQ,EAAE;AAAA,EACtC;AAAA;AAAA,EAGU,SACR,OACAA,OACA;AACA,WAAO;AAAA,MACL,GAAG;AAAA,MACH,aAAaA,MAAK;AAAA,MAClB,aAAaA,MAAK;AAAA,MAClB,QAAQ,KAAK,cAAcA,MAAK,WAAW;AAAA,MAC3C,QAAQ,KAAK,cAAcA,MAAK,WAAW;AAAA,IAC7C;AAAA,EACF;AAAA;AAAA,EAGU,YAER,MAAY;AACZ,WAAO;AAAA,MACL,GAAG;AAAA,MACH,aAAa,KAAK,cAAc,KAAK,MAAM;AAAA,MAC3C,aAAa,KAAK,cAAc,KAAK,MAAM;AAAA,IAC7C;AAAA,EACF;AAAA;AAAA;AAAA,EAIU,cAAc,KAAuB;AAC7C,eAAW,CAAC,KAAK,UAAU,KAAK,OAAO,QAAQ,KAAK,OAAO,WAAW,GAAG;AACvE,UAAI,WAAW,QAAQ;AAAK,eAAO;AAAA,IACrC;AACA,UAAM,IAAI,MAAM,8BAA8B,KAAK;AAAA,EACrD;AAAA,EAEU,0BAA0B,UAAoB;AACtD,UAAM,UAAU,KAAK,cAAc,QAAQ,EAAE,eAAe;AAC5D,UAAM,WAAW,KAAK,gBAAgB,QAAQ;AAC9C,WAAO,wBAAwB,QAAQ,SAAS,QAAQ;AAAA,EAC1D;AAAA,EAEU,iBAAiB,UAAoB;AAC7C,WAAO,KAAK,OAAO,YAAY,QAAQ;AAAA,EACzC;AAAA,EAEU,cAAc,UAAoB;AAC1C,UAAM,aAAa,KAAK,iBAAiB,QAAQ;AACjD,QAAI;AAAY,aAAO;AACvB,UAAM,IAAI,MAAM,2BAA2B,UAAU;AAAA,EACvD;AAAA,EAEU,kBACR,YACQ;AACR,UAAM,SAAS;AACf,UAAM,iBAAiB,WACpB,IAAI,CAAC,SAAS,KAAK,cAAc,EACjC,IAAI,CAAC,MAAM,EAAE,QAAQ,MAAM,EAAE,CAAC,EAC9B,KAAK,EAAE;AACV,WAAO,SAAS;AAAA,EAClB;AAAA,EAEA,MAAM,SAAS,OAAoD;AACjE,UAAM,WAAW,MAAM;AACvB,UAAM,YAAY,KAAK,0BAA0B,QAAQ;AAIzD,UAAM,MAAM,MAAM,KAAK,eAAe,EAAC,QAAQ,MAAM,OAAM,CAAC;AAC5D,QAAI,CAAC,IAAI;AAAS,YAAM,IAAI,yBAAyB,GAAG;AAExD,UAAM,kBAAkB,KAAK,kBAAkB,IAAI,MAAM,UAAU;AACnE,UAAM,QAAQ,MAAM,IAAI,UAAU,SAAS;AAE3C,UAAM,uBAAuB,UAAU,oBAAoB;AAAA,MACzD,IAAI;AAAA,MACJ;AAAA,MACA,EAAC,MAAK;AAAA,IACR;AACA,WAAO,kBAAkB,sBAAsB,EAAC,UAAU,UAAU,UAAU,SAAQ,CAAC;AAAA,EACzF;AACF;AAEO,IAAM,8BAAN,cAA0C,MAAM;AAAA,EACrD,YAA+B,MAA0B;AACvD,UAAM,wBAAwB;AADD;AAAA,EAE/B;AACF;AACO,IAAM,2BAAN,cAAuC,MAAM;AAAA,EAClD,YAA+B,MAA4B;AACzD,UAAM,oBAAoB;AADG;AAAA,EAE/B;AACF;;;AE7PA;AAAA,EAkBE;AAAA,OACK;AACP;AAAA,EAGE;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,cAAAC;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA,qBAAAC;AAAA,OACK;AAWP,SAAQ,SAAAC,cAAY;;;ACrDpB,SAAQ,aAAY;;;ACAb,IAAK,WAAL,kBAAKC,cAAL;AACL,EAAAA,oBAAA,UAAO,KAAP;AACA,EAAAA,oBAAA,SAAM,KAAN;AACA,EAAAA,oBAAA,WAAQ,KAAR;AAHU,SAAAA;AAAA,GAAA;;;ADQL,IAAM,SAAN,MAAa;AAAA,EAClB,YACS,UACA,YACP;AAFO;AACA;AAAA,EACN;AAAA,EAEH,UAAkB;AAChB,QAAI,KAAK,2BAA4B;AACnC,aAAO;AAAA,IACT,WAAW,KAAK,4BAA6B;AAC3C,YAAM,iBAAiB,KAAK,WACzB;AAAA,QAAI,CAAC,MACJ,MAAM,aAAa,CAAC,WAAW,QAAQ,GAAG,CAAC,EAAE,SAAS,EAAE,MAAM,CAAC,EAAE,QAAQ,MAAM,EAAE;AAAA,MACnF,EACC,KAAK,EAAE;AACV,aAAO,OAAO;AAAA,IAChB,OAAO;AAEL,aAAO,MAAM,aAAa,CAAC,OAAO,GAAG,CAAC,KAAK,QAAQ,CAAC;AAAA,IACtD;AAAA,EACF;AACF;;;ADkCO,IAAM,mBAAN,MAAmE;AAAA,EAMxE,YACY,QACA,aACA,QAAQ,IAAI,WAAW,WAAW,GAC5C;AAHU;AACA;AACA;AAEV,SAAK,YAAY;AAAA,EACnB;AAAA;AAAA,EAVU,QAGJ,CAAC;AAAA,EASP,MAAM,WAAW,OAAgD;AAC/D,UAAM,cAAc,MAAM,SAAS;AACnC,UAAM,cAAc,MAAM,SAAS;AAEnC,UAAM,mBAAmB,MAAM,KAAK,uBAAuB,EAAC,aAAa,YAAW,CAAC;AACrF,UAAM,YAA0B;AAAA,MAC9B,MAAM;AAAA,MACN,YAAY;AAAA,QACV,WAAW;AAAA,QACX,SAAS;AAAA,MACX;AAAA,IACF;AAEA,UAAM,aAA2B;AAAA,MAC/B,MAAM;AAAA,IACR;AAEA,WAAO;AAAA,MACL,SAAS,CAAC,YAAY,SAAS;AAAA,IACjC;AAAA,EACF;AAAA,EAEU,cAAc;AACtB,SAAK,QAAQ,CAAC;AACd,eAAW,eAAe,KAAK,OAAO,aAAa;AACjD,iBAAW,eAAe,KAAK,OAAO,aAAa;AACjD,YAAI,gBAAgB;AAAa;AACjC,aAAK,MAAM,KAAK;AAAA,UACd,UAAU,KAAK,OAAO,YAAY,WAAW,EAAE;AAAA,UAC/C,UAAU,KAAK,OAAO,YAAY,WAAW,EAAE;AAAA,QACjD,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA,EAEU,iBAAiB,UAAsD;AAC/E,UAAM,aAAa,KAAK,OAAO,YAAY,QAAQ;AACnD,WAAO;AAAA,EACT;AAAA,EAEU,cAAc,UAA0C;AAChE,UAAM,aAAa,KAAK,iBAAiB,QAAQ;AACjD,QAAI;AAAY,aAAO;AACvB,UAAM,IAAI,MAAM,kCAAkC,UAAU;AAAA,EAC9D;AAAA,EAEU,cAAc,OAAsB;AAC5C,kBAAc,KAAK;AACnB,QAAI,CAAC,KAAK,iBAAiB,MAAM,UAAU,MAAM,QAAQ,GAAG;AAC1D,YAAM,IAAI;AAAA,QACR,6BAA6B,MAAM,SAAS,aAAa,MAAM,SAAS;AAAA,MAC1E;AAAA,IACF;AAAA,EACF;AAAA,EAEU,cAAc,UAAoB;AAC1C,WAAO,KAAK,cAAc,QAAQ,EAAE;AAAA,EACtC;AAAA;AAAA,EAGU,kBAAkB,UAAqE;AAC/F,UAAM,aAAa,KAAK,cAAc,QAAQ;AAC9C,UAAM,WAAW,KAAK,YAAY,QAAQ;AAC1C,QAAI,WAAW,oBAAoB;AACjC,aAAO,4BAA4B,QAAQ,WAAW,mBAAmB,SAAS,QAAQ;AAAA,IAC5F;AACA,QAAI,WAAW,cAAc;AAC3B,aAAO,sBAAsB,QAAQ,WAAW,aAAa,SAAS,QAAQ;AAAA,IAChF;AACA,QAAI,WAAW,aAAa;AAC1B,aAAO,qBAAqB,QAAQ,WAAW,YAAY,SAAS,QAAQ;AAAA,IAC9E;AACA,UAAM,IAAI,MAAM,+BAA+B;AAAA,EACjD;AAAA,EAEU,0BAA0B,UAAoB;AACtD,UAAM,aAAa,KAAK,cAAc,QAAQ;AAC9C,UAAM,WAAW,KAAK,YAAY,QAAQ;AAC1C,WAAO,wBAAwB,QAAQ,WAAW,eAAe,SAAS,QAAQ;AAAA,EACpF;AAAA,EAEA,cAAc,OAA0B;AACtC,WAAO,KAAK,iBAAiB,KAAK;AAAA,EACpC;AAAA,EAEA,iBAAiB,OAA0B;AACzC,UAAM,aAAa,KAAK,iBAAiB,MAAM,QAAQ;AACvD,QAAI,CAAC;AAAY,aAAO;AACxB,WAAO,WAAW,MAAM,OAAO,KAAK;AAAA,EACtC;AAAA,EAEA,iBAAiB,UAAoB,UAA6B;AAChE,UAAM,gBAAgB,KAAK,iBAAiB,SAAS,QAAQ;AAC7D,QAAI,CAAC;AAAe,aAAO;AAC3B,UAAM,gBAAgB,KAAK,iBAAiB,SAAS,QAAQ;AAC7D,QAAI,CAAC;AAAe,aAAO;AAC3B,QAAI,CAAC,cAAc,MAAM,OAAO,QAAQ;AAAG,aAAO;AAClD,QAAI,CAAC,cAAc,MAAM,OAAO,QAAQ;AAAG,aAAO;AAClD,WAAO,cAAc,QAAQ,cAAc;AAAA,EAC7C;AAAA,EAEU,WAAW,MAAyB;AAC5C,QAAI,SAAS;AAAW,YAAM,IAAI,MAAM,mBAAmB;AAC3D,QAAI,SAAS;AAAQ;AACrB,QAAI,SAAS;AAAO;AACpB,UAAM,IAAI,MAAM,qBAAqB,MAAM;AAAA,EAC7C;AAAA,EAEA,MAAM,cAAc,OAA8C;AAChE,UAAM,WAAW,KAAK,WAAW,MAAM,IAAI;AAC3C,UAAM,SAAS,IAAI,OAAO,UAAU,CAAC,CAAC;AACtC,UAAM,WAAW,MAAM;AACvB,UAAM,WAAW,MAAM;AACvB,UAAM,cAAc,MAAM,SAAS;AACnC,UAAM,cAAc,MAAM,SAAS;AACnC,UAAM,SAAS,KAAK,cAAc,WAAW;AAE7C,UAAM,SAAS,KAAK,kBAAkB,WAAW;AAGjD,UAAM,YAAY,oBAAoB,UAAU,GAAG;AACnD,UAAM,eAAe,oBAAoB,UAAU,GAAG;AACtD,UAAM,gBAAgB,MAAM;AAC5B,UAAM,aAAa;AAEnB,UAAM,YAAY,KAAK;AAAA,MACrB;AAAA,QACE;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAIA,UAAM,+BAA+B,YAAY;AAC/C,YAAM,kBAAkB,MAAM,cAAc,iBAAiB,SAAS,KAAK,OAAO,CAAC;AAEnF,UAAI;AAA2B;AAE/B,UAAI,oBAAoB,OAAO,CAAC;AAAG;AACnC,YAAM,yBAAyB,KAAK,0BAA0B,WAAW;AACzE,YAAM,oBAAoB,MAAM,uBAAuB,kBAAkB,MAAM;AAC/E,YAAM,mBAAmB,kBAAkB,SAAS;AACpD,UAAI,oBAAoB,kBAAkB;AACxC,cAAM,IAAI,kCAAkC,iBAAiB,gBAAgB;AAAA,MAC/E;AAAA,IACF;AAGA,UAAM,CAAC,SAAS,IAAI,MAAM,QAAQ,IAAI;AAAA,MACpC,OAAO,UAAU,WAAW,KAAK;AAAA,MACjC,6BAA6B;AAAA,IAC/B,CAAC;AAED,WAAOH,YAAW,KAAK,aAAa;AAAA,MAClC,WAAW,UAAU,UAAU,SAAS;AAAA,MACxC,QAAQ,UAAU,WAAW,SAAS;AAAA,IACxC,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,UAAU,OAA6D;AAC3E,UAAM;AACN,UAAM,SAAS,IAAI,OAAO,UAAU,CAAC,CAAC;AAEtC,UAAM,WAAW,MAAM,UAAU;AACjC,UAAM,WAAW,MAAM;AACvB,UAAM,cAAc,SAAS;AAC7B,UAAM,cAAc,SAAS;AAE7B,UAAM,YAAY,MAAM;AAGxB,UAAM,eAAe,MAAM,gBAAgB,oBAAoB,UAAU,GAAG;AAC5E,UAAM,aAAa,MAAM,cAAc;AACvC,UAAM,gBAAgB,cAAc,MAAM,CAAC;AAE3C,UAAM,aAAa,KAAK;AAAA,MACtB;AAAA,QACE;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAEA,UAAM,WAAW,KAAK,kBAAkB,WAAW;AACnD,UAAM,QAAQ,MAAM,SAAS,SAAS,UAAU;AAChD,UAAM,mBAAmB,eAAe;AAAA,MACtC;AAAA,MACA,MAAM,QAAQ,iBAAiB,SAAS;AAAA,IAC1C;AACA,UAAM,mBAAmB,yBAAyB,kBAAkB,QAAQ;AAE5E,UAAM,MAAqB,CAAC;AAC5B,eAAW,aAAa,MAAM,eAAe;AAC3C,YAAM,SAAS,eAAe,WAAW,UAAU,UAAU,YAAY,SAAS,CAAC;AACnF,UAAI,UAAU,WAAW,IAAI;AAAA,IAC/B;AAEA,UAAM,SAAsC;AAAA,MAC1C;AAAA,MACA,WAAW;AAAA,IACb;AACA,WAAO;AAAA,EACT;AAAA,EAEA,YAAY,OAA0C;AACpD,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AAAA,EAEA,MAAM,SAAS,OAAyD;AACtE,UAAM;AACN,UAAM,SAAS,IAAI,OAAO,UAAU,CAAC,CAAC;AAEtC,UAAM,WAAW,MAAM;AACvB,UAAM,WAAW,MAAM;AACvB,UAAM,cAAc,MAAM,SAAS;AACnC,UAAM,cAAc,MAAM,SAAS;AAGnC,UAAM,YAAY,eAAe,WAAW,UAAU,cAAc;AACpE,UAAM,eAAe,eAAe,WAAW,UAAU,OAAO,CAAC,CAAC;AAClE,UAAM,aAAa;AACnB,UAAM,gBAAgB,cAAc,MAAM,CAAC;AAE3C,UAAM,YAAY,KAAK;AAAA,MACrB;AAAA,QACE;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAEA,UAAM,WAAW,KAAK,kBAAkB,WAAW;AACnD,UAAM,QAAQ,MAAM,SAAS,SAAS,SAAS;AAG/C,UAAM,cAAc,eAAe,WAAW,UAAU,MAAM,MAAM,YAAY,SAAS,CAAC;AAC1F,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,YAAY,OAA0C;AAC1D,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,aAAa,OAA6D;AAC9E,QAAI,iBAAiB,MAAM,KAAK,GAAG;AACjC,aAAO,eAAe,WAAW,MAAM,OAAO,UAAU;AAAA,IAC1D;AACA,UAAM,WAAW,MAAM,MAAM;AAC7B,UAAM,SAAS,KAAK,kBAAkB,QAAQ;AAC9C,WAAO,KAAK,MAAM,SAAS,MAAM,KAAK,EAAE,UAAU,MAAM,SAAS,OAAO,OAAO;AAAA,EACjF;AAAA,EACA,aAAa,OAA6D;AACxE,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AAAA,EACA,MAAM,aAAa,OAA4C;AAC7D,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,SAAS,OAAqD;AAClE,SAAK,cAAc,KAAK;AACxB,UAAM,cAAc,MAAM;AAC1B,UAAM,WAAW,KAAK,WAAW,MAAM,IAAI;AAC3C,UAAM,SAAS,IAAI,OAAO,UAAU,CAAC,CAAC;AACtC,QAAI;AAA6B,YAAM,IAAI,MAAM,0BAA0B;AAE3E,UAAM,WAAW,KAAK,YAAY,MAAM,WAAW;AACnD,UAAM,OAAO,MAAM;AACnB,UAAM,QAAQ,iBAAiB,MAAM,QAAQ,IACzC,MAAM,UAAU,IAAI,MAAM,IAAI,SAAS,EAAE,WACzC,MAAM,IAAI,UAAU;AAExB,UAAM,YAAY,KAAK,eAAe,OAAO,MAAM;AACnD,UAAM,MAAM,KAAK,kBAAkB,KAAK;AACxC,UAAM,gBAAgB,MAAM;AAE5B,UAAM,SAAS,KAAK,kBAAkB,MAAM,WAAW;AAEvD,UAAM,uBAAuB,MAAM,OAAO,oBAAoB;AAAA,MAC5D;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,WAAOC,mBAAkB,sBAAsB,EAAC,UAAU,UAAU,YAAW,CAAC;AAAA,EAClF;AAAA,EAEU,kBAAkB,OAA0C;AACpE,WAAO;AAAA,MACL,YAAY,MAAM,IAAI,OAAO;AAAA,MAC7B,WAAW,MAAM,IAAI,UAAU;AAAA,IACjC;AAAA,EACF;AAAA,EAEA,MAAgB,uBAAuB;AAAA,IACrC;AAAA,IACA;AAAA,EACF,GAG4B;AAC1B,UAAM,SAAS,KAAK,cAAc,WAAW;AAC7C,UAAM,cAAc,MAAM,KAAK,0BAA0B,WAAW,EAAE,kBAAkB,MAAM;AAC9F,UAAM,aAAa,eAAe;AAAA,MAChC,kBAAkB,WAAW;AAAA,MAC7B,YAAY,SAAS;AAAA,IACvB;AACA,WAAO;AAAA,EACT;AAAA;AAAA,EAGU,iBAAiB,QAAgB,eAA8B;AACvE,QAAI,aAAa,aAAa,GAAG;AAC/B,UAAI,OAAO,2BAA4B;AACrC,cAAM,UAAU,QAAQ,WAAW,EAAE;AAAA,UACnC,cAAc,gBAAgB;AAAA,UAC9B,cAAc;AAAA,QAChB;AACA,eAAO,QAAQ,QAAQ;AAAA,MACzB;AACA,UAAI,OAAO,0BAA2B;AACpC,YAAI,cAAc,gBAAgB,YAAY,CAAC,GAAG;AAChD,gBAAM,eAAe;AACrB,iBAAOC,OAAM,SAASA,OAAM,aAAa,CAAC,UAAU,OAAO,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;AAAA,QAClF;AAAA,MACF;AAAA,IACF;AACA,WAAOA,OAAM,SAAS,IAAI;AAAA,EAC5B;AAAA,EAEU,eAAe,OAA4B,QAAiC;AACpF,UAAM,WAAW,MAAM,UAAU;AACjC,UAAM,SAAS,KAAK,cAAc,MAAM,WAAW;AACnD,UAAM,aAAaA,OAAM,SAAS,IAAI;AAEtC,UAAM,eAAe,KAAK,iBAAiB,QAAQ,MAAM,aAAa;AAEtE,UAAM,KAAKA,OAAM,QAAQ,iBAAiB,MAAM,UAAU,CAAC;AAC3D,UAAM,WAAW,MAAM,UAAU;AACjC,UAAM,cAAc,yBAAyB,MAAM,cAAc,QAAQ,EAAE;AAC3E,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ,OAAO,QAAQ;AAAA,IACzB;AAAA,EACF;AAAA,EAEA,MAAM,OAAkD;AACtD,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AAAA,EACA,SAAS,UAAwD;AAC/D,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AAAA,EACA,QAAQ,OAAoD;AAC1D,UAAM,cAAc,MAAM,OAAO,MAAM;AACvC,gBAAY,MAAM,OAAO,KAAK;AAC9B,UAAM,SAAS,KAAK,kBAAkB,WAAW;AACjD,WAAO,KAAK,MAAM,SAAS,MAAM,OAAO,KAAK,EAAE,QAAQ,MAAM,QAAQ,OAAO,OAAO;AAAA,EACrF;AACF;AAEA,IAAM,iBAAiB,OAAO,sBAAsB;AAEpD,SAAS,aAAa,eAAwE;AAC5F,SAAO;AAAA,IACL,cAAc,YAAY,KACxB,cAAc,iBAAiB,YAAY,CAAC,KAC5C,cAAc;AAAA,EAClB;AACF;AAgBO,IAAM,oCAAN,cAAgD,MAAM;AAAA,EAC3D,YACkB,iBACA,kBAChB;AACA;AAAA,MACE,wCAAwC,6CAA6C;AAAA,IACvF;AALgB;AACA;AAAA,EAKlB;AACF;;;AGzeO,IAAK,UAAL,kBAAKE,aAAL;AACL,EAAAA,kBAAA,gBAAa,KAAb;AACA,EAAAA,kBAAA,iBAAc,KAAd;AAFU,SAAAA;AAAA,GAAA;;;ACAL,IAAM,oBAAoB;AAAA,EAC/B,GAAG;AAAA,EACH,GAAG;AAAA,EACH,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AACN;;;ACFA,SAAS,UAAkB,SAAAF,cAAa;AAIxC,IAAM,OAAO;AAAA,EACX;AAAA,IACE,UAAU;AAAA,MACR;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,mBAAmB;AAAA,IACnB,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,UAAU;AAAA,MACR;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,UAAU;AAAA,MACR;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,UAAU;AAAA,MACR;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,UAAU;AAAA,MACR;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,UAAU;AAAA,MACR;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,UAAU;AAAA,MACR;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,aAAa;AAAA,IACb,UAAU;AAAA,MACR;AAAA,QACE,WAAW;AAAA,QACX,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,WAAW;AAAA,QACX,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,WAAW;AAAA,QACX,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,aAAa;AAAA,IACb,UAAU;AAAA,MACR;AAAA,QACE,WAAW;AAAA,QACX,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,WAAW;AAAA,QACX,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,WAAW;AAAA,QACX,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,UAAU;AAAA,MACR;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,IACR,WAAW;AAAA,MACT;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,mBAAmB;AAAA,IACnB,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,UAAU;AAAA,MACR;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,IACR,WAAW;AAAA,MACT;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,mBAAmB;AAAA,IACnB,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,UAAU;AAAA,MACR;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,IACR,WAAW;AAAA,MACT;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,mBAAmB;AAAA,IACnB,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,UAAU,CAAC;AAAA,IACX,QAAQ;AAAA,IACR,WAAW;AAAA,MACT;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,mBAAmB;AAAA,IACnB,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,UAAU;AAAA,MACR;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,IACR,WAAW,CAAC;AAAA,IACZ,mBAAmB;AAAA,IACnB,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,UAAU,CAAC;AAAA,IACX,QAAQ;AAAA,IACR,WAAW;AAAA,MACT;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,mBAAmB;AAAA,IACnB,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,UAAU,CAAC;AAAA,IACX,QAAQ;AAAA,IACR,WAAW;AAAA,MACT;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,mBAAmB;AAAA,IACnB,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,UAAU,CAAC;AAAA,IACX,QAAQ;AAAA,IACR,WAAW;AAAA,MACT;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,mBAAmB;AAAA,IACnB,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,UAAU;AAAA,MACR;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,IACR,WAAW;AAAA,MACT;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,mBAAmB;AAAA,IACnB,QAAQ;AAAA,EACV;AAAA,EACA;AAAA,IACE,UAAU;AAAA,MACR;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,MACA;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,IACR,WAAW;AAAA,MACT;AAAA,QACE,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,mBAAmB;AAAA,IACnB,QAAQ;AAAA,EACV;AACF;AAEO,IAAM,oBAAN,MAAwB;AAAA,EAE7B,OAAO,kBAAqC;AAC1C,WAAO,IAAIA,OAAM,UAAU,IAAI;AAAA,EACjC;AAAA,EACA,OAAO,QACL,SACA,kBACU;AACV,WAAO,IAAI,SAAS,SAAS,MAAM,gBAAgB;AAAA,EACrD;AACF;AAVE,cADW,mBACK,OAAM","sourcesContent":["import z from 'zod';\nimport type {StargateV2Config} from './StargateV2Config';\nimport {Coin, Token} from '@layerzerolabs/ui-core';\n\nconst currencySchema = z.object({\n  symbol: z.string(),\n  decimals: z.number(),\n  name: z.string().optional(),\n  address: z.string().optional(),\n});\n\nconst tokenSchema = currencySchema.extend({\n  address: z.string(),\n});\n\nconst contractSchema = z.object({\n  address: z.string(),\n});\n\nconst serializedStargateV2ConfigSchema = z.object({\n  assetId: z.number().int().min(1).max(255),\n  sharedDecimals: z.number(),\n  deployments: z.record(\n    z.object({\n      eid: z.number(),\n      token: currencySchema,\n      lpToken: tokenSchema.optional(),\n      stargatePoolNative: contractSchema.optional(),\n      stargatePool: contractSchema.optional(),\n      stargateOft: contractSchema.optional(),\n      feeLib: contractSchema,\n      tokenMessaging: contractSchema,\n    }),\n  ),\n});\n\nexport type SerializedStargateV2Config = z.input<typeof serializedStargateV2ConfigSchema>;\n\nconst stargateV2ConfigSchema = serializedStargateV2ConfigSchema.transform((data) => {\n  const config: StargateV2Config = {\n    assetId: data.assetId,\n    sharedDecimals: data.sharedDecimals,\n    deployments: {},\n  };\n\n  for (const chainKey in data.deployments) {\n    const deployment = data.deployments[chainKey];\n    config.deployments[chainKey] = {\n      eid: deployment.eid,\n      lpToken:\n        deployment.lpToken &&\n        Token.from({\n          chainKey,\n          symbol: deployment.lpToken.symbol,\n          decimals: deployment.lpToken.decimals,\n          address: deployment.lpToken.address,\n          name: deployment.lpToken.name,\n        }),\n      token: deployment.token.address\n        ? Token.from({\n            chainKey,\n            symbol: deployment.token.symbol,\n            decimals: deployment.token.decimals,\n            address: deployment.token.address,\n            name: deployment.token.name,\n          })\n        : Coin.from({\n            chainKey,\n            decimals: deployment.token.decimals,\n            symbol: deployment.token.symbol,\n          }),\n      feeLib: {\n        address: deployment.feeLib.address,\n      },\n      stargatePool: deployment.stargatePool\n        ? {\n            address: deployment.stargatePool.address,\n          }\n        : undefined,\n      stargatePoolNative: deployment.stargatePoolNative\n        ? {\n            address: deployment.stargatePoolNative.address,\n          }\n        : undefined,\n      stargateOft: deployment.stargateOft\n        ? {\n            address: deployment.stargateOft.address,\n          }\n        : undefined,\n      tokenMessaging: deployment.tokenMessaging,\n    };\n  }\n  return config;\n});\n\nexport function createConfig(\n  input: z.input<typeof serializedStargateV2ConfigSchema>,\n): StargateV2Config {\n  return stargateV2ConfigSchema.parse(input);\n}\n\n// token messaging\nconst serializedStargateV2TokenMessagingSchema = z.object({\n  api: z.object({url: z.string()}),\n  deployments: z.record(\n    z.object({\n      eid: z.number(),\n      tokenMessaging: contractSchema,\n    }),\n  ),\n});\n\nconst stargateV2TokenMessagingSchema = serializedStargateV2TokenMessagingSchema;\n\nexport type SerializedStargateV2TokenMessagingConfig = z.input<\n  typeof serializedStargateV2TokenMessagingSchema\n>;\nexport type StargateV2TokenMessagingConfig = z.output<typeof stargateV2TokenMessagingSchema>;\n\n// staking\nconst serializedStargateV2StakingSchema = z.object({\n  deployments: z.record(\n    z.object({\n      stargateStaking: contractSchema,\n      stargateMultiRewarder: contractSchema,\n    }),\n  ),\n});\n\nexport type SerializedStargateV2StakingSchema = z.input<typeof serializedStargateV2StakingSchema>;\nexport type SerializedStargateV2StakingConfig = z.output<typeof serializedStargateV2StakingSchema>;\n","import type {StargateV2Config} from '../../types/StargateV2Config';\nimport {createConfig} from '../../types/zod';\n\nexport const ETH_TESTNET: StargateV2Config = createConfig({\n  assetId: 13,\n  deployments: {\n    'arbitrum-sepolia': {\n      eid: 40231,\n      token: {\n        name: 'Ether',\n        symbol: 'ETH',\n        decimals: 18,\n      },\n      lpToken: {\n        name: 'ETH-LP',\n        symbol: 'S*ETH',\n        decimals: 18,\n        address: '0xB9E16057deabc08Da98009c8fd17E23bF4D8eE7C',\n      },\n      feeLib: {\n        address: '0x14ae7853Cd69dfd519899a30AA8bA30FA4536453',\n      },\n      tokenMessaging: {\n        address: '0xCf26A197b5353ff886919c2a2FB4c45FE233DD3f',\n      },\n      stargatePoolNative: {\n        address: '0x1E8A86EcC9dc41106d3834c6F1033D86939B1e0D',\n      },\n    },\n    'klaytn-baobab': {\n      eid: 40150,\n      token: {\n        name: 'ETH',\n        symbol: 'OFT Token',\n        decimals: 18,\n        address: '0xE26d6ABA383A7f452D3f66B9A4a51A1dfe79DF2E',\n      },\n      feeLib: {\n        address: '0xcDD249F414D36594121379bC04bad085cC27F271',\n      },\n      tokenMessaging: {\n        address: '0x6C2d1Dc35C69296C0a1661D9f1c757d6Fc3080E8',\n      },\n      stargateOft: {\n        address: '0xf1b69ee3097c6E8CC6487B7667dB818FeDC7b1a9',\n      },\n    },\n    'optimism-sepolia': {\n      eid: 40232,\n      token: {\n        name: 'Ether',\n        symbol: 'ETH',\n        decimals: 18,\n      },\n      lpToken: {\n        name: 'ETH-LP',\n        symbol: 'S*ETH',\n        decimals: 18,\n        address: '0x6c16Bb71e68b33CDABe57f46794344e5840ccC95',\n      },\n      feeLib: {\n        address: '0x6C90B6EDdFCD46818061Aa1Fe13CC30c676e276E',\n      },\n      tokenMessaging: {\n        address: '0xC48c0736C8ae67A8C54DFb01D7ECc7190C12a042',\n      },\n      stargatePoolNative: {\n        address: '0x3C0Dea5955cb490F78e330A213c960cA63f66314',\n      },\n    },\n    sepolia: {\n      eid: 40161,\n      token: {\n        name: 'Sepolia Ether',\n        symbol: 'ETH',\n        decimals: 18,\n      },\n      lpToken: {\n        name: 'ETH-LP',\n        symbol: 'S*ETH',\n        decimals: 18,\n        address: '0x211c9c0bE2abaf38EcDcf626D15660C9D3AE34c6',\n      },\n      feeLib: {\n        address: '0x273e333dd2C17D7fe9822322fAdBBfcBe47b8132',\n      },\n      tokenMessaging: {\n        address: '0xe5EcECEc372382A96Fe8E88fDC52f327e0895245',\n      },\n      stargatePoolNative: {\n        address: '0xa5A8481790BB57CF3FA0a4f24Dc28121A491447f',\n      },\n    },\n  },\n  sharedDecimals: 6,\n});\n","import type {StargateV2Config} from '../../types/StargateV2Config';\nimport {createConfig} from '../../types/zod';\n\nexport const USDC_TESTNET: StargateV2Config = createConfig({\n  assetId: 1,\n  deployments: {\n    'arbitrum-sepolia': {\n      eid: 40231,\n      token: {\n        name: 'USDC',\n        symbol: 'USDC',\n        decimals: 6,\n        address: '0x3253a335E7bFfB4790Aa4C25C4250d206E9b9773',\n      },\n      lpToken: {\n        name: 'USDC-LP',\n        symbol: 'S*USDC',\n        decimals: 6,\n        address: '0x5151CB0fC25f8904a1A4ba69d7D8E8eF45adE211',\n      },\n      feeLib: {\n        address: '0xBd63EDc97649ad7F9e3D4063D24AA76ecf83767c',\n      },\n      tokenMessaging: {\n        address: '0xCf26A197b5353ff886919c2a2FB4c45FE233DD3f',\n      },\n      stargatePool: {\n        address: '0x0d7aB83370b492f2AB096c80111381674456e8d8',\n      },\n    },\n    'klaytn-baobab': {\n      eid: 40150,\n      token: {\n        name: 'Bridged USDC (Stargate)',\n        symbol: 'USDC.e',\n        decimals: 6,\n        address: '0xCfd388493f182211165EB01b92cE5626B6D2eC0F',\n      },\n      feeLib: {\n        address: '0x9352001271a0af0d09a4e7F6C431663A2D5AA9d2',\n      },\n      tokenMessaging: {\n        address: '0x6C2d1Dc35C69296C0a1661D9f1c757d6Fc3080E8',\n      },\n      stargateOft: {\n        address: '0xe19525580913971d220dBa3BbD01eE2A0b1adc6F',\n      },\n    },\n    'optimism-sepolia': {\n      eid: 40232,\n      token: {\n        name: 'USDC',\n        symbol: 'USDC',\n        decimals: 6,\n        address: '0x488327236B65C61A6c083e8d811a4E0D3d1D4268',\n      },\n      lpToken: {\n        name: 'USDC-LP',\n        symbol: 'S*USDC',\n        decimals: 6,\n        address: '0xB9E16057deabc08Da98009c8fd17E23bF4D8eE7C',\n      },\n      feeLib: {\n        address: '0x14ae7853Cd69dfd519899a30AA8bA30FA4536453',\n      },\n      tokenMessaging: {\n        address: '0xC48c0736C8ae67A8C54DFb01D7ECc7190C12a042',\n      },\n      stargatePool: {\n        address: '0x1E8A86EcC9dc41106d3834c6F1033D86939B1e0D',\n      },\n    },\n    sepolia: {\n      eid: 40161,\n      token: {\n        name: 'USDC',\n        symbol: 'USDC',\n        decimals: 6,\n        address: '0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590',\n      },\n      lpToken: {\n        name: 'USDC-LP',\n        symbol: 'S*USDC',\n        decimals: 6,\n        address: '0x0d476322a44F1E6B79dcbB006152c1623f4f19AD',\n      },\n      feeLib: {\n        address: '0xE66B2eFfbc756076fFd1aDaA21Ed5C8FB75eF929',\n      },\n      tokenMessaging: {\n        address: '0xe5EcECEc372382A96Fe8E88fDC52f327e0895245',\n      },\n      stargatePool: {\n        address: '0xa4e97dFd56E0E30A2542d666Ef04ACC102310083',\n      },\n    },\n  },\n  sharedDecimals: 6,\n});\n","import type {StargateV2Config} from '../../types/StargateV2Config';\nimport {createConfig} from '../../types/zod';\n\nexport const USDT_TESTNET: StargateV2Config = createConfig({\n  assetId: 2,\n  deployments: {\n    'arbitrum-sepolia': {\n      eid: 40231,\n      token: {\n        name: 'USDT',\n        symbol: 'USDT',\n        decimals: 18,\n        address: '0x3C0Dea5955cb490F78e330A213c960cA63f66314',\n      },\n      lpToken: {\n        name: 'USDT-LP',\n        symbol: 'S*USDT',\n        decimals: 18,\n        address: '0x73b8263b49CDB160691cCa10a5569aB6360bAB91',\n      },\n      feeLib: {\n        address: '0xf375a930168b5890407B200336c6a76b2F3243c8',\n      },\n      tokenMessaging: {\n        address: '0xCf26A197b5353ff886919c2a2FB4c45FE233DD3f',\n      },\n      stargatePool: {\n        address: '0xC48c0736C8ae67A8C54DFb01D7ECc7190C12a042',\n      },\n    },\n    'bsc-testnet': {\n      eid: 40102,\n      token: {\n        name: 'USDT',\n        symbol: 'USDT',\n        decimals: 6,\n        address: '0xe37Bdc6F09DAB6ce6E4eBC4d2E72792994Ef3765',\n      },\n      lpToken: {\n        name: 'USDT-LP',\n        symbol: 'S*USDT',\n        decimals: 6,\n        address: '0xa0f6D07579D0657031d6A2720CFCa8d46EDF5dA1',\n      },\n      feeLib: {\n        address: '0x95512Dd7a21Be88a7CDBA8B4647FB3fb0Efa2855',\n      },\n      tokenMessaging: {\n        address: '0x1A2dC7f4a90a1266a9C66191CcDB2961a5BdD2ee',\n      },\n      stargatePool: {\n        address: '0x0a0C1221f451Ac54Ef9F21940569E252161a2495',\n      },\n    },\n    'klaytn-baobab': {\n      eid: 40150,\n      token: {\n        name: 'Bridged USDT (Stargate)',\n        symbol: 'USDT',\n        decimals: 18,\n        address: '0xEAFCc3713E7CeF6565f358ad4497A319A2aE30FC',\n      },\n      feeLib: {\n        address: '0x3C0Dea5955cb490F78e330A213c960cA63f66314',\n      },\n      tokenMessaging: {\n        address: '0x6C2d1Dc35C69296C0a1661D9f1c757d6Fc3080E8',\n      },\n      stargateOft: {\n        address: '0x0fd58375f7849487f14F68812DDb35d59E1bAD79',\n      },\n    },\n    'optimism-sepolia': {\n      eid: 40232,\n      token: {\n        name: 'USDT',\n        symbol: 'USDT',\n        decimals: 18,\n        address: '0x9352001271a0af0d09a4e7F6C431663A2D5AA9d2',\n      },\n      lpToken: {\n        name: 'USDT-LP',\n        symbol: 'S*USDT',\n        decimals: 18,\n        address: '0x5151CB0fC25f8904a1A4ba69d7D8E8eF45adE211',\n      },\n      feeLib: {\n        address: '0xBd63EDc97649ad7F9e3D4063D24AA76ecf83767c',\n      },\n      tokenMessaging: {\n        address: '0xC48c0736C8ae67A8C54DFb01D7ECc7190C12a042',\n      },\n      stargatePool: {\n        address: '0x0d7aB83370b492f2AB096c80111381674456e8d8',\n      },\n    },\n    sepolia: {\n      eid: 40161,\n      token: {\n        name: 'USDT',\n        symbol: 'USDT',\n        decimals: 18,\n        address: '0xB15a3F6E64D2CaffAF7927431AB0D1c21e429644',\n      },\n      lpToken: {\n        name: 'USDT-LP',\n        symbol: 'S*USDT',\n        decimals: 18,\n        address: '0xcdA4c6D8A1aA67d061d008ddaA84de2157D61d4a',\n      },\n      feeLib: {\n        address: '0x32F4d65b9DF20480242f40D8A1dfC57145AdEE39',\n      },\n      tokenMessaging: {\n        address: '0xe5EcECEc372382A96Fe8E88fDC52f327e0895245',\n      },\n      stargatePool: {\n        address: '0xc9c7A3Ae8F1059867247a009b32Ad7AAD9a52D1c',\n      },\n    },\n  },\n  sharedDecimals: 6,\n});\n","import type {StargateV2TokenMessagingConfig} from '../../types/zod';\n\nexport const TOKEN_MESSAGING_TESTNET: StargateV2TokenMessagingConfig = {\n  api: {\n    url: 'https://d2l228le2lsgpd.cloudfront.net',\n  },\n  deployments: {\n    'arbitrum-sepolia': {\n      eid: 40231,\n      tokenMessaging: {\n        address: '0xCf26A197b5353ff886919c2a2FB4c45FE233DD3f',\n      },\n    },\n    'bsc-testnet': {\n      eid: 40102,\n      tokenMessaging: {\n        address: '0x1A2dC7f4a90a1266a9C66191CcDB2961a5BdD2ee',\n      },\n    },\n    'klaytn-baobab': {\n      eid: 40150,\n      tokenMessaging: {\n        address: '0x6C2d1Dc35C69296C0a1661D9f1c757d6Fc3080E8',\n      },\n    },\n    'optimism-sepolia': {\n      eid: 40232,\n      tokenMessaging: {\n        address: '0xC48c0736C8ae67A8C54DFb01D7ECc7190C12a042',\n      },\n    },\n    sepolia: {\n      eid: 40161,\n      tokenMessaging: {\n        address: '0xe5EcECEc372382A96Fe8E88fDC52f327e0895245',\n      },\n    },\n  },\n};\n","import type {SerializedStargateV2StakingConfig} from '../../types/zod';\n\nexport const STARGATE_V2_STAKING_TESTNET: SerializedStargateV2StakingConfig = {\n  deployments: {\n    'arbitrum-sepolia': {\n      stargateStaking: {\n        address: '0xB15a3F6E64D2CaffAF7927431AB0D1c21e429644',\n      },\n      stargateMultiRewarder: {\n        address: '0xc9c7A3Ae8F1059867247a009b32Ad7AAD9a52D1c',\n      },\n    },\n    'bsc-testnet': {\n      stargateStaking: {\n        address: '0x3A7f2580675CEEd079b433C3c00EA997A31fB686',\n      },\n      stargateMultiRewarder: {\n        address: '0x55584d5F0E466a5f57d5149647c15c2E99493E74',\n      },\n    },\n    'optimism-sepolia': {\n      stargateStaking: {\n        address: '0xf375a930168b5890407B200336c6a76b2F3243c8',\n      },\n      stargateMultiRewarder: {\n        address: '0xa4e97dFd56E0E30A2542d666Ef04ACC102310083',\n      },\n    },\n    sepolia: {\n      stargateStaking: {\n        address: '0xF39a1dC4018a8106b21547C84133Ea122FE2b1DB',\n      },\n      stargateMultiRewarder: {\n        address: '0x94986cd528d7e17870263dB8FF0fF33e8B1363FD',\n      },\n    },\n  },\n};\n","import type {StargateV2Config} from '../../types/StargateV2Config';\nimport {createConfig} from '../../types/zod';\n\nexport const ETH_SANDBOX: StargateV2Config = createConfig({\n  assetId: 13,\n  deployments: {\n    // no sandbox right now\n  },\n  sharedDecimals: 6,\n});\n","import type {StargateV2Config} from '../../types/StargateV2Config';\nimport {createConfig} from '../../types/zod';\n\nexport const USDC_SANDBOX: StargateV2Config = createConfig({\n  assetId: 1,\n  deployments: {\n    // no sandbox right now\n  },\n  sharedDecimals: 6,\n});\n","import type {StargateV2Config} from '../../types/StargateV2Config';\nimport {createConfig} from '../../types/zod';\n\nexport const USDT_SANDBOX: StargateV2Config = createConfig({\n  assetId: 2,\n  deployments: {\n    // no sandbox right now\n  },\n  sharedDecimals: 6,\n});\n","import type {StargateV2TokenMessagingConfig} from '../../types/zod';\n\nexport const TOKEN_MESSAGING_SANDBOX: StargateV2TokenMessagingConfig = {\n  api: {\n    url: 'https://d1oc18n8di3ccj.cloudfront.net',\n  },\n  deployments: {\n    'bsc-sandbox': {\n      eid: 50102,\n      tokenMessaging: {\n        address: '0x65816bf78E206Cbd3a0542E5E1ddb1484D8d87f8',\n      },\n    },\n    'ethereum-sandbox': {\n      eid: 50121,\n      tokenMessaging: {\n        address: '0xb8b938c4BFDaCc95ec4d76600c7Ea57bbBB8DA52',\n      },\n    },\n    'polygon-sandbox': {\n      eid: 50109,\n      tokenMessaging: {\n        address: '0x65816bf78E206Cbd3a0542E5E1ddb1484D8d87f8',\n      },\n    },\n  },\n};\n","import type {SerializedStargateV2StakingConfig} from '../../types/zod';\n\nexport const STARGATE_V2_STAKING_SANDBOX: SerializedStargateV2StakingConfig = {\n  deployments: {\n    'bsc-sandbox': {\n      stargateStaking: {\n        address: '0x5868B71c225BE428Ae65e48c7d8Ef9e12AB76766',\n      },\n      stargateMultiRewarder: {\n        address: '0xEe06926a58914FFFb4fcC06989d779b7A8102b89',\n      },\n    },\n    'ethereum-sandbox': {\n      stargateStaking: {\n        address: '0x43e3f24Dbe80F661269E7708bE1D1E2b7C1eCf3e',\n      },\n      stargateMultiRewarder: {\n        address: '0x016DA422616858B4de4A35fd2e967BFcda627245',\n      },\n    },\n    'polygon-sandbox': {\n      stargateStaking: {\n        address: '0x5868B71c225BE428Ae65e48c7d8Ef9e12AB76766',\n      },\n      stargateMultiRewarder: {\n        address: '0xEe06926a58914FFFb4fcC06989d779b7A8102b89',\n      },\n    },\n  },\n};\n","import type {StargateV2Config} from '../../types/StargateV2Config';\nimport {createConfig} from '../../types/zod';\n\nexport const ETH_MAINNET: StargateV2Config = createConfig({\n  assetId: 13,\n  deployments: {\n    arbitrum: {\n      eid: 30110,\n      token: {\n        name: 'ETH',\n        symbol: 'ETH',\n        decimals: 18,\n      },\n      lpToken: {\n        name: 'ETH-LP',\n        symbol: 'S*ETH',\n        decimals: 18,\n        address: '0x993614e1c8c9C5AbE49462Ce5702431978Fd767F',\n      },\n      feeLib: {\n        address: '0xda82A31dF339BfDF0123661134b4DB63Cb1706f5',\n      },\n      tokenMessaging: {\n        address: '0x19cFCE47eD54a88614648DC3f19A5980097007dD',\n      },\n      stargatePoolNative: {\n        address: '0xA45B5130f36CDcA45667738e2a258AB09f4A5f7F',\n      },\n    },\n    base: {\n      eid: 30184,\n      token: {\n        name: 'Ether',\n        symbol: 'ETH',\n        decimals: 18,\n      },\n      lpToken: {\n        name: 'ETH-LP',\n        symbol: 'S*ETH',\n        decimals: 18,\n        address: '0x98fB8522d891F43B771e2d27367b41Ba138D0B80',\n      },\n      feeLib: {\n        address: '0x17E450Be3Ba9557F2378E20d64AD417E59Ef9A34',\n      },\n      tokenMessaging: {\n        address: '0x5634c4a5FEd09819E3c46D86A965Dd9447d86e47',\n      },\n      stargatePoolNative: {\n        address: '0xdc181Bd607330aeeBEF6ea62e03e5e1Fb4B6F7C7',\n      },\n    },\n    ethereum: {\n      eid: 30101,\n      token: {\n        name: 'ETH',\n        symbol: 'ETH',\n        decimals: 18,\n      },\n      lpToken: {\n        name: 'ETH-LP',\n        symbol: 'S*ETH',\n        decimals: 18,\n        address: '0xfcb42A0e352a08AbD50b8EE68d01f581B6Dfd80A',\n      },\n      feeLib: {\n        address: '0x3E368B6C95c6fEfB7A16dCc0D756389F3c658a06',\n      },\n      tokenMessaging: {\n        address: '0x6d6620eFa72948C5f68A3C8646d58C00d3f4A980',\n      },\n      stargatePoolNative: {\n        address: '0x77b2043768d28E9C9aB44E1aBfC95944bcE57931',\n      },\n    },\n    flare: {\n      eid: 30295,\n      token: {\n        name: 'WETH',\n        symbol: 'WETH',\n        decimals: 18,\n        address: '0x1502FA4be69d526124D453619276FacCab275d3D',\n      },\n      feeLib: {\n        address: '0xCd4302D950e7e6606b6910Cd232758b5ad423311',\n      },\n      tokenMessaging: {\n        address: '0x45d417612e177672958dC0537C45a8f8d754Ac2E',\n      },\n      stargateOft: {\n        address: '0x8e8539e4CcD69123c623a106773F2b0cbbc58746',\n      },\n    },\n    gravity: {\n      eid: 30294,\n      token: {\n        name: 'WETH',\n        symbol: 'WETH',\n        decimals: 18,\n        address: '0xf6f832466Cd6C21967E0D954109403f36Bc8ceaA',\n      },\n      feeLib: {\n        address: '0x77C71633C34C3784ede189d74223122422492a0f',\n      },\n      tokenMessaging: {\n        address: '0x9c2dc7377717603eB92b2655c5f2E7997a4945BD',\n      },\n      stargateOft: {\n        address: '0x17d65bF79E77B6Ab21d8a0afed3bC8657d8Ee0B2',\n      },\n    },\n    iota: {\n      eid: 30284,\n      token: {\n        name: 'WETH',\n        symbol: 'WETH',\n        decimals: 18,\n        address: '0x160345fC359604fC6e70E3c5fAcbdE5F7A9342d8',\n      },\n      feeLib: {\n        address: '0x0dB9afb4C33be43a0a0e396Fd1383B4ea97aB10a',\n      },\n      tokenMessaging: {\n        address: '0x1C10CC06DC6D35970d1D53B2A23c76ef370d4135',\n      },\n      stargateOft: {\n        address: '0x9c2dc7377717603eB92b2655c5f2E7997a4945BD',\n      },\n    },\n    klaytn: {\n      eid: 30150,\n      token: {\n        name: 'WETH',\n        symbol: 'WETH',\n        decimals: 18,\n        address: '0x55Acee547DF909CF844e32DD66eE55a6F81dC71b',\n      },\n      feeLib: {\n        address: '0xB83ab1FF56cCD2B9E9914c68C182135C3a7ECFcd',\n      },\n      tokenMessaging: {\n        address: '0x16F3F98D82d965988E6853681fD578F4d719A1c0',\n      },\n      stargateOft: {\n        address: '0xBB4957E44401a31ED81Cab33539d9e8993FA13Ce',\n      },\n    },\n    mantle: {\n      eid: 30181,\n      token: {\n        name: 'Ether',\n        symbol: 'WETH',\n        decimals: 18,\n        address: '0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111',\n      },\n      lpToken: {\n        name: 'WETH-LP',\n        symbol: 'S*WETH',\n        decimals: 18,\n        address: '0xc2c3Cc203FB607f2f93e6A15f45556bc83620644',\n      },\n      feeLib: {\n        address: '0x2BC3141AaeA1d84bcd557EeB543253fd9685c0C4',\n      },\n      tokenMessaging: {\n        address: '0x41B491285A4f888F9f636cEc8a363AB9770a0AEF',\n      },\n      stargatePool: {\n        address: '0x4c1d3Fc3fC3c177c3b633427c2F769276c547463',\n      },\n    },\n    metis: {\n      eid: 30151,\n      token: {\n        name: 'Ether',\n        symbol: 'WETH',\n        decimals: 18,\n        address: '0x420000000000000000000000000000000000000A',\n      },\n      lpToken: {\n        name: 'WETH-LP',\n        symbol: 'S*WETH',\n        decimals: 18,\n        address: '0x16C58802FD464D2Ac33B8f1DB57D7717f8365d91',\n      },\n      feeLib: {\n        address: '0xe8CDF27AcD73a434D661C84887215F7598e7d0d3',\n      },\n      tokenMessaging: {\n        address: '0xcbE78230CcA58b9EF4c3c5D1bC0D7E4b3206588a',\n      },\n      stargatePool: {\n        address: '0x36ed193dc7160D3858EC250e69D12B03Ca087D08',\n      },\n    },\n    optimism: {\n      eid: 30111,\n      token: {\n        name: 'ETH',\n        symbol: 'ETH',\n        decimals: 18,\n      },\n      lpToken: {\n        name: 'ETH-LP',\n        symbol: 'S*ETH',\n        decimals: 18,\n        address: '0x6Ea313859A5D9F6fF2a68f529e6361174bFD2225',\n      },\n      feeLib: {\n        address: '0x80F755e3091b2Ad99c08Da8D13E9C7635C1b8161',\n      },\n      tokenMessaging: {\n        address: '0xF1fCb4CBd57B67d683972A59B6a7b1e2E8Bf27E6',\n      },\n      stargatePoolNative: {\n        address: '0xe8CDF27AcD73a434D661C84887215F7598e7d0d3',\n      },\n    },\n    scroll: {\n      eid: 30214,\n      token: {\n        name: 'Ether',\n        symbol: 'ETH',\n        decimals: 18,\n      },\n      lpToken: {\n        name: 'ETH-LP',\n        symbol: 'S*ETH',\n        decimals: 18,\n        address: '0x73424Acc8749b5c76c7AbBB1B17D1F18Ce0Bb092',\n      },\n      feeLib: {\n        address: '0x2A6c43e0DBDCde23d40c82F45682BC6D8A6dB219',\n      },\n      tokenMessaging: {\n        address: '0x4e422B0aCb2Bd7e3aC70B5c0E5eb806e86a94038',\n      },\n      stargatePoolNative: {\n        address: '0xC2b638Cb5042c1B3c5d5C969361fB50569840583',\n      },\n    },\n    sei: {\n      eid: 30280,\n      token: {\n        name: 'WETH',\n        symbol: 'WETH',\n        decimals: 18,\n        address: '0x160345fC359604fC6e70E3c5fAcbdE5F7A9342d8',\n      },\n      feeLib: {\n        address: '0xDe48600aA18Ae707f5D57e0FaafEC7C118ABaeb2',\n      },\n      tokenMessaging: {\n        address: '0x1502FA4be69d526124D453619276FacCab275d3D',\n      },\n      stargateOft: {\n        address: '0x5c386D85b1B82FD9Db681b9176C8a4248bb6345B',\n      },\n    },\n    linea: {\n      eid: 30183,\n      token: {\n        name: 'Linea Ether',\n        symbol: 'ETH',\n        decimals: 18,\n      },\n      lpToken: {\n        name: 'ETH-LP',\n        symbol: 'S*ETH',\n        decimals: 18,\n        address: '0x23A46eFDa973Bd4e97Ee84bAc87018537538D078',\n      },\n      feeLib: {\n        address: '0x6E3d884C96d640526F273C61dfcF08915eBd7e2B',\n      },\n      tokenMessaging: {\n        address: '0x5f688F563Dc16590e570f97b542FA87931AF2feD',\n      },\n      stargatePoolNative: {\n        address: '0x81F6138153d473E8c5EcebD3DC8Cd4903506B075',\n      },\n    },\n  },\n  sharedDecimals: 6,\n});\n","import type {StargateV2Config} from '../../types/StargateV2Config';\nimport {createConfig} from '../../types/zod';\n\nexport const USDC_MAINNET: StargateV2Config = createConfig({\n  assetId: 1,\n  deployments: {\n    arbitrum: {\n      eid: 30110,\n      token: {\n        name: 'USD Coin',\n        symbol: 'USDC',\n        decimals: 6,\n        address: '0xaf88d065e77c8cC2239327C5EDb3A432268e5831',\n      },\n      lpToken: {\n        name: 'USDC-LP',\n        symbol: 'S*USDC',\n        decimals: 6,\n        address: '0x6Ea313859A5D9F6fF2a68f529e6361174bFD2225',\n      },\n      feeLib: {\n        address: '0x80F755e3091b2Ad99c08Da8D13E9C7635C1b8161',\n      },\n      tokenMessaging: {\n        address: '0x19cFCE47eD54a88614648DC3f19A5980097007dD',\n      },\n      stargatePool: {\n        address: '0xe8CDF27AcD73a434D661C84887215F7598e7d0d3',\n      },\n    },\n    aurora: {\n      eid: 30211,\n      token: {\n        name: 'USDC',\n        symbol: 'USDC',\n        decimals: 6,\n        address: '0x368EBb46ACa6b8D0787C96B2b20bD3CC3F2c45F7',\n      },\n      lpToken: {\n        name: 'USDC-LP',\n        symbol: 'S*USDC',\n        decimals: 6,\n        address: '0x23A46eFDa973Bd4e97Ee84bAc87018537538D078',\n      },\n      feeLib: {\n        address: '0x6E3d884C96d640526F273C61dfcF08915eBd7e2B',\n      },\n      tokenMessaging: {\n        address: '0x5f688F563Dc16590e570f97b542FA87931AF2feD',\n      },\n      stargatePool: {\n        address: '0x81F6138153d473E8c5EcebD3DC8Cd4903506B075',\n      },\n    },\n    avalanche: {\n      eid: 30106,\n      token: {\n        name: 'USD Coin',\n        symbol: 'USDC',\n        decimals: 6,\n        address: '0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E',\n      },\n      lpToken: {\n        name: 'USDC-LP',\n        symbol: 'S*USDC',\n        decimals: 6,\n        address: '0xaDA7A31B692e3AbFccD02C3d7f8aDc5944510291',\n      },\n      feeLib: {\n        address: '0xDFc47DCeF7e8f9Ab19a1b8Af3eeCF000C7ea0B80',\n      },\n      tokenMessaging: {\n        address: '0x17E450Be3Ba9557F2378E20d64AD417E59Ef9A34',\n      },\n      stargatePool: {\n        address: '0x5634c4a5FEd09819E3c46D86A965Dd9447d86e47',\n      },\n    },\n    base: {\n      eid: 30184,\n      token: {\n        name: 'USD Coin',\n        symbol: 'USDC',\n        decimals: 6,\n        address: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',\n      },\n      lpToken: {\n        name: 'USDC-LP',\n        symbol: 'S*USDC',\n        decimals: 6,\n        address: '0x53983F31E8E0D0c3Fd0b8d85654989A1336317d7',\n      },\n      feeLib: {\n        address: '0x08ed1d79D509A6f1020685535028ae60C144441E',\n      },\n      tokenMessaging: {\n        address: '0x5634c4a5FEd09819E3c46D86A965Dd9447d86e47',\n      },\n      stargatePool: {\n        address: '0x27a16dc786820B16E5c9028b75B99F6f604b5d26',\n      },\n    },\n    bsc: {\n      eid: 30102,\n      token: {\n        name: 'USD Coin',\n        symbol: 'USDC',\n        decimals: 18,\n        address: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n      },\n      lpToken: {\n        name: 'USDC-LP',\n        symbol: 'S*USDC',\n        decimals: 18,\n        address: '0xd5a9B8b07e9bA3D492b801c84B69E292476805B3',\n      },\n      feeLib: {\n        address: '0x622244fFF1328586D0754D67cc6Ab77e7ab38B7D',\n      },\n      tokenMessaging: {\n        address: '0x6E3d884C96d640526F273C61dfcF08915eBd7e2B',\n      },\n      stargatePool: {\n        address: '0x962Bd449E630b0d928f308Ce63f1A21F02576057',\n      },\n    },\n    ethereum: {\n      eid: 30101,\n      token: {\n        name: 'USD Coin',\n        symbol: 'USDC',\n        decimals: 6,\n        address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n      },\n      lpToken: {\n        name: 'USDC-LP',\n        symbol: 'S*USDC',\n        decimals: 6,\n        address: '0x5DaAee9EF143faFF495B581e9863570e83F99d31',\n      },\n      feeLib: {\n        address: '0x52B35406CB2FB5e0038EdEcFc129A152a1f74087',\n      },\n      tokenMessaging: {\n        address: '0x6d6620eFa72948C5f68A3C8646d58C00d3f4A980',\n      },\n      stargatePool: {\n        address: '0xc026395860Db2d07ee33e05fE50ed7bD583189C7',\n      },\n    },\n    flare: {\n      eid: 30295,\n      token: {\n        name: 'Bridged USDC (Stargate)',\n        symbol: 'USDC.e',\n        decimals: 6,\n        address: '0xFbDa5F676cB37624f28265A144A48B0d6e87d3b6',\n      },\n      feeLib: {\n        address: '0x711b5aAFd4d0A5b7B863Ca434A2678D086830d8E',\n      },\n      tokenMessaging: {\n        address: '0x45d417612e177672958dC0537C45a8f8d754Ac2E',\n      },\n      stargateOft: {\n        address: '0x77C71633C34C3784ede189d74223122422492a0f',\n      },\n    },\n    gravity: {\n      eid: 30294,\n      token: {\n        name: 'Bridged USDC (Stargate)',\n        symbol: 'USDC.e',\n        decimals: 6,\n        address: '0xFbDa5F676cB37624f28265A144A48B0d6e87d3b6',\n      },\n      feeLib: {\n        address: '0x1C10CC06DC6D35970d1D53B2A23c76ef370d4135',\n      },\n      tokenMessaging: {\n        address: '0x9c2dc7377717603eB92b2655c5f2E7997a4945BD',\n      },\n      stargateOft: {\n        address: '0xC1B8045A6ef2934Cf0f78B0dbD489969Fa9Be7E4',\n      },\n    },\n    iota: {\n      eid: 30284,\n      token: {\n        name: 'Bridged USDC (Stargate)',\n        symbol: 'USDC.e',\n        decimals: 6,\n        address: '0xFbDa5F676cB37624f28265A144A48B0d6e87d3b6',\n      },\n      feeLib: {\n        address: '0xCd4302D950e7e6606b6910Cd232758b5ad423311',\n      },\n      tokenMessaging: {\n        address: '0x1C10CC06DC6D35970d1D53B2A23c76ef370d4135',\n      },\n      stargateOft: {\n        address: '0x8e8539e4CcD69123c623a106773F2b0cbbc58746',\n      },\n    },\n    klaytn: {\n      eid: 30150,\n      token: {\n        name: 'Bridged USDC (Stargate)',\n        symbol: 'USDC.e',\n        decimals: 6,\n        address: '0xE2053BCf56D2030d2470Fb454574237cF9ee3D4B',\n      },\n      feeLib: {\n        address: '0x8d92105ae654f494CE10B3b3e4C58186E3e0dA00',\n      },\n      tokenMessaging: {\n        address: '0x16F3F98D82d965988E6853681fD578F4d719A1c0',\n      },\n      stargateOft: {\n        address: '0x01A7c805cc47AbDB254CD8AaD29dE5e447F59224',\n      },\n    },\n    mantle: {\n      eid: 30181,\n      token: {\n        name: 'USD Coin',\n        symbol: 'USDC',\n        decimals: 6,\n        address: '0x09Bc4E0D864854c6aFB6eB9A9cdF58aC190D0dF9',\n      },\n      lpToken: {\n        name: 'USDC-LP',\n        symbol: 'S*USDC',\n        decimals: 6,\n        address: '0x5D131cb99cE5642f3d539417A187a93EEae48177',\n      },\n      feeLib: {\n        address: '0x288968ffF40543F168eAf29A54D5C0affD3C8df7',\n      },\n      tokenMessaging: {\n        address: '0x41B491285A4f888F9f636cEc8a363AB9770a0AEF',\n      },\n      stargatePool: {\n        address: '0xAc290Ad4e0c891FDc295ca4F0a6214cf6dC6acDC',\n      },\n    },\n    optimism: {\n      eid: 30111,\n      token: {\n        name: 'USD Coin',\n        symbol: 'USDC',\n        decimals: 6,\n        address: '0x0b2C639c533813f4Aa9D7837CAf62653d097Ff85',\n      },\n      lpToken: {\n        name: 'USDC-LP',\n        symbol: 'S*USDC',\n        decimals: 6,\n        address: '0x8D66Ff1845b1baCC6E87D867CA4680d05A349cA8',\n      },\n      feeLib: {\n        address: '0x1F605162282570dFa6255D27895587f4117F52FA',\n      },\n      tokenMessaging: {\n        address: '0xF1fCb4CBd57B67d683972A59B6a7b1e2E8Bf27E6',\n      },\n      stargatePool: {\n        address: '0xcE8CcA271Ebc0533920C83d39F417ED6A0abB7D0',\n      },\n    },\n    polygon: {\n      eid: 30109,\n      token: {\n        name: 'USD Coin',\n        symbol: 'USDC',\n        decimals: 6,\n        address: '0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359',\n      },\n      lpToken: {\n        name: 'USDC-LP',\n        symbol: 'S*USDC',\n        decimals: 6,\n        address: '0xfe2439B656d8b624c78B7bF7bDc440D101ff9929',\n      },\n      feeLib: {\n        address: '0x3Fc69CC4A842838bCDC9499178740226062b14E4',\n      },\n      tokenMessaging: {\n        address: '0x6CE9bf8CDaB780416AD1fd87b318A077D2f50EaC',\n      },\n      stargatePool: {\n        address: '0x9Aa02D4Fae7F58b8E8f34c66E756cC734DAc7fe4',\n      },\n    },\n    rarible: {\n      eid: 30235,\n      token: {\n        name: 'Bridged USDC (Stargate)',\n        symbol: 'USDC.e',\n        decimals: 6,\n        address: '0xFbDa5F676cB37624f28265A144A48B0d6e87d3b6',\n      },\n      feeLib: {\n        address: '0x9c2dc7377717603eB92b2655c5f2E7997a4945BD',\n      },\n      tokenMessaging: {\n        address: '0xC1B8045A6ef2934Cf0f78B0dbD489969Fa9Be7E4',\n      },\n      stargateOft: {\n        address: '0x875bee36739e7Ce6b60E056451c556a88c59b086',\n      },\n    },\n    scroll: {\n      eid: 30214,\n      token: {\n        name: 'USD Coin',\n        symbol: 'USDC',\n        decimals: 6,\n        address: '0x06eFdBFf2a14a7c8E15944D1F4A48F9F95F663A4',\n      },\n      lpToken: {\n        name: 'USDC.e-LP',\n        symbol: 'S*USDC.e',\n        decimals: 6,\n        address: '0x1eA77149Dfd4C80A753aaa39AaFC22453aefcc99',\n      },\n      feeLib: {\n        address: '0x503C5cFEa3477E0A576C8Cf5354023854b7A06Ff',\n      },\n      tokenMessaging: {\n        address: '0x4e422B0aCb2Bd7e3aC70B5c0E5eb806e86a94038',\n      },\n      stargatePool: {\n        address: '0x3Fc69CC4A842838bCDC9499178740226062b14E4',\n      },\n    },\n    sei: {\n      eid: 30280,\n      token: {\n        name: 'USDC',\n        symbol: 'USDC',\n        decimals: 6,\n        address: '0x3894085Ef7Ff0f0aeDf52E2A2704928d1Ec074F1',\n      },\n      lpToken: {\n        name: 'USDC-LP',\n        symbol: 'S*USDC',\n        decimals: 6,\n        address: '0x3AE336CD18c50Fc5F23Ad44c6DAd07E83bd2B303',\n      },\n      feeLib: {\n        address: '0xCd4302D950e7e6606b6910Cd232758b5ad423311',\n      },\n      tokenMessaging: {\n        address: '0x1502FA4be69d526124D453619276FacCab275d3D',\n      },\n      stargatePool: {\n        address: '0x45d417612e177672958dC0537C45a8f8d754Ac2E',\n      },\n    },\n    taiko: {\n      eid: 30290,\n      token: {\n        name: 'Bridged USDC (Stargate)',\n        symbol: 'USDC.e',\n        decimals: 6,\n        address: '0x19e26B0638bf63aa9fa4d14c6baF8D52eBE86C5C',\n      },\n      feeLib: {\n        address: '0xCd4302D950e7e6606b6910Cd232758b5ad423311',\n      },\n      tokenMessaging: {\n        address: '0x45d417612e177672958dC0537C45a8f8d754Ac2E',\n      },\n      stargateOft: {\n        address: '0x77C71633C34C3784ede189d74223122422492a0f',\n      },\n    },\n    // xchain: {\n    //   eid: 30291,\n    //   token: {\n    //     name: 'Bridged USDC (Stargate)',\n    //     symbol: 'USDC.e',\n    //     decimals: 6,\n    //     address: '0xFbDa5F676cB37624f28265A144A48B0d6e87d3b6',\n    //   },\n    //   feeLib: {\n    //     address: '0x9c2dc7377717603eB92b2655c5f2E7997a4945BD',\n    //   },\n    //   tokenMessaging: {\n    //     address: '0xC1B8045A6ef2934Cf0f78B0dbD489969Fa9Be7E4',\n    //   },\n    //   stargateOft: {\n    //     address: '0x17d65bF79E77B6Ab21d8a0afed3bC8657d8Ee0B2',\n    //   },\n    // },\n  },\n  sharedDecimals: 6,\n});\n","import type {StargateV2Config} from '../../types/StargateV2Config';\nimport {createConfig} from '../../types/zod';\n\nexport const USDT_MAINNET: StargateV2Config = createConfig({\n  assetId: 2,\n  deployments: {\n    arbitrum: {\n      eid: 30110,\n      token: {\n        name: 'Tether USD',\n        symbol: 'USDT',\n        decimals: 6,\n        address: '0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9',\n      },\n      lpToken: {\n        name: 'USDT-LP',\n        symbol: 'S*USDT',\n        decimals: 6,\n        address: '0x8D66Ff1845b1baCC6E87D867CA4680d05A349cA8',\n      },\n      feeLib: {\n        address: '0x1F605162282570dFa6255D27895587f4117F52FA',\n      },\n      tokenMessaging: {\n        address: '0x19cFCE47eD54a88614648DC3f19A5980097007dD',\n      },\n      stargatePool: {\n        address: '0xcE8CcA271Ebc0533920C83d39F417ED6A0abB7D0',\n      },\n    },\n    avalanche: {\n      eid: 30106,\n      token: {\n        name: 'TetherToken',\n        symbol: 'USDt',\n        decimals: 6,\n        address: '0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7',\n      },\n      lpToken: {\n        name: 'USDT-LP',\n        symbol: 'S*USDT',\n        decimals: 6,\n        address: '0x80f1b5d3665a61a91f896C1f0790B4062966610E',\n      },\n      feeLib: {\n        address: '0x22BdF9633F3e679785638Db690b85dC0Dc8B35B8',\n      },\n      tokenMessaging: {\n        address: '0x17E450Be3Ba9557F2378E20d64AD417E59Ef9A34',\n      },\n      stargatePool: {\n        address: '0x12dC9256Acc9895B076f6638D628382881e62CeE',\n      },\n    },\n    bsc: {\n      eid: 30102,\n      token: {\n        name: 'Tether USD',\n        symbol: 'USDT',\n        decimals: 18,\n        address: '0x55d398326f99059fF775485246999027B3197955',\n      },\n      lpToken: {\n        name: 'USDT-LP',\n        symbol: 'S*USDT',\n        decimals: 18,\n        address: '0xe664Fd3a278b1E49C20F9B0aF77aA57DC770B21B',\n      },\n      feeLib: {\n        address: '0xDd002227d9bC27f10066ED9A17bE89c43bCafC31',\n      },\n      tokenMessaging: {\n        address: '0x6E3d884C96d640526F273C61dfcF08915eBd7e2B',\n      },\n      stargatePool: {\n        address: '0x138EB30f73BC423c6455C53df6D89CB01d9eBc63',\n      },\n    },\n    ebi: {\n      eid: 30282,\n      token: {\n        name: 'Tether USD',\n        symbol: 'USDT',\n        decimals: 6,\n        address: '0x5489DDAb89609580835eE6d655CD9B3503E7F97D',\n      },\n      feeLib: {\n        address: '0x1a6437BeF5b8615Ef523d00Ef7c9D58D66c0F246',\n      },\n      tokenMessaging: {\n        address: '0x4EeBa4E168b23601EB7716A5D1Ac243B8D375290',\n      },\n      stargateOft: {\n        address: '0xF8c61c8F4Fdd41dd444f7b582C9F440e1b1ADcc8',\n      },\n    },\n    ethereum: {\n      eid: 30101,\n      token: {\n        name: 'Tether USD',\n        symbol: 'USDT',\n        decimals: 6,\n        address: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n      },\n      lpToken: {\n        name: 'USDT-LP',\n        symbol: 'S*USDT',\n        decimals: 6,\n        address: '0x17BBC9BD51A52aAf4d2CC6652630DaF4fdB358F7',\n      },\n      feeLib: {\n        address: '0xe171AFcd1E0394b3312e68ca823D5BC87F3Db311',\n      },\n      tokenMessaging: {\n        address: '0x6d6620eFa72948C5f68A3C8646d58C00d3f4A980',\n      },\n      stargatePool: {\n        address: '0x933597a323Eb81cAe705C5bC29985172fd5A3973',\n      },\n    },\n    flare: {\n      eid: 30295,\n      token: {\n        name: 'Tether USD',\n        symbol: 'USDT',\n        decimals: 6,\n        address: '0x0B38e83B86d491735fEaa0a791F65c2B99535396',\n      },\n      feeLib: {\n        address: '0x8c1014B5936dD88BAA5F4DB0423C3003615E03a0',\n      },\n      tokenMessaging: {\n        address: '0x45d417612e177672958dC0537C45a8f8d754Ac2E',\n      },\n      stargateOft: {\n        address: '0x1C10CC06DC6D35970d1D53B2A23c76ef370d4135',\n      },\n    },\n    gravity: {\n      eid: 30294,\n      token: {\n        name: 'Tether USD',\n        symbol: 'USDT',\n        decimals: 6,\n        address: '0x816E810f9F787d669FB71932DeabF6c83781Cd48',\n      },\n      feeLib: {\n        address: '0x45d417612e177672958dC0537C45a8f8d754Ac2E',\n      },\n      tokenMessaging: {\n        address: '0x9c2dc7377717603eB92b2655c5f2E7997a4945BD',\n      },\n      stargateOft: {\n        address: '0x0B38e83B86d491735fEaa0a791F65c2B99535396',\n      },\n    },\n    iota: {\n      eid: 30284,\n      token: {\n        name: 'Tether USD',\n        symbol: 'USDT',\n        decimals: 6,\n        address: '0xC1B8045A6ef2934Cf0f78B0dbD489969Fa9Be7E4',\n      },\n      feeLib: {\n        address: '0x711b5aAFd4d0A5b7B863Ca434A2678D086830d8E',\n      },\n      tokenMessaging: {\n        address: '0x1C10CC06DC6D35970d1D53B2A23c76ef370d4135',\n      },\n      stargateOft: {\n        address: '0x77C71633C34C3784ede189d74223122422492a0f',\n      },\n    },\n    kava: {\n      eid: 30177,\n      token: {\n        name: 'TetherUSDt',\n        symbol: 'USDt',\n        decimals: 6,\n        address: '0x919C1c267BC06a7039e03fcc2eF738525769109c',\n      },\n      lpToken: {\n        name: 'USDT-LP',\n        symbol: 'S*USDT',\n        decimals: 6,\n        address: '0x9B8b53CDB3a241E838cDE548d7D8B76DA759D90B',\n      },\n      feeLib: {\n        address: '0xA76CD3a43751090c40a35C37B38aA06973Cc6184',\n      },\n      tokenMessaging: {\n        address: '0x6B73D3cBbb278Ce2E8698E983AecCdD94Dc4594B',\n      },\n      stargatePool: {\n        address: '0x41A5b0470D96656Fb3e8f68A218b39AdBca3420b',\n      },\n    },\n    klaytn: {\n      eid: 30150,\n      token: {\n        name: 'Tether USD',\n        symbol: 'USDT',\n        decimals: 6,\n        address: '0x9025095263d1E548dc890A7589A4C78038aC40ab',\n      },\n      feeLib: {\n        address: '0x6eFfA1afE190a652a8204D318fec03D3dD9402d2',\n      },\n      tokenMessaging: {\n        address: '0x16F3F98D82d965988E6853681fD578F4d719A1c0',\n      },\n      stargateOft: {\n        address: '0x8619bA1B324e099CB2227060c4BC5bDEe14456c6',\n      },\n    },\n    mantle: {\n      eid: 30181,\n      token: {\n        name: 'Tether USD',\n        symbol: 'USDT',\n        decimals: 6,\n        address: '0x201EBa5CC46D216Ce6DC03F6a759e8E766e956aE',\n      },\n      lpToken: {\n        name: 'USDT-LP',\n        symbol: 'S*USDT',\n        decimals: 6,\n        address: '0xe1152564ED7B59e01915FC95bBF87cF9b6636fe6',\n      },\n      feeLib: {\n        address: '0xa81274AFac523D639DbcA2C32c1470f1600cCEBe',\n      },\n      tokenMessaging: {\n        address: '0x41B491285A4f888F9f636cEc8a363AB9770a0AEF',\n      },\n      stargatePool: {\n        address: '0xB715B85682B731dB9D5063187C450095c91C57FC',\n      },\n    },\n    metis: {\n      eid: 30151,\n      token: {\n        name: 'USDT Token',\n        symbol: 'm.USDT',\n        decimals: 6,\n        address: '0xbB06DCA3AE6887fAbF931640f67cab3e3a16F4dC',\n      },\n      lpToken: {\n        name: 'USDT-LP',\n        symbol: 'S*USDT',\n        decimals: 6,\n        address: '0x222A9a6dD812CA5a27fFfEC39816A2DF6837D396',\n      },\n      feeLib: {\n        address: '0x19cFCE47eD54a88614648DC3f19A5980097007dD',\n      },\n      tokenMessaging: {\n        address: '0xcbE78230CcA58b9EF4c3c5D1bC0D7E4b3206588a',\n      },\n      stargatePool: {\n        address: '0x4dCBFC0249e8d5032F89D6461218a9D2eFff5125',\n      },\n    },\n    optimism: {\n      eid: 30111,\n      token: {\n        name: 'Tether USD',\n        symbol: 'USDT',\n        decimals: 6,\n        address: '0x94b008aA00579c1307B0EF2c499aD98a8ce58e58',\n      },\n      lpToken: {\n        name: 'USDT-LP',\n        symbol: 'S*USDT',\n        decimals: 6,\n        address: '0x9f58A79D81477130C0C6D74b96e1397db9765ab1',\n      },\n      feeLib: {\n        address: '0x3da4f8E456AC648c489c286B99Ca37B666be7C4C',\n      },\n      tokenMessaging: {\n        address: '0xF1fCb4CBd57B67d683972A59B6a7b1e2E8Bf27E6',\n      },\n      stargatePool: {\n        address: '0x19cFCE47eD54a88614648DC3f19A5980097007dD',\n      },\n    },\n    polygon: {\n      eid: 30109,\n      token: {\n        name: '(PoS) Tether USD',\n        symbol: 'USDT',\n        decimals: 6,\n        address: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',\n      },\n      lpToken: {\n        name: 'USDT-LP',\n        symbol: 'S*USDT',\n        decimals: 6,\n        address: '0x3e3C6dC77Ebf9EA16E6d83bf3ba021aAa7374Ca7',\n      },\n      feeLib: {\n        address: '0x4e422B0aCb2Bd7e3aC70B5c0E5eb806e86a94038',\n      },\n      tokenMessaging: {\n        address: '0x6CE9bf8CDaB780416AD1fd87b318A077D2f50EaC',\n      },\n      stargatePool: {\n        address: '0xd47b03ee6d86Cf251ee7860FB2ACf9f91B9fD4d7',\n      },\n    },\n    rarible: {\n      eid: 30235,\n      token: {\n        name: 'Tether USD',\n        symbol: 'USDT',\n        decimals: 6,\n        address: '0x362FAE9A75B27BBc550aAc28a7c1F96C8D483120',\n      },\n      feeLib: {\n        address: '0x8e8539e4CcD69123c623a106773F2b0cbbc58746',\n      },\n      tokenMessaging: {\n        address: '0xC1B8045A6ef2934Cf0f78B0dbD489969Fa9Be7E4',\n      },\n      stargateOft: {\n        address: '0x17d65bF79E77B6Ab21d8a0afed3bC8657d8Ee0B2',\n      },\n    },\n    sei: {\n      eid: 30280,\n      token: {\n        name: 'USDT',\n        symbol: 'USDT',\n        decimals: 6,\n        address: '0xB75D0B03c06A926e488e2659DF1A861F860bD3d1',\n      },\n      lpToken: {\n        name: 'USDT-LP',\n        symbol: 'S*USDT',\n        decimals: 6,\n        address: '0xe1d6BE6B535EbCaa41bF23eEb22d08119ae258ed',\n      },\n      feeLib: {\n        address: '0x711b5aAFd4d0A5b7B863Ca434A2678D086830d8E',\n      },\n      tokenMessaging: {\n        address: '0x1502FA4be69d526124D453619276FacCab275d3D',\n      },\n      stargatePool: {\n        address: '0x0dB9afb4C33be43a0a0e396Fd1383B4ea97aB10a',\n      },\n    },\n    taiko: {\n      eid: 30290,\n      token: {\n        name: 'Tether USD',\n        symbol: 'USDT',\n        decimals: 6,\n        address: '0x9c2dc7377717603eB92b2655c5f2E7997a4945BD',\n      },\n      feeLib: {\n        address: '0x711b5aAFd4d0A5b7B863Ca434A2678D086830d8E',\n      },\n      tokenMessaging: {\n        address: '0x45d417612e177672958dC0537C45a8f8d754Ac2E',\n      },\n      stargateOft: {\n        address: '0x1C10CC06DC6D35970d1D53B2A23c76ef370d4135',\n      },\n    },\n  },\n  sharedDecimals: 6,\n});\n","import type {StargateV2Config} from '../../types/StargateV2Config';\nimport {createConfig} from '../../types/zod';\n\nexport const METH_MAINNET: StargateV2Config = createConfig({\n  assetId: 22,\n  deployments: {\n    ethereum: {\n      eid: 30101,\n      token: {\n        name: 'mETH',\n        symbol: 'mETH',\n        decimals: 18,\n        address: '0xd5F7838F5C461fefF7FE49ea5ebaF7728bB0ADfa',\n      },\n      lpToken: {\n        name: 'mETH-LP',\n        symbol: 'S*mETH',\n        decimals: 18,\n        address: '0xD646CD9Dff77097b454a5a148BeaE6615e3bC2e2',\n      },\n      feeLib: {\n        address: '0x6D5521F46b2cba9443feFC09cBaC3B15AE0F73eB',\n      },\n      tokenMessaging: {\n        address: '0x6d6620eFa72948C5f68A3C8646d58C00d3f4A980',\n      },\n      stargatePool: {\n        address: '0x268Ca24DAefF1FaC2ed883c598200CcbB79E931D',\n      },\n    },\n    mantle: {\n      eid: 30181,\n      token: {\n        name: 'mETH',\n        symbol: 'mETH',\n        decimals: 18,\n        address: '0xcDA86A272531e8640cD7F1a92c01839911B90bb0',\n      },\n      lpToken: {\n        name: 'mETH-LP',\n        symbol: 'S*mETH',\n        decimals: 18,\n        address: '0xfe1e5Ff7FFE3672C085a4b1Dd6b95273c9164022',\n      },\n      feeLib: {\n        address: '0x6eC3EfD27d8b1070Fe96910EF416D54e845045c9',\n      },\n      tokenMessaging: {\n        address: '0x41B491285A4f888F9f636cEc8a363AB9770a0AEF',\n      },\n      stargatePool: {\n        address: '0xF7628d84a2BbD9bb9c8E686AC95BB5d55169F3F1',\n      },\n    },\n  },\n  sharedDecimals: 6,\n});\n","import type {StargateV2Config} from '../../types/StargateV2Config';\nimport {createConfig} from '../../types/zod';\n\nexport const METIS_MAINNET: StargateV2Config = createConfig({\n  assetId: 17,\n  deployments: {\n    ethereum: {\n      eid: 30101,\n      token: {\n        name: 'Metis Token',\n        symbol: 'Metis',\n        decimals: 18,\n        address: '0x9E32b13ce7f2E80A01932B42553652E053D6ed8e',\n      },\n      lpToken: {\n        name: 'METIS-LP',\n        symbol: 'S*METIS',\n        decimals: 18,\n        address: '0xF14EEe033D8b00101aB147F87cB238a2d3E74940',\n      },\n      feeLib: {\n        address: '0x6Dd69717B1194B81A92105B7e0F94cb40f68A3e3',\n      },\n      tokenMessaging: {\n        address: '0x6d6620eFa72948C5f68A3C8646d58C00d3f4A980',\n      },\n      stargatePool: {\n        address: '0xcDafB1b2dB43f366E48e6F614b8DCCBFeeFEEcD3',\n      },\n    },\n    metis: {\n      eid: 30151,\n      token: {\n        name: 'Metis Token',\n        symbol: 'Metis',\n        decimals: 18,\n        address: '0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000',\n      },\n      lpToken: {\n        name: 'METIS-LP',\n        symbol: 'S*METIS',\n        decimals: 18,\n        address: '0x2D4848d502B8B16b8ad86945d3D4e92F2d229dFF',\n      },\n      feeLib: {\n        address: '0xcE8CcA271Ebc0533920C83d39F417ED6A0abB7D0',\n      },\n      tokenMessaging: {\n        address: '0xcbE78230CcA58b9EF4c3c5D1bC0D7E4b3206588a',\n      },\n      stargatePool: {\n        address: '0xD9050e7043102a0391F81462a3916326F86331F0',\n      },\n    },\n  },\n  sharedDecimals: 6,\n});\n","import type {StargateV2TokenMessagingConfig} from '../../types/zod';\n\nexport const TOKEN_MESSAGING_MAINNET: StargateV2TokenMessagingConfig = {\n  api: {\n    url: 'https://d3k4i7b673n27r.cloudfront.net',\n  },\n  deployments: {\n    arbitrum: {\n      eid: 30110,\n      tokenMessaging: {\n        address: '0x19cFCE47eD54a88614648DC3f19A5980097007dD',\n      },\n    },\n    aurora: {\n      eid: 30211,\n      tokenMessaging: {\n        address: '0x5f688F563Dc16590e570f97b542FA87931AF2feD',\n      },\n    },\n    avalanche: {\n      eid: 30106,\n      tokenMessaging: {\n        address: '0x17E450Be3Ba9557F2378E20d64AD417E59Ef9A34',\n      },\n    },\n    base: {\n      eid: 30184,\n      tokenMessaging: {\n        address: '0x5634c4a5FEd09819E3c46D86A965Dd9447d86e47',\n      },\n    },\n    bsc: {\n      eid: 30102,\n      tokenMessaging: {\n        address: '0x6E3d884C96d640526F273C61dfcF08915eBd7e2B',\n      },\n    },\n    ebi: {\n      eid: 30282,\n      tokenMessaging: {\n        address: '0x4EeBa4E168b23601EB7716A5D1Ac243B8D375290',\n      },\n    },\n    ethereum: {\n      eid: 30101,\n      tokenMessaging: {\n        address: '0x6d6620eFa72948C5f68A3C8646d58C00d3f4A980',\n      },\n    },\n    flare: {\n      eid: 30295,\n      tokenMessaging: {\n        address: '0x45d417612e177672958dC0537C45a8f8d754Ac2E',\n      },\n    },\n    gravity: {\n      eid: 30294,\n      tokenMessaging: {\n        address: '0x9c2dc7377717603eB92b2655c5f2E7997a4945BD',\n      },\n    },\n    iota: {\n      eid: 30284,\n      tokenMessaging: {\n        address: '0x1C10CC06DC6D35970d1D53B2A23c76ef370d4135',\n      },\n    },\n    kava: {\n      eid: 30177,\n      tokenMessaging: {\n        address: '0x6B73D3cBbb278Ce2E8698E983AecCdD94Dc4594B',\n      },\n    },\n    klaytn: {\n      eid: 30150,\n      tokenMessaging: {\n        address: '0x16F3F98D82d965988E6853681fD578F4d719A1c0',\n      },\n    },\n    mantle: {\n      eid: 30181,\n      tokenMessaging: {\n        address: '0x41B491285A4f888F9f636cEc8a363AB9770a0AEF',\n      },\n    },\n    metis: {\n      eid: 30151,\n      tokenMessaging: {\n        address: '0xcbE78230CcA58b9EF4c3c5D1bC0D7E4b3206588a',\n      },\n    },\n    optimism: {\n      eid: 30111,\n      tokenMessaging: {\n        address: '0xF1fCb4CBd57B67d683972A59B6a7b1e2E8Bf27E6',\n      },\n    },\n    polygon: {\n      eid: 30109,\n      tokenMessaging: {\n        address: '0x6CE9bf8CDaB780416AD1fd87b318A077D2f50EaC',\n      },\n    },\n    rarible: {\n      eid: 30235,\n      tokenMessaging: {\n        address: '0xC1B8045A6ef2934Cf0f78B0dbD489969Fa9Be7E4',\n      },\n    },\n    scroll: {\n      eid: 30214,\n      tokenMessaging: {\n        address: '0x4e422B0aCb2Bd7e3aC70B5c0E5eb806e86a94038',\n      },\n    },\n    sei: {\n      eid: 30280,\n      tokenMessaging: {\n        address: '0x1502FA4be69d526124D453619276FacCab275d3D',\n      },\n    },\n    taiko: {\n      eid: 30290,\n      tokenMessaging: {\n        address: '0x45d417612e177672958dC0537C45a8f8d754Ac2E',\n      },\n    },\n    xchain: {\n      eid: 30291,\n      tokenMessaging: {\n        address: '0xC1B8045A6ef2934Cf0f78B0dbD489969Fa9Be7E4',\n      },\n    },\n    linea: {\n      eid: 30183,\n      tokenMessaging: {\n        address: '0x5f688F563Dc16590e570f97b542FA87931AF2feD',\n      },\n    },\n  },\n};\n","import type {SerializedStargateV2StakingConfig} from '../../types/zod';\n\nexport const STARGATE_V2_STAKING_MAINNET: SerializedStargateV2StakingConfig = {\n  deployments: {\n    arbitrum: {\n      stargateStaking: {\n        address: '0x3da4f8E456AC648c489c286B99Ca37B666be7C4C',\n      },\n      stargateMultiRewarder: {\n        address: '0x957b12606690C7692eF92bb5c34a0E63baED99C7',\n      },\n    },\n    aurora: {\n      stargateStaking: {\n        address: '0x25BBf59ef9246Dc65bFac8385D55C5e524A7B9eA',\n      },\n      stargateMultiRewarder: {\n        address: '0xE89Ca5C58E2978c031f7796Ca8580bC88Ea0B3dD',\n      },\n    },\n    avalanche: {\n      stargateStaking: {\n        address: '0x8db623d439C8c4DFA1Ca94E4CD3eB8B3Aaff8331',\n      },\n      stargateMultiRewarder: {\n        address: '0x6CE9bf8CDaB780416AD1fd87b318A077D2f50EaC',\n      },\n    },\n    base: {\n      stargateStaking: {\n        address: '0xDFc47DCeF7e8f9Ab19a1b8Af3eeCF000C7ea0B80',\n      },\n      stargateMultiRewarder: {\n        address: '0x9Aa02D4Fae7F58b8E8f34c66E756cC734DAc7fe4',\n      },\n    },\n    bsc: {\n      stargateStaking: {\n        address: '0x26727C78B0209d9E787b2f9ac8f0238B122a3098',\n      },\n      stargateMultiRewarder: {\n        address: '0x68D7877b16002AD34836ba55416bcA9B92B55589',\n      },\n    },\n    ethereum: {\n      stargateStaking: {\n        address: '0xFF551fEDdbeDC0AeE764139cCD9Cb644Bb04A6BD',\n      },\n      stargateMultiRewarder: {\n        address: '0x5871A7f88b0f3F5143Bf599Fd45F8C0Dc237E881',\n      },\n    },\n    kava: {\n      stargateStaking: {\n        address: '0x10e28bA4D7fc9cf39F34E20bbC5C58694b2f1A92',\n      },\n      stargateMultiRewarder: {\n        address: '0x62207a4d054376052Bfcede2c00d113E97D4D247',\n      },\n    },\n    mantle: {\n      stargateStaking: {\n        address: '0x02DC1042E623A8677B002981164ccc05d25d486a',\n      },\n      stargateMultiRewarder: {\n        address: '0x0184857631ddb3e9E230Bca303F0Ab1e516FC0c8',\n      },\n    },\n    metis: {\n      stargateStaking: {\n        address: '0xF1fCb4CBd57B67d683972A59B6a7b1e2E8Bf27E6',\n      },\n      stargateMultiRewarder: {\n        address: '0x1F605162282570dFa6255D27895587f4117F52FA',\n      },\n    },\n    optimism: {\n      stargateStaking: {\n        address: '0xFBb5A71025BEf1A8166C9BCb904a120AA17d6443',\n      },\n      stargateMultiRewarder: {\n        address: '0x146c8e409C113ED87C6183f4d25c50251DFfbb3a',\n      },\n    },\n    polygon: {\n      stargateStaking: {\n        address: '0x4694900bDbA99Edf07A2E46C4093f88F9106a90D',\n      },\n      stargateMultiRewarder: {\n        address: '0xd240a859Efc77b7455AD1B1402357784a2D72a1B',\n      },\n    },\n    scroll: {\n      stargateStaking: {\n        address: '0xd240a859Efc77b7455AD1B1402357784a2D72a1B',\n      },\n      stargateMultiRewarder: {\n        address: '0x4dCBFC0249e8d5032F89D6461218a9D2eFff5125',\n      },\n    },\n    sei: {\n      stargateStaking: {\n        address: '0x8c1014B5936dD88BAA5F4DB0423C3003615E03a0',\n      },\n      stargateMultiRewarder: {\n        address: '0xd69A3D88438f042a5a0b995b970F78FC8120ED67',\n      },\n    },\n    linea: {\n      stargateStaking: {\n        address: '0x25BBf59ef9246Dc65bFac8385D55C5e524A7B9eA',\n      },\n      stargateMultiRewarder: {\n        address: '0xE89Ca5C58E2978c031f7796Ca8580bC88Ea0B3dD',\n      },\n    },\n  },\n};\n","import {type ProviderFactory, createTransaction} from '@layerzerolabs/ui-evm';\nimport {type ChainKey, type FeeQuote, MessageFee, type Transaction} from '@layerzerolabs/ui-core';\nimport {z} from 'zod';\nimport redaxios from 'redaxios';\nimport type {Signer} from 'ethers';\nimport {TokenMessaging__factory} from '../typechain';\nimport type {StargateV2TokenMessagingConfig} from '../types/zod';\n\n// https://github.com/colinhacks/zod/discussions/1897\nconst bigIntSchema = z\n  .string()\n  .transform((value) => {\n    try {\n      return BigInt(value);\n    } catch (error) {\n      return value;\n    }\n  })\n  .pipe(z.bigint());\n\nconst passengerSchema = z.object({\n  sender: z.string(),\n  receiver: z.string(),\n  ticketId: bigIntSchema,\n  assetId: z.number(),\n  asset: z.string(),\n  amountSD: bigIntSchema,\n  rideStatus: z.string(),\n  txHash: z.string(),\n  blockNumber: z.number(),\n  timestamp: z.number(),\n  nativeDrop: z.boolean(),\n  passengerBytes: z.string(),\n});\n\nconst path = z.object({\n  srcEid: z.number(),\n  dstEid: z.number(),\n  srcChainKey: z.string(),\n  dstChainKey: z.string(),\n});\n\nconst busSchema = path.extend({\n  bus: z.object({\n    busId: z.string(),\n    guid: z.string(),\n    timestamp: z.number(),\n    txHash: z.string(),\n  }),\n});\n\nconst queueSchema = path.extend({\n  queue: z.object({\n    currentBusParams: z.object({\n      capacity: z.number(),\n    }),\n    passengers: passengerSchema.array(),\n  }),\n});\n\nconst busQueueSchema = z.discriminatedUnion('inQueue', [\n  queueSchema.extend({\n    bus: z.undefined().optional(),\n    inQueue: z.literal(true),\n  }),\n  busSchema.extend({\n    queue: z.undefined().optional(),\n    inQueue: z.literal(false),\n  }),\n]);\n\nconst busDriveSettingsSchema = z.object({\n  // expressed in ms\n  maxWaitTime: z.number().transform((ms) => ({seconds: ms / 1000})),\n  passengersToDrive: z.number(),\n});\n\nexport type GetBusDriveSettingsInput = {srcChainKey: ChainKey; dstChainKey: ChainKey};\nexport type GetBusDriveSettingsResult = z.infer<typeof busDriveSettingsSchema>;\n\nexport type GetQueueByPathInput = {srcChainKey: ChainKey; dstChainKey: ChainKey};\nexport type GetQueueByPathResult = z.infer<typeof queueSchema>;\n\nexport type GetBusByTxHashInput = {txHash: string};\nexport type GetBusByTxHashResult = z.infer<typeof busQueueSchema>;\n\nexport type QuoteDriveBusInput = {\n  srcChainKey: ChainKey;\n  dstEid: number;\n  queue: {\n    passengers: Pick<Passenger, 'ticketId' | 'passengerBytes'>[];\n    currentBusParams: {capacity: number};\n  };\n};\nexport type QuoteDriveBusResult = FeeQuote;\n\ntype Passenger = z.infer<typeof passengerSchema>;\n\nexport interface DriveBusInput {\n  chainKey: ChainKey;\n  txHash: string;\n  fee: FeeQuote;\n}\n\nexport class StargateV2Bus {\n  protected http: ReturnType<typeof redaxios.create>;\n\n  constructor(\n    protected config: StargateV2TokenMessagingConfig,\n    protected providerFactory: ProviderFactory,\n  ) {\n    this.http = redaxios.create({baseURL: config.api.url});\n  }\n\n  supportsPath(path: {srcChainKey: ChainKey; dstChainKey: ChainKey}): boolean {\n    return !!this.tryGetDeployment(path.srcChainKey) && !!this.tryGetDeployment(path.dstChainKey);\n  }\n\n  async quoteDriveBus(input: QuoteDriveBusInput): Promise<QuoteDriveBusResult> {\n    if (input.queue.passengers.length === 0) {\n      throw new StargateV2NoPassengersError(input);\n    }\n    const messaging = this.getTokenMessagingContract(input.srcChainKey);\n    const capacity = input.queue.currentBusParams.capacity;\n    const passengers = input.queue.passengers.slice(0, capacity);\n    const passengerBytes = this.getPassengerBytes(passengers);\n    const fee = await messaging.quoteDriveBus(input.dstEid, passengerBytes);\n    return MessageFee.from(input.srcChainKey, {\n      nativeFee: fee.nativeFee.toBigInt(),\n      zroFee: fee.nativeFee.toBigInt(),\n    });\n  }\n\n  async getQueueByPath(path: {\n    srcChainKey: ChainKey;\n    dstChainKey: ChainKey;\n  }): Promise<GetQueueByPathResult> {\n    const srcEid = this.chainKeyToEid(path.srcChainKey);\n    const dstEid = this.chainKeyToEid(path.dstChainKey);\n    const response = await this.http.get(`v1/buses/queue/${srcEid}/${dstEid}`);\n    const queue = queueSchema.parse(this.fixQueue(response.data, path));\n    return this.fixChainKey(queue);\n  }\n\n  async getBusDriveSettings(path: GetBusDriveSettingsInput): Promise<GetBusDriveSettingsResult> {\n    const srcEid = this.chainKeyToEid(path.srcChainKey);\n    const dstEid = this.chainKeyToEid(path.dstChainKey);\n    const response = await this.http.get(`v1/buses/bus-drive-settings/${srcEid}/${dstEid}`);\n    const busDriveSettings = busDriveSettingsSchema.parse(response.data);\n    return busDriveSettings;\n  }\n\n  async getBusByTxHash(input: GetBusByTxHashInput): Promise<GetBusByTxHashResult> {\n    const response = await this.http.get(`v1/buses/bus-queue/${input.txHash}`);\n    const [bus] = busQueueSchema.array().length(1).parse(response.data);\n    return this.fixChainKey(bus);\n  }\n\n  public chainKeyToEid(chainKey: ChainKey): number {\n    return this.getDeployment(chainKey).eid;\n  }\n\n  // todo: remove when API is fixed\n  protected fixQueue<T extends object>(\n    queue: T,\n    path: {srcChainKey: ChainKey; dstChainKey: ChainKey},\n  ) {\n    return {\n      ...queue,\n      srcChainKey: path.srcChainKey,\n      dstChainKey: path.dstChainKey,\n      srcEid: this.chainKeyToEid(path.srcChainKey),\n      dstEid: this.chainKeyToEid(path.dstChainKey),\n    };\n  }\n\n  // todo: remove when API is fixed\n  protected fixChainKey<\n    T extends {srcChainKey: string; dstChainKey: string; srcEid: number; dstEid: number},\n  >(data: T): T {\n    return {\n      ...data,\n      srcChainKey: this.eidToChainKey(data.srcEid),\n      dstChainKey: this.eidToChainKey(data.dstEid),\n    };\n  }\n\n  // todo: this method should not be required\n  // it exists only because sandbox bus API returns invalid chainKey\n  protected eidToChainKey(eid: number): ChainKey {\n    for (const [key, deployment] of Object.entries(this.config.deployments)) {\n      if (deployment.eid === eid) return key as ChainKey;\n    }\n    throw new Error(`No chain key found for eid ${eid}`);\n  }\n\n  protected getTokenMessagingContract(chainKey: ChainKey) {\n    const address = this.getDeployment(chainKey).tokenMessaging.address;\n    const provider = this.providerFactory(chainKey);\n    return TokenMessaging__factory.connect(address, provider);\n  }\n\n  protected tryGetDeployment(chainKey: ChainKey) {\n    return this.config.deployments[chainKey];\n  }\n\n  protected getDeployment(chainKey: ChainKey) {\n    const deployment = this.tryGetDeployment(chainKey);\n    if (deployment) return deployment;\n    throw new Error(`No deployment found for ${chainKey}`);\n  }\n\n  protected getPassengerBytes(\n    passengers: Pick<Passenger, 'ticketId' | 'passengerBytes'>[],\n  ): string {\n    const header = '0x';\n    const passengerBytes = passengers\n      .map((data) => data.passengerBytes)\n      .map((p) => p.replace('0x', ''))\n      .join('');\n    return header + passengerBytes;\n  }\n\n  async driveBus(input: DriveBusInput): Promise<Transaction<Signer>> {\n    const chainKey = input.chainKey;\n    const messaging = this.getTokenMessagingContract(chainKey);\n\n    // in case of race condition\n    // if new fee is smaller than previous - will be refunded\n    const bus = await this.getBusByTxHash({txHash: input.txHash});\n    if (!bus.inQueue) throw new StargateV2BusDrivenError(bus);\n\n    const passengersBytes = this.getPassengerBytes(bus.queue.passengers);\n    const value = input.fee.nativeFee.toBigInt();\n\n    const populatedTransaction = messaging.populateTransaction.driveBus(\n      bus.dstEid,\n      passengersBytes,\n      {value},\n    );\n    return createTransaction(populatedTransaction, {provider: messaging.provider, chainKey});\n  }\n}\n\nexport class StargateV2NoPassengersError extends Error {\n  constructor(protected readonly data: QuoteDriveBusInput) {\n    super('No passengers in queue');\n  }\n}\nexport class StargateV2BusDrivenError extends Error {\n  constructor(protected readonly data: GetBusByTxHashResult) {\n    super('Bus already driven');\n  }\n}\n","/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @public\n * @typedef Options\n * @property {string} [url] the URL to request\n * @property {'get'|'post'|'put'|'patch'|'delete'|'options'|'head'|'GET'|'POST'|'PUT'|'PATCH'|'DELETE'|'OPTIONS'|'HEAD'} [method=\"get\"] HTTP method, case-insensitive\n * @property {RequestHeaders} [headers] Request headers\n * @property {FormData|string|object} [body] a body, optionally encoded, to send\n * @property {'text'|'json'|'stream'|'blob'|'arrayBuffer'|'formData'|'stream'} [responseType=\"json\"] An encoding to use for the response\n * @property {Record<string,any>|URLSearchParams} [params] querystring parameters\n * @property {(params: Options['params']) => string} [paramsSerializer] custom function to stringify querystring parameters\n * @property {boolean} [withCredentials] Send the request with credentials like cookies\n * @property {string} [auth] Authorization header value to send with the request\n * @property {string} [xsrfCookieName] Pass an Cross-site Request Forgery prevention cookie value as a header defined by `xsrfHeaderName`\n * @property {string} [xsrfHeaderName] The name of a header to use for passing XSRF cookies\n * @property {(status: number) => boolean} [validateStatus] Override status code handling (default: 200-399 is a success)\n * @property {Array<(body: any, headers?: RequestHeaders) => any?>} [transformRequest] An array of transformations to apply to the outgoing request\n * @property {string} [baseURL] a base URL from which to resolve all URLs\n * @property {typeof window.fetch} [fetch] Custom window.fetch implementation\n * @property {any} [data]\n */\n\n/**\n * @public\n * @typedef RequestHeaders\n * @type {{[name: string]: string} | Headers}\n */\n\n/**\n * @public\n * @template T\n * @typedef Response\n * @property {number} status\n * @property {string} statusText\n * @property {Options} config the request configuration\n * @property {T} data the decoded response body\n * @property {Headers} headers\n * @property {boolean} redirect\n * @property {string} url\n * @property {ResponseType} type\n * @property {ReadableStream<Uint8Array> | null} body\n * @property {boolean} bodyUsed\n */\n\n/**\n * @typedef BodylessMethod\n * @type {<T=any>(url: string, config?: Options) => Promise<Response<T>>}\n */\n\n/**\n * @typedef BodyMethod\n * @type {<T=any>(url: string, body?: any, config?: Options) => Promise<Response<T>>}\n */\n\n/**\n * @public\n * @param {Options} [defaults = {}]\n * @returns {redaxios}\n */\nfunction create(defaults) {\n\tdefaults = defaults || {};\n\n\t/**\n\t * @public\n\t * @template T\n\t * @type {(<T = any>(config?: Options) => Promise<Response<T>>) | (<T = any>(url: string, config?: Options) => Promise<Response<T>>)}\n\t */\n\tredaxios.request = redaxios;\n\n\t/** @public @type {BodylessMethod} */\n\tredaxios.get = (url, config) => redaxios(url, config, 'get');\n\n\t/** @public @type {BodylessMethod} */\n\tredaxios.delete = (url, config) => redaxios(url, config, 'delete');\n\n\t/** @public @type {BodylessMethod} */\n\tredaxios.head = (url, config) => redaxios(url, config, 'head');\n\n\t/** @public @type {BodylessMethod} */\n\tredaxios.options = (url, config) => redaxios(url, config, 'options');\n\n\t/** @public @type {BodyMethod} */\n\tredaxios.post = (url, data, config) => redaxios(url, config, 'post', data);\n\n\t/** @public @type {BodyMethod} */\n\tredaxios.put = (url, data, config) => redaxios(url, config, 'put', data);\n\n\t/** @public @type {BodyMethod} */\n\tredaxios.patch = (url, data, config) => redaxios(url, config, 'patch', data);\n\n\t/** @public */\n\tredaxios.all = Promise.all.bind(Promise);\n\n\t/**\n\t * @public\n\t * @template Args, R\n\t * @param {(...args: Args[]) => R} fn\n\t * @returns {(array: Args[]) => R}\n\t */\n\tredaxios.spread = (fn) => /** @type {any} */ (fn.apply.bind(fn, fn));\n\n\t/**\n\t * @private\n\t * @template T, U\n\t * @param {T} opts\n\t * @param {U} [overrides]\n\t * @param {boolean} [lowerCase]\n\t * @returns {{} & (T | U)}\n\t */\n\tfunction deepMerge(opts, overrides, lowerCase) {\n\t\tlet out = /** @type {any} */ ({}),\n\t\t\ti;\n\t\tif (Array.isArray(opts)) {\n\t\t\t// @ts-ignore\n\t\t\treturn opts.concat(overrides);\n\t\t}\n\t\tfor (i in opts) {\n\t\t\tconst key = lowerCase ? i.toLowerCase() : i;\n\t\t\tout[key] = opts[i];\n\t\t}\n\t\tfor (i in overrides) {\n\t\t\tconst key = lowerCase ? i.toLowerCase() : i;\n\t\t\tconst value = /** @type {any} */ (overrides)[i];\n\t\t\tout[key] = key in out && typeof value == 'object' ? deepMerge(out[key], value, key == 'headers') : value;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * Issues a request.\n\t * @public\n\t * @template T\n\t * @param {string | Options} urlOrConfig\n\t * @param {Options} [config = {}]\n\t * @param {any} [_method] (internal)\n\t * @param {any} [data] (internal)\n\t * @param {never} [_undefined] (internal)\n\t * @returns {Promise<Response<T>>}\n\t */\n\tfunction redaxios(urlOrConfig, config, _method, data, _undefined) {\n\t\tlet url = /** @type {string} */ (typeof urlOrConfig != 'string' ? (config = urlOrConfig).url : urlOrConfig);\n\n\t\tconst response = /** @type {Response<any>} */ ({ config });\n\n\t\t/** @type {Options} */\n\t\tconst options = deepMerge(defaults, config);\n\n\t\t/** @type {RequestHeaders} */\n\t\tconst customHeaders = {};\n\n\t\tdata = data || options.data;\n\n\t\t(options.transformRequest || []).map((f) => {\n\t\t\tdata = f(data, options.headers) || data;\n\t\t});\n\n\t\tif (options.auth) {\n\t\t\tcustomHeaders.authorization = options.auth;\n\t\t}\n\n\t\tif (data && typeof data === 'object' && typeof data.append !== 'function' && typeof data.text !== 'function') {\n\t\t\tdata = JSON.stringify(data);\n\t\t\tcustomHeaders['content-type'] = 'application/json';\n\t\t}\n\n\t\ttry {\n\t\t\t// @ts-ignore providing the cookie name without header name is nonsensical anyway\n\t\t\tcustomHeaders[options.xsrfHeaderName] = decodeURIComponent(\n\t\t\t\t// @ts-ignore accessing match()[2] throws for no match, which is intentional\n\t\t\t\tdocument.cookie.match(RegExp('(^|; )' + options.xsrfCookieName + '=([^;]*)'))[2]\n\t\t\t);\n\t\t} catch (e) {}\n\n\t\tif (options.baseURL) {\n\t\t\turl = url.replace(/^(?!.*\\/\\/)\\/?/, options.baseURL + '/');\n\t\t}\n\n\t\tif (options.params) {\n\t\t\turl +=\n\t\t\t\t(~url.indexOf('?') ? '&' : '?') +\n\t\t\t\t(options.paramsSerializer ? options.paramsSerializer(options.params) : new URLSearchParams(options.params));\n\t\t}\n\n\t\tconst fetchFunc = options.fetch || fetch;\n\n\t\treturn fetchFunc(url, {\n\t\t\tmethod: (_method || options.method || 'get').toUpperCase(),\n\t\t\tbody: data,\n\t\t\theaders: deepMerge(options.headers, customHeaders, true),\n\t\t\tcredentials: options.withCredentials ? 'include' : _undefined\n\t\t}).then((res) => {\n\t\t\tfor (const i in res) {\n\t\t\t\tif (typeof res[i] != 'function') response[i] = res[i];\n\t\t\t}\n\n\t\t\tif (options.responseType == 'stream') {\n\t\t\t\tresponse.data = res.body;\n\t\t\t\treturn response;\n\t\t\t}\n\n\t\t\treturn res[options.responseType || 'text']()\n\t\t\t\t.then((data) => {\n\t\t\t\t\tresponse.data = data;\n\t\t\t\t\t// its okay if this fails: response.data will be the unparsed value:\n\t\t\t\t\tresponse.data = JSON.parse(data);\n\t\t\t\t})\n\t\t\t\t.catch(Object)\n\t\t\t\t.then(() => {\n\t\t\t\t\tconst ok = options.validateStatus ? options.validateStatus(res.status) : res.ok;\n\t\t\t\t\treturn ok ? response : Promise.reject(response);\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @public\n\t * @type {AbortController}\n\t */\n\tredaxios.CancelToken = /** @type {any} */ (typeof AbortController == 'function' ? AbortController : Object);\n\n\t/**\n\t * @public\n\t * @type {Options}\n\t */\n\tredaxios.defaults = defaults;\n\n\t/**\n\t * @public\n\t */\n\tredaxios.create = create;\n\n\treturn redaxios;\n}\n\nexport default create();\n","import {\n  type ApproveInput,\n  type BridgeApi,\n  type BridgeOption,\n  type BridgeOptions,\n  type BridgeOutput,\n  type ClaimInput,\n  type GetAllowanceInput,\n  type GetDurationInput,\n  type GetExtraGasInput,\n  type GetLimitInput,\n  type GetMessageFeeInput,\n  type GetOptionsInput,\n  type GetOutputInput,\n  type GetUnclaimedInput,\n  type IsRegisteredInput,\n  type RegisterInput,\n  type TransferInput,\n  validateInput,\n} from '@layerzerolabs/ui-bridge-sdk/v1';\nimport {\n  type Currency,\n  type FeeQuote,\n  CurrencyAmount,\n  type Transaction,\n  type ChainKey,\n  castCurrencyAmountUnsafe,\n  getNativeCurrency,\n  parseCurrencyAmount,\n  assertToken,\n  AdapterParams,\n  MessageFee,\n  isNativeCurrency,\n  MaxUint256,\n} from '@layerzerolabs/ui-core';\nimport {\n  ERC20__api,\n  ONE_ADDRESS,\n  Options,\n  type ProviderFactory,\n  addressToBytes32,\n  createTransaction,\n} from '@layerzerolabs/ui-evm';\nimport type {StargateV2Config} from '../types/StargateV2Config';\nimport {\n  StargateOFT__factory,\n  type StargatePoolNative,\n  StargatePoolNative__factory,\n  StargatePool__factory,\n  TokenMessaging__factory,\n} from '../typechain';\nimport type {SendParamStruct, StargateOFT} from '../typechain/StargateOFT';\nimport type {MessagingFeeStruct, StargatePool} from '../typechain/StargatePool';\nimport {utils} from 'ethers';\nimport {OftCmd} from '../types/OftCmd';\nimport {SendMode} from '../types/SendMode';\n\nexport type StargateV2Fee = {\n  [key: string]: CurrencyAmount;\n};\n\ntype StargateV2Deployment = StargateV2Config['deployments'][ChainKey];\ntype Signer = unknown;\nexport class StargateV2Bridge implements BridgeApi<Signer, StargateV2Fee> {\n  // supported paths\n  protected paths: {\n    srcToken: Currency;\n    dstToken: Currency;\n  }[] = [];\n  constructor(\n    protected config: StargateV2Config,\n    protected getProvider: ProviderFactory,\n    protected erc20 = new ERC20__api(getProvider),\n  ) {\n    this.updatePaths();\n  }\n\n  async getOptions(input: GetOptionsInput): Promise<BridgeOptions> {\n    const srcChainKey = input.srcToken.chainKey;\n    const dstChainKey = input.dstToken.chainKey;\n\n    const nativeDropAmount = await this.getBusNativeDropAmount({srcChainKey, dstChainKey});\n    const busOption: BridgeOption = {\n      mode: 'bus',\n      nativeDrop: {\n        maxAmount: nativeDropAmount,\n        isFixed: true,\n      },\n    };\n\n    const taxiOption: BridgeOption = {\n      mode: 'taxi',\n    };\n\n    return {\n      options: [taxiOption, busOption],\n    };\n  }\n\n  protected updatePaths() {\n    this.paths = [];\n    for (const srcChainKey in this.config.deployments) {\n      for (const dstChainKey in this.config.deployments) {\n        if (srcChainKey === dstChainKey) continue;\n        this.paths.push({\n          srcToken: this.config.deployments[srcChainKey].token,\n          dstToken: this.config.deployments[dstChainKey].token,\n        });\n      }\n    }\n  }\n\n  protected tryGetDeployment(chainKey: ChainKey): StargateV2Deployment | undefined {\n    const deployment = this.config.deployments[chainKey];\n    return deployment;\n  }\n\n  protected getDeployment(chainKey: ChainKey): StargateV2Deployment {\n    const deployment = this.tryGetDeployment(chainKey);\n    if (deployment) return deployment;\n    throw new Error(`Deployment not found for chain ${chainKey}`);\n  }\n\n  protected validateInput(input: TransferInput) {\n    validateInput(input);\n    if (!this.supportsTransfer(input.srcToken, input.dstToken)) {\n      throw new Error(\n        `Unsupported transfer from ${input.srcToken.symbol} to ${input.dstToken.symbol}`,\n      );\n    }\n  }\n\n  protected chainKeyToEid(chainKey: ChainKey) {\n    return this.getDeployment(chainKey).eid;\n  }\n\n  // todo: verify if we can just use one contract\n  protected getBridgeContract(chainKey: ChainKey): StargateOFT | StargatePool | StargatePoolNative {\n    const deployment = this.getDeployment(chainKey);\n    const provider = this.getProvider(chainKey);\n    if (deployment.stargatePoolNative) {\n      return StargatePoolNative__factory.connect(deployment.stargatePoolNative.address, provider);\n    }\n    if (deployment.stargatePool) {\n      return StargatePool__factory.connect(deployment.stargatePool.address, provider);\n    }\n    if (deployment.stargateOft) {\n      return StargateOFT__factory.connect(deployment.stargateOft.address, provider);\n    }\n    throw new Error('No pool or oft contract found');\n  }\n\n  protected getTokenMessagingContract(chainKey: ChainKey) {\n    const deployment = this.getDeployment(chainKey);\n    const provider = this.getProvider(chainKey);\n    return TokenMessaging__factory.connect(deployment.tokenMessaging.address, provider);\n  }\n\n  supportsClaim(token: Currency): boolean {\n    return this.supportsRegister(token);\n  }\n\n  supportsRegister(token: Currency): boolean {\n    const deployment = this.tryGetDeployment(token.chainKey);\n    if (!deployment) return false;\n    return deployment.token.equals(token);\n  }\n\n  supportsTransfer(srcToken: Currency, dstToken: Currency): boolean {\n    const srcDeployment = this.tryGetDeployment(srcToken.chainKey);\n    if (!srcDeployment) return false;\n    const dstDeployment = this.tryGetDeployment(dstToken.chainKey);\n    if (!dstDeployment) return false;\n    if (!srcDeployment.token.equals(srcToken)) return false;\n    if (!dstDeployment.token.equals(dstToken)) return false;\n    return srcDeployment.eid !== dstDeployment.eid;\n  }\n\n  protected toSendMode(mode?: string): SendMode {\n    if (mode === undefined) throw new Error('Mode is undefined');\n    if (mode === 'taxi') return SendMode.TAXI;\n    if (mode === 'bus') return SendMode.BUS;\n    throw new Error(`Unsupported mode: ${mode}`);\n  }\n\n  async getMessageFee(input: GetMessageFeeInput): Promise<FeeQuote> {\n    const sendMode = this.toSendMode(input.mode);\n    const oftCmd = new OftCmd(sendMode, []);\n    const srcToken = input.srcToken;\n    const dstToken = input.dstToken;\n    const srcChainKey = input.srcToken.chainKey;\n    const dstChainKey = input.dstToken.chainKey;\n    const dstEid = this.chainKeyToEid(dstChainKey);\n\n    const bridge = this.getBridgeContract(srcChainKey);\n\n    // mocking\n    const srcAmount = parseCurrencyAmount(srcToken, '1');\n    const dstAmountMin = parseCurrencyAmount(dstToken, '0');\n    const adapterParams = input.adapterParams;\n    const dstAddress = ONE_ADDRESS;\n\n    const sendParam = this.buildSendParam(\n      {\n        dstAddress,\n        srcAmount,\n        dstChainKey,\n        dstAmountMin,\n        adapterParams,\n      },\n      oftCmd,\n    );\n\n    // bus only supports FIXED or NONE dstNativeAmount\n    // ensure that the requested amount is the same as the configured amount\n    const validateDstNativeAmountAsync = async () => {\n      const requestedAmount = input.adapterParams.dstNativeAmount?.toBigInt() ?? BigInt(0);\n      // nothing to validate if not in BUS mode\n      if (sendMode !== SendMode.BUS) return;\n      // nothing to validate if requested amount is 0\n      if (requestedAmount === BigInt(0)) return;\n      const tokenMessagingContract = this.getTokenMessagingContract(srcChainKey);\n      const configuredAmount_ = await tokenMessagingContract.nativeDropAmounts(dstEid);\n      const configuredAmount = configuredAmount_.toBigInt();\n      if (requestedAmount !== configuredAmount) {\n        throw new StargateV2BusDstNativeAmountError(requestedAmount, configuredAmount);\n      }\n    };\n\n    // perf: optimizing for single multicall request\n    const [sendQuote] = await Promise.all([\n      bridge.quoteSend(sendParam, false),\n      validateDstNativeAmountAsync(),\n    ]);\n\n    return MessageFee.from(srcChainKey, {\n      nativeFee: sendQuote.nativeFee.toBigInt(),\n      zroFee: sendQuote.lzTokenFee.toBigInt(),\n    });\n  }\n\n  async getOutput(input: GetOutputInput): Promise<BridgeOutput<StargateV2Fee>> {\n    const sendMode = SendMode.TAXI;\n    const oftCmd = new OftCmd(sendMode, []);\n\n    const srcToken = input.srcAmount.token;\n    const dstToken = input.dstToken;\n    const srcChainKey = srcToken.chainKey;\n    const dstChainKey = dstToken.chainKey;\n\n    const srcAmount = input.srcAmount;\n\n    // todo: require dstAddress and dstAmountMin\n    const dstAmountMin = input.dstAmountMin ?? parseCurrencyAmount(dstToken, '0');\n    const dstAddress = input.dstAddress ?? ONE_ADDRESS;\n    const adapterParams = AdapterParams.forV1(0);\n\n    const _sendParam = this.buildSendParam(\n      {\n        srcAmount,\n        dstAmountMin,\n        dstAddress,\n        dstChainKey,\n        adapterParams,\n      },\n      oftCmd,\n    );\n\n    const contract = this.getBridgeContract(srcChainKey);\n    const quote = await contract.quoteOFT(_sendParam);\n    const amountReceivedLD = CurrencyAmount.fromBigInt(\n      srcToken,\n      quote.receipt.amountReceivedLD.toBigInt(),\n    );\n    const amountReceivedRD = castCurrencyAmountUnsafe(amountReceivedLD, dstToken);\n\n    const fee: StargateV2Fee = {};\n    for (const feeDetail of quote.oftFeeDetails) {\n      const amount = CurrencyAmount.fromBigInt(srcToken, feeDetail.feeAmountLD.toBigInt());\n      fee[feeDetail.description] = amount;\n    }\n\n    const output: BridgeOutput<StargateV2Fee> = {\n      fee,\n      dstAmount: amountReceivedRD,\n    };\n    return output;\n  }\n\n  getDuration(input: GetDurationInput): Promise<number> {\n    throw new Error('Method not implemented.');\n  }\n\n  async getLimit(input: GetLimitInput): Promise<CurrencyAmount<Currency>> {\n    const sendMode = SendMode.TAXI;\n    const oftCmd = new OftCmd(sendMode, []);\n\n    const srcToken = input.srcToken;\n    const dstToken = input.dstToken;\n    const srcChainKey = input.srcToken.chainKey;\n    const dstChainKey = input.dstToken.chainKey;\n\n    // mocking\n    const srcAmount = CurrencyAmount.fromBigInt(srcToken, MAX_64_BIT_INT);\n    const dstAmountMin = CurrencyAmount.fromBigInt(dstToken, BigInt(0));\n    const dstAddress = ONE_ADDRESS;\n    const adapterParams = AdapterParams.forV1(0);\n\n    const sendParam = this.buildSendParam(\n      {\n        srcAmount,\n        dstAmountMin,\n        dstAddress,\n        dstChainKey,\n        adapterParams,\n      },\n      oftCmd,\n    );\n\n    const contract = this.getBridgeContract(srcChainKey);\n    const quote = await contract.quoteOFT(sendParam);\n\n    // todo: check if maxAmountLD is max OUTPUT or max INPUT -- otherwise use receipt to figure out max input\n    const maxAmountLD = CurrencyAmount.fromBigInt(srcToken, quote.limit.maxAmountLD.toBigInt());\n    return maxAmountLD;\n  }\n\n  async getExtraGas(input: GetExtraGasInput): Promise<number> {\n    return 0;\n  }\n\n  async getAllowance(input: GetAllowanceInput): Promise<CurrencyAmount<Currency>> {\n    if (isNativeCurrency(input.token)) {\n      return CurrencyAmount.fromBigInt(input.token, MaxUint256);\n    }\n    const chainKey = input.token.chainKey;\n    const bridge = this.getBridgeContract(chainKey);\n    return this.erc20.forToken(input.token).allowance(input.address, bridge.address);\n  }\n  getUnclaimed(input: GetUnclaimedInput): Promise<CurrencyAmount<Currency>> {\n    throw new Error('Method not implemented.');\n  }\n  async isRegistered(input: IsRegisteredInput): Promise<boolean> {\n    return true;\n  }\n\n  async transfer(input: TransferInput): Promise<Transaction<unknown>> {\n    this.validateInput(input);\n    const srcChainKey = input.srcChainKey;\n    const sendMode = this.toSendMode(input.mode);\n    const oftCmd = new OftCmd(sendMode, []);\n    if (sendMode === SendMode.DRIVE) throw new Error('Drive mode not supported');\n\n    const provider = this.getProvider(input.srcChainKey);\n    const from = input.srcAddress;\n    const value = isNativeCurrency(input.srcToken)\n      ? input.srcAmount.add(input.fee.nativeFee).quotient\n      : input.fee.nativeFee.quotient;\n\n    const sendParam = this.buildSendParam(input, oftCmd);\n    const fee = this.buildMessagingFee(input);\n    const refundAddress = input.srcAddress;\n\n    const bridge = this.getBridgeContract(input.srcChainKey);\n\n    const populatedTransaction = await bridge.populateTransaction.send(\n      sendParam,\n      fee,\n      refundAddress,\n      {\n        from,\n        value,\n      },\n    );\n\n    return createTransaction(populatedTransaction, {provider, chainKey: srcChainKey});\n  }\n\n  protected buildMessagingFee(input: TransferInput): MessagingFeeStruct {\n    return {\n      lzTokenFee: input.fee.zroFee.quotient,\n      nativeFee: input.fee.nativeFee.quotient,\n    };\n  }\n\n  protected async getBusNativeDropAmount({\n    srcChainKey,\n    dstChainKey,\n  }: {\n    srcChainKey: ChainKey;\n    dstChainKey: ChainKey;\n  }): Promise<CurrencyAmount> {\n    const dstEid = this.chainKeyToEid(dstChainKey);\n    const nativeDrop_ = await this.getTokenMessagingContract(srcChainKey).nativeDropAmounts(dstEid);\n    const nativeDrop = CurrencyAmount.fromBigInt(\n      getNativeCurrency(srcChainKey),\n      nativeDrop_.toBigInt(),\n    );\n    return nativeDrop;\n  }\n\n  // dev: this method does NOT ensure that nativeDrop amount is valid\n  protected serializeOptions(oftCmd: OftCmd, adapterParams: AdapterParams) {\n    if (isNativeDrop(adapterParams)) {\n      if (oftCmd.sendMode === SendMode.TAXI) {\n        const options = Options.newOptions().addExecutorNativeDropOption(\n          adapterParams.dstNativeAmount.quotient,\n          adapterParams.dstNativeAddress,\n        );\n        return options.toBytes();\n      }\n      if (oftCmd.sendMode === SendMode.BUS) {\n        if (adapterParams.dstNativeAmount.greaterThan(0)) {\n          const OPTIONS_TYPE = 1;\n          return utils.arrayify(utils.solidityPack(['uint16', 'uint8'], [OPTIONS_TYPE, 1]));\n        }\n      }\n    }\n    return utils.arrayify('0x');\n  }\n\n  protected buildSendParam(input: BuildSendParamInput, oftCmd: OftCmd): SendParamStruct {\n    const srcToken = input.srcAmount.token;\n    const dstEid = this.chainKeyToEid(input.dstChainKey);\n    const composeMsg = utils.arrayify('0x');\n\n    const extraOptions = this.serializeOptions(oftCmd, input.adapterParams);\n\n    const to = utils.hexlify(addressToBytes32(input.dstAddress));\n    const amountLD = input.srcAmount.quotient;\n    const minAmountLD = castCurrencyAmountUnsafe(input.dstAmountMin, srcToken).quotient;\n    return {\n      amountLD: amountLD,\n      to: to,\n      dstEid: dstEid,\n      composeMsg: composeMsg,\n      extraOptions: extraOptions,\n      minAmountLD: minAmountLD,\n      oftCmd: oftCmd.toBytes(),\n    };\n  }\n\n  claim(input: ClaimInput): Promise<Transaction<unknown>> {\n    throw new Error('Method not implemented.');\n  }\n  register(register: RegisterInput): Promise<Transaction<unknown>> {\n    throw new Error('Method not implemented.');\n  }\n  approve(input: ApproveInput): Promise<Transaction<unknown>> {\n    const srcChainKey = input.amount.token.chainKey;\n    assertToken(input.amount.token);\n    const bridge = this.getBridgeContract(srcChainKey);\n    return this.erc20.forToken(input.amount.token).approve(input.amount, bridge.address);\n  }\n}\n\nconst MAX_64_BIT_INT = BigInt('18446744073709551615');\n\nfunction isNativeDrop(adapterParams: AdapterParams): adapterParams is NativeDropAdapterParams {\n  return Boolean(\n    adapterParams.version === 2 &&\n      adapterParams.dstNativeAmount?.greaterThan(0) &&\n      adapterParams.dstNativeAddress,\n  );\n}\n\ninterface BuildSendParamInput {\n  srcAmount: CurrencyAmount;\n  dstAmountMin: CurrencyAmount;\n  dstAddress: string;\n  dstChainKey: ChainKey;\n  adapterParams: AdapterParams;\n}\n\ntype NativeDropAdapterParams = AdapterParams & {\n  version: 2;\n  dstNativeAmount: CurrencyAmount;\n  dstNativeAddress: string;\n};\n\nexport class StargateV2BusDstNativeAmountError extends Error {\n  constructor(\n    public readonly requestedAmount: bigint,\n    public readonly configuredAmount: bigint,\n  ) {\n    super(\n      `Invalid dst native amount: requested ${requestedAmount}, but bus is configured to ${configuredAmount}`,\n    );\n  }\n}\n","import {utils} from 'ethers';\nimport {SendMode} from './SendMode';\n\nexport type Passenger = {\n  address: string;\n  amount: string;\n};\n\nexport class OftCmd {\n  constructor(\n    public sendMode: number,\n    public passengers: Passenger[],\n  ) {}\n\n  toBytes(): string {\n    if (this.sendMode === SendMode.TAXI) {\n      return '0x';\n    } else if (this.sendMode === SendMode.DRIVE) {\n      const passengerBytes = this.passengers\n        .map((p) =>\n          utils.solidityPack(['bytes32', 'uint64'], [p.address, p.amount]).replace('0x', ''),\n        )\n        .join('');\n      return '0x' + passengerBytes;\n    } else {\n      // BUS\n      return utils.solidityPack(['uint8'], [this.sendMode]);\n    }\n  }\n}\n","export enum SendMode {\n  TAXI = 0,\n  BUS = 1,\n  DRIVE = 2,\n}\n","export enum MsgType {\n  SEND_TOKEN = 0,\n  SEND_CREDIT = 1,\n}\n","export const StargateV2AssetId = {\n  1: 'USDC',\n  2: 'USDT',\n  13: 'ETH',\n  17: 'METIS',\n  22: 'mETH',\n} as const;\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { OFTToken, OFTTokenInterface } from \"../OFTToken\";\n\nconst _abi = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"_name\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"_symbol\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"allowance\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"needed\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"ERC20InsufficientAllowance\",\n    \"type\": \"error\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"sender\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"balance\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"needed\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"ERC20InsufficientBalance\",\n    \"type\": \"error\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"approver\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"ERC20InvalidApprover\",\n    \"type\": \"error\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"receiver\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"ERC20InvalidReceiver\",\n    \"type\": \"error\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"sender\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"ERC20InvalidSender\",\n    \"type\": \"error\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"ERC20InvalidSpender\",\n    \"type\": \"error\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Approval\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"allowance\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"spender\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"approve\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"account\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"decimals\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint8\",\n        \"name\": \"\",\n        \"type\": \"uint8\"\n      }\n    ],\n    \"stateMutability\": \"pure\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"_to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"_amount\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"mint\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"name\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transfer\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"value\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n] as const;\n\nexport class OFTToken__factory {\n  static readonly abi = _abi;\n  static createInterface(): OFTTokenInterface {\n    return new utils.Interface(_abi) as OFTTokenInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): OFTToken {\n    return new Contract(address, _abi, signerOrProvider) as OFTToken;\n  }\n}\n"]}