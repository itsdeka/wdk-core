{"version":3,"sources":["../src/v1/validateInput.ts","../src/v1/validateOutput.ts"],"names":["assert"],"mappings":";AAAA,SAAQ,QAAQ,yBAAwB;AAGjC,SAAS,cAAc,OAAsD;AAClF;AAAA,IACE,MAAM,gBAAgB,MAAM,SAAS;AAAA,IACrC;AAAA,EACF;AACA;AAAA,IACE,MAAM,gBAAgB,MAAM,SAAS;AAAA,IACrC;AAAA,EACF;AACA;AAAA,IACE,MAAM,SAAS,OAAO,MAAM,UAAU,KAAK;AAAA,IAC3C;AAAA,EACF;AACA;AAAA,IACE,MAAM,SAAS,OAAO,MAAM,aAAa,KAAK;AAAA,IAC9C;AAAA,EACF;AACA,MAAI,MAAM,cAAc,YAAY,GAAG;AACrC,WAAO,MAAM,cAAc,iBAAiB,8CAA8C;AAC1F,WAAO,MAAM,cAAc,gBAAgB,MAAM,OAAO,kBAAkB,MAAM,WAAW,CAAC,CAAC;AAAA,EAC/F;AACA,SAAO,MAAM,YAAY,2BAA2B;AACpD,SAAO,MAAM,YAAY,2BAA2B;AACpD,SAAO,mBAAmB,SAAS,MAAM,eAAe,8BAA8B;AACxF;;;AC3BA,SAAQ,UAAAA,eAAiD;AAGlD,SAAS,eACd,WACA,UACA,OACA;AACA,EAAAA,QAAO,MAAM,UAAU,MAAM,OAAO,QAAQ,CAAC;AAC/C","sourcesContent":["import {assert, getNativeCurrency} from '@layerzerolabs/ui-core';\nimport type {TransferInput} from './types';\n\nexport function validateInput(input: TransferInput): asserts input is TransferInput {\n  assert(\n    input.srcChainKey === input.srcToken.chainKey,\n    'Provided srcChainKey does not match srcToken.chainKey',\n  );\n  assert(\n    input.dstChainKey === input.dstToken.chainKey,\n    'Provided dstChainKey does not match dstToken.chainKey',\n  );\n  assert(\n    input.srcToken.equals(input.srcAmount.token),\n    'Provided srcToken does not match amount.currency',\n  );\n  assert(\n    input.dstToken.equals(input.dstAmountMin.token),\n    'Provided dstToken does not match minAmount.currency',\n  );\n  if (input.adapterParams.version === 2) {\n    assert(input.adapterParams.dstNativeAmount, 'Provided empty adapterParams.dstNativeAmount');\n    assert(input.adapterParams.dstNativeAmount.token.equals(getNativeCurrency(input.dstChainKey)));\n  }\n  assert(input.srcAddress, 'Provided empty srcAddress');\n  assert(input.dstAddress, 'Provided empty dstAddress');\n  assert('adapterParams' in input && input.adapterParams, 'Provided empty adapterParams');\n}\n","import {assert, type CurrencyAmount, type Currency} from '@layerzerolabs/ui-core';\nimport type {BridgeFeeBase, BridgeOutput} from './types';\n\nexport function validateOutput<BridgeFee extends BridgeFeeBase>(\n  srcAmount: CurrencyAmount,\n  dstToken: Currency,\n  quote: BridgeOutput<BridgeFee>,\n) {\n  assert(quote.dstAmount.token.equals(dstToken));\n}\n"]}