/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface SideChainLPInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "implementation()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "addToken(address,uint256,uint16,uint16,address)": FunctionFragment;
    "configToken(address,uint256,uint16,uint16,bool)": FunctionFragment;
    "depositUSDV(uint256)": FunctionFragment;
    "getAllTokens()": FunctionFragment;
    "getSupportedTokens()": FunctionFragment;
    "getUSDVOut(address,uint256)": FunctionFragment;
    "getUSDVOutVerbose(address,uint256)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "lp()": FunctionFragment;
    "operator()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeToken(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setLp(address)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setPaused(bool)": FunctionFragment;
    "setWhitelist(address,bool)": FunctionFragment;
    "swapToUSDV(address,uint256,uint64,address)": FunctionFragment;
    "tokenConfigs(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdv()": FunctionFragment;
    "whitelisted(address)": FunctionFragment;
    "withdrawToken(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "implementation"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "addToken"
      | "configToken"
      | "depositUSDV"
      | "getAllTokens"
      | "getSupportedTokens"
      | "getUSDVOut"
      | "getUSDVOutVerbose"
      | "initialize"
      | "lp"
      | "operator"
      | "owner"
      | "paused"
      | "removeToken"
      | "renounceOwnership"
      | "setLp"
      | "setOperator"
      | "setPaused"
      | "setWhitelist"
      | "swapToUSDV"
      | "tokenConfigs"
      | "transferOwnership"
      | "usdv"
      | "whitelisted"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUSDV",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDVOut",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDVOutVerbose",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "lp", values?: undefined): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaused",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapToUSDV",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenConfigs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "usdv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUSDV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUSDVOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUSDVOutVerbose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapToUSDV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "AddToken(address,uint256,uint16,uint16,address)": EventFragment;
    "ConfigToken(address,uint256,uint16,uint16,bool)": EventFragment;
    "DepositUSDV(uint256,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RemoveToken(address)": EventFragment;
    "SetLp(address)": EventFragment;
    "SetOperator(address)": EventFragment;
    "SetWhitelist(address,bool)": EventFragment;
    "SwapToUSDV(address,address,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawToken(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositUSDV"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOperator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapToUSDV"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawToken"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface AddTokenEventObject {
  token: string;
  cap: BigNumber;
  feeBps: number;
  rewardBps: number;
  receiver: string;
}
export type AddTokenEvent = TypedEvent<
  [string, BigNumber, number, number, string],
  AddTokenEventObject
>;

export type AddTokenEventFilter = TypedEventFilter<AddTokenEvent>;

export interface ConfigTokenEventObject {
  token: string;
  cap: BigNumber;
  feeBps: number;
  rewardBps: number;
  enabled: boolean;
}
export type ConfigTokenEvent = TypedEvent<
  [string, BigNumber, number, number, boolean],
  ConfigTokenEventObject
>;

export type ConfigTokenEventFilter = TypedEventFilter<ConfigTokenEvent>;

export interface DepositUSDVEventObject {
  amount: BigNumber;
  source: string;
}
export type DepositUSDVEvent = TypedEvent<
  [BigNumber, string],
  DepositUSDVEventObject
>;

export type DepositUSDVEventFilter = TypedEventFilter<DepositUSDVEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RemoveTokenEventObject {
  token: string;
}
export type RemoveTokenEvent = TypedEvent<[string], RemoveTokenEventObject>;

export type RemoveTokenEventFilter = TypedEventFilter<RemoveTokenEvent>;

export interface SetLpEventObject {
  lp: string;
}
export type SetLpEvent = TypedEvent<[string], SetLpEventObject>;

export type SetLpEventFilter = TypedEventFilter<SetLpEvent>;

export interface SetOperatorEventObject {
  operator: string;
}
export type SetOperatorEvent = TypedEvent<[string], SetOperatorEventObject>;

export type SetOperatorEventFilter = TypedEventFilter<SetOperatorEvent>;

export interface SetWhitelistEventObject {
  user: string;
  flag: boolean;
}
export type SetWhitelistEvent = TypedEvent<
  [string, boolean],
  SetWhitelistEventObject
>;

export type SetWhitelistEventFilter = TypedEventFilter<SetWhitelistEvent>;

export interface SwapToUSDVEventObject {
  caller: string;
  fromToken: string;
  fromTokenAmount: BigNumber;
  usdvOut: BigNumber;
}
export type SwapToUSDVEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  SwapToUSDVEventObject
>;

export type SwapToUSDVEventFilter = TypedEventFilter<SwapToUSDVEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawTokenEventObject {
  token: string;
  amount: BigNumber;
  target: string;
}
export type WithdrawTokenEvent = TypedEvent<
  [string, BigNumber, string],
  WithdrawTokenEventObject
>;

export type WithdrawTokenEventFilter = TypedEventFilter<WithdrawTokenEvent>;

export interface SideChainLP extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SideChainLPInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    implementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToken(
      _token: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      _feeBps: PromiseOrValue<BigNumberish>,
      _rewardBps: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configToken(
      _token: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      _feeBps: PromiseOrValue<BigNumberish>,
      _rewardBps: PromiseOrValue<BigNumberish>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositUSDV(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    getSupportedTokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    getUSDVOut(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { usdvOut: BigNumber }>;

    getUSDVOutVerbose(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { requestedOut: BigNumber; rewardOut: BigNumber }
    >;

    initialize(
      _usdv: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      _lp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lp(overrides?: CallOverrides): Promise<[string]>;

    operator(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLp(
      _lp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaused(
      _p: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWhitelist(
      _user: PromiseOrValue<string>,
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapToUSDV(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      _minUSDVOut: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenConfigs(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, number, string, BigNumber, BigNumber] & {
        enabled: boolean;
        feeBps: number;
        rewardBps: number;
        receiver: string;
        cap: BigNumber;
        div: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdv(overrides?: CallOverrides): Promise<[string]>;

    whitelisted(
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  admin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  implementation(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToken(
    _token: PromiseOrValue<string>,
    _cap: PromiseOrValue<BigNumberish>,
    _feeBps: PromiseOrValue<BigNumberish>,
    _rewardBps: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configToken(
    _token: PromiseOrValue<string>,
    _cap: PromiseOrValue<BigNumberish>,
    _feeBps: PromiseOrValue<BigNumberish>,
    _rewardBps: PromiseOrValue<BigNumberish>,
    _enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositUSDV(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllTokens(overrides?: CallOverrides): Promise<string[]>;

  getSupportedTokens(overrides?: CallOverrides): Promise<string[]>;

  getUSDVOut(
    _fromToken: PromiseOrValue<string>,
    _fromTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUSDVOutVerbose(
    _fromToken: PromiseOrValue<string>,
    _fromTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { requestedOut: BigNumber; rewardOut: BigNumber }
  >;

  initialize(
    _usdv: PromiseOrValue<string>,
    _operator: PromiseOrValue<string>,
    _lp: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lp(overrides?: CallOverrides): Promise<string>;

  operator(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLp(
    _lp: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _operator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaused(
    _p: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWhitelist(
    _user: PromiseOrValue<string>,
    _flag: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapToUSDV(
    _fromToken: PromiseOrValue<string>,
    _fromTokenAmount: PromiseOrValue<BigNumberish>,
    _minUSDVOut: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenConfigs(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, number, string, BigNumber, BigNumber] & {
      enabled: boolean;
      feeBps: number;
      rewardBps: number;
      receiver: string;
      cap: BigNumber;
      div: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdv(overrides?: CallOverrides): Promise<string>;

  whitelisted(
    caller: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawToken(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      _token: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      _feeBps: PromiseOrValue<BigNumberish>,
      _rewardBps: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    configToken(
      _token: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      _feeBps: PromiseOrValue<BigNumberish>,
      _rewardBps: PromiseOrValue<BigNumberish>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositUSDV(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllTokens(overrides?: CallOverrides): Promise<string[]>;

    getSupportedTokens(overrides?: CallOverrides): Promise<string[]>;

    getUSDVOut(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUSDVOutVerbose(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { requestedOut: BigNumber; rewardOut: BigNumber }
    >;

    initialize(
      _usdv: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      _lp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    lp(overrides?: CallOverrides): Promise<string>;

    operator(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setLp(
      _lp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaused(
      _p: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelist(
      _user: PromiseOrValue<string>,
      _flag: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapToUSDV(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      _minUSDVOut: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenConfigs(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, number, string, BigNumber, BigNumber] & {
        enabled: boolean;
        feeBps: number;
        rewardBps: number;
        receiver: string;
        cap: BigNumber;
        div: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdv(overrides?: CallOverrides): Promise<string>;

    whitelisted(
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "AddToken(address,uint256,uint16,uint16,address)"(
      token?: PromiseOrValue<string> | null,
      cap?: null,
      feeBps?: null,
      rewardBps?: null,
      receiver?: null
    ): AddTokenEventFilter;
    AddToken(
      token?: PromiseOrValue<string> | null,
      cap?: null,
      feeBps?: null,
      rewardBps?: null,
      receiver?: null
    ): AddTokenEventFilter;

    "ConfigToken(address,uint256,uint16,uint16,bool)"(
      token?: PromiseOrValue<string> | null,
      cap?: null,
      feeBps?: null,
      rewardBps?: null,
      enabled?: null
    ): ConfigTokenEventFilter;
    ConfigToken(
      token?: PromiseOrValue<string> | null,
      cap?: null,
      feeBps?: null,
      rewardBps?: null,
      enabled?: null
    ): ConfigTokenEventFilter;

    "DepositUSDV(uint256,address)"(
      amount?: null,
      source?: null
    ): DepositUSDVEventFilter;
    DepositUSDV(amount?: null, source?: null): DepositUSDVEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RemoveToken(address)"(token?: null): RemoveTokenEventFilter;
    RemoveToken(token?: null): RemoveTokenEventFilter;

    "SetLp(address)"(lp?: PromiseOrValue<string> | null): SetLpEventFilter;
    SetLp(lp?: PromiseOrValue<string> | null): SetLpEventFilter;

    "SetOperator(address)"(operator?: null): SetOperatorEventFilter;
    SetOperator(operator?: null): SetOperatorEventFilter;

    "SetWhitelist(address,bool)"(
      user?: PromiseOrValue<string> | null,
      flag?: null
    ): SetWhitelistEventFilter;
    SetWhitelist(
      user?: PromiseOrValue<string> | null,
      flag?: null
    ): SetWhitelistEventFilter;

    "SwapToUSDV(address,address,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      fromToken?: PromiseOrValue<string> | null,
      fromTokenAmount?: null,
      usdvOut?: null
    ): SwapToUSDVEventFilter;
    SwapToUSDV(
      caller?: PromiseOrValue<string> | null,
      fromToken?: PromiseOrValue<string> | null,
      fromTokenAmount?: null,
      usdvOut?: null
    ): SwapToUSDVEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WithdrawToken(address,uint256,address)"(
      token?: PromiseOrValue<string> | null,
      amount?: null,
      target?: null
    ): WithdrawTokenEventFilter;
    WithdrawToken(
      token?: PromiseOrValue<string> | null,
      amount?: null,
      target?: null
    ): WithdrawTokenEventFilter;
  };

  estimateGas: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    implementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToken(
      _token: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      _feeBps: PromiseOrValue<BigNumberish>,
      _rewardBps: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configToken(
      _token: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      _feeBps: PromiseOrValue<BigNumberish>,
      _rewardBps: PromiseOrValue<BigNumberish>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositUSDV(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getUSDVOut(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUSDVOutVerbose(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _usdv: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      _lp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lp(overrides?: CallOverrides): Promise<BigNumber>;

    operator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLp(
      _lp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaused(
      _p: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWhitelist(
      _user: PromiseOrValue<string>,
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapToUSDV(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      _minUSDVOut: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenConfigs(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdv(overrides?: CallOverrides): Promise<BigNumber>;

    whitelisted(
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    implementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      _token: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      _feeBps: PromiseOrValue<BigNumberish>,
      _rewardBps: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configToken(
      _token: PromiseOrValue<string>,
      _cap: PromiseOrValue<BigNumberish>,
      _feeBps: PromiseOrValue<BigNumberish>,
      _rewardBps: PromiseOrValue<BigNumberish>,
      _enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositUSDV(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSupportedTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUSDVOut(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUSDVOutVerbose(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _usdv: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      _lp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLp(
      _lp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaused(
      _p: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      _user: PromiseOrValue<string>,
      _flag: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapToUSDV(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      _minUSDVOut: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenConfigs(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelisted(
      caller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
