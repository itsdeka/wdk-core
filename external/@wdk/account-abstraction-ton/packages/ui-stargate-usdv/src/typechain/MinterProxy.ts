/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type MessagingFeeStruct = {
  nativeFee: PromiseOrValue<BigNumberish>;
  lzTokenFee: PromiseOrValue<BigNumberish>;
};

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
  nativeFee: BigNumber;
  lzTokenFee: BigNumber;
};

export declare namespace IMinter {
  export type SwapParamStruct = {
    fromToken: PromiseOrValue<string>;
    fromTokenAmount: PromiseOrValue<BigNumberish>;
    minUSDVOut: PromiseOrValue<BigNumberish>;
  };

  export type SwapParamStructOutput = [string, BigNumber, BigNumber] & {
    fromToken: string;
    fromTokenAmount: BigNumber;
    minUSDVOut: BigNumber;
  };
}

export interface MinterProxyInterface extends utils.Interface {
  functions: {
    "addMinterCodeHash(uint256)": FunctionFragment;
    "colorToMinter(uint32)": FunctionFragment;
    "getMinterCodeHashes()": FunctionFragment;
    "getSupportedFromTokens(uint32)": FunctionFragment;
    "getSwapToUSDVAmountOut(address,uint256,uint32)": FunctionFragment;
    "getSwapToUSDVAmountOutVerbose(address,uint256,uint32)": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "minterToColor(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerMinter(address)": FunctionFragment;
    "removeMinterCodeHash(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setToSTBTLp(address)": FunctionFragment;
    "swapToUSDV((address,uint256,uint64),address,uint32)": FunctionFragment;
    "swapToUSDVAndSend((address,uint256,uint64),bytes32,uint32,bytes,(uint256,uint256),address,uint32)": FunctionFragment;
    "toSTBTLp()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unregisterMinter(address)": FunctionFragment;
    "usdv()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addMinterCodeHash"
      | "colorToMinter"
      | "getMinterCodeHashes"
      | "getSupportedFromTokens"
      | "getSwapToUSDVAmountOut"
      | "getSwapToUSDVAmountOutVerbose"
      | "isRegistered"
      | "minterToColor"
      | "owner"
      | "registerMinter"
      | "removeMinterCodeHash"
      | "renounceOwnership"
      | "setToSTBTLp"
      | "swapToUSDV"
      | "swapToUSDVAndSend"
      | "toSTBTLp"
      | "transferOwnership"
      | "unregisterMinter"
      | "usdv"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addMinterCodeHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "colorToMinter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinterCodeHashes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedFromTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapToUSDVAmountOut",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapToUSDVAmountOutVerbose",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minterToColor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerMinter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinterCodeHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setToSTBTLp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapToUSDV",
    values: [
      IMinter.SwapParamStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapToUSDVAndSend",
    values: [
      IMinter.SwapParamStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      MessagingFeeStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "toSTBTLp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterMinter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "usdv", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addMinterCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "colorToMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinterCodeHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedFromTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapToUSDVAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapToUSDVAmountOutVerbose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minterToColor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMinterCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setToSTBTLp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapToUSDV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapToUSDVAndSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toSTBTLp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdv", data: BytesLike): Result;

  events: {
    "AddedMinterCodeHash(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RegisteredMinter(address,uint32)": EventFragment;
    "RemovedMinterCodeHash(uint256)": EventFragment;
    "SetToSTBTLp(address)": EventFragment;
    "UnregisteredMinter(address,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedMinterCodeHash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredMinter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedMinterCodeHash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetToSTBTLp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnregisteredMinter"): EventFragment;
}

export interface AddedMinterCodeHashEventObject {
  hash: BigNumber;
}
export type AddedMinterCodeHashEvent = TypedEvent<
  [BigNumber],
  AddedMinterCodeHashEventObject
>;

export type AddedMinterCodeHashEventFilter =
  TypedEventFilter<AddedMinterCodeHashEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RegisteredMinterEventObject {
  minter: string;
  color: number;
}
export type RegisteredMinterEvent = TypedEvent<
  [string, number],
  RegisteredMinterEventObject
>;

export type RegisteredMinterEventFilter =
  TypedEventFilter<RegisteredMinterEvent>;

export interface RemovedMinterCodeHashEventObject {
  hash: BigNumber;
}
export type RemovedMinterCodeHashEvent = TypedEvent<
  [BigNumber],
  RemovedMinterCodeHashEventObject
>;

export type RemovedMinterCodeHashEventFilter =
  TypedEventFilter<RemovedMinterCodeHashEvent>;

export interface SetToSTBTLpEventObject {
  toSTBTLp: string;
}
export type SetToSTBTLpEvent = TypedEvent<[string], SetToSTBTLpEventObject>;

export type SetToSTBTLpEventFilter = TypedEventFilter<SetToSTBTLpEvent>;

export interface UnregisteredMinterEventObject {
  minter: string;
  color: number;
}
export type UnregisteredMinterEvent = TypedEvent<
  [string, number],
  UnregisteredMinterEventObject
>;

export type UnregisteredMinterEventFilter =
  TypedEventFilter<UnregisteredMinterEvent>;

export interface MinterProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MinterProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMinterCodeHash(
      _hash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    colorToMinter(
      color: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { minter: string }>;

    getMinterCodeHashes(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getSupportedFromTokens(
      _color: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    getSwapToUSDVAmountOut(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      _mintColor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { usdvOut: BigNumber }>;

    getSwapToUSDVAmountOutVerbose(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      _mintColor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        usdvOut: BigNumber;
        fee: BigNumber;
        reward: BigNumber;
      }
    >;

    isRegistered(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minterToColor(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number] & { color: number }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerMinter(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMinterCodeHash(
      _hash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToSTBTLp(
      _toSTBTLp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapToUSDV(
      _param: IMinter.SwapParamStruct,
      _usdvReceiver: PromiseOrValue<string>,
      _mintColor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapToUSDVAndSend(
      _param: IMinter.SwapParamStruct,
      _usdvReceiver: PromiseOrValue<BytesLike>,
      _dstEid: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _msgFee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      _mintColor: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toSTBTLp(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterMinter(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdv(overrides?: CallOverrides): Promise<[string]>;
  };

  addMinterCodeHash(
    _hash: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  colorToMinter(
    color: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMinterCodeHashes(overrides?: CallOverrides): Promise<BigNumber[]>;

  getSupportedFromTokens(
    _color: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getSwapToUSDVAmountOut(
    _fromToken: PromiseOrValue<string>,
    _fromTokenAmount: PromiseOrValue<BigNumberish>,
    _mintColor: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapToUSDVAmountOutVerbose(
    _fromToken: PromiseOrValue<string>,
    _fromTokenAmount: PromiseOrValue<BigNumberish>,
    _mintColor: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      usdvOut: BigNumber;
      fee: BigNumber;
      reward: BigNumber;
    }
  >;

  isRegistered(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minterToColor(
    minter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerMinter(
    _minter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMinterCodeHash(
    _hash: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToSTBTLp(
    _toSTBTLp: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapToUSDV(
    _param: IMinter.SwapParamStruct,
    _usdvReceiver: PromiseOrValue<string>,
    _mintColor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapToUSDVAndSend(
    _param: IMinter.SwapParamStruct,
    _usdvReceiver: PromiseOrValue<BytesLike>,
    _dstEid: PromiseOrValue<BigNumberish>,
    _extraOptions: PromiseOrValue<BytesLike>,
    _msgFee: MessagingFeeStruct,
    _refundAddress: PromiseOrValue<string>,
    _mintColor: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toSTBTLp(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterMinter(
    _minter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdv(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addMinterCodeHash(
      _hash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    colorToMinter(
      color: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMinterCodeHashes(overrides?: CallOverrides): Promise<BigNumber[]>;

    getSupportedFromTokens(
      _color: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getSwapToUSDVAmountOut(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      _mintColor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapToUSDVAmountOutVerbose(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      _mintColor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        usdvOut: BigNumber;
        fee: BigNumber;
        reward: BigNumber;
      }
    >;

    isRegistered(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minterToColor(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerMinter(
      _minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMinterCodeHash(
      _hash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setToSTBTLp(
      _toSTBTLp: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapToUSDV(
      _param: IMinter.SwapParamStruct,
      _usdvReceiver: PromiseOrValue<string>,
      _mintColor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapToUSDVAndSend(
      _param: IMinter.SwapParamStruct,
      _usdvReceiver: PromiseOrValue<BytesLike>,
      _dstEid: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _msgFee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      _mintColor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toSTBTLp(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterMinter(
      _minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdv(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AddedMinterCodeHash(uint256)"(hash?: null): AddedMinterCodeHashEventFilter;
    AddedMinterCodeHash(hash?: null): AddedMinterCodeHashEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RegisteredMinter(address,uint32)"(
      minter?: null,
      color?: null
    ): RegisteredMinterEventFilter;
    RegisteredMinter(minter?: null, color?: null): RegisteredMinterEventFilter;

    "RemovedMinterCodeHash(uint256)"(
      hash?: null
    ): RemovedMinterCodeHashEventFilter;
    RemovedMinterCodeHash(hash?: null): RemovedMinterCodeHashEventFilter;

    "SetToSTBTLp(address)"(toSTBTLp?: null): SetToSTBTLpEventFilter;
    SetToSTBTLp(toSTBTLp?: null): SetToSTBTLpEventFilter;

    "UnregisteredMinter(address,uint32)"(
      minter?: null,
      color?: null
    ): UnregisteredMinterEventFilter;
    UnregisteredMinter(
      minter?: null,
      color?: null
    ): UnregisteredMinterEventFilter;
  };

  estimateGas: {
    addMinterCodeHash(
      _hash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    colorToMinter(
      color: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinterCodeHashes(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedFromTokens(
      _color: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapToUSDVAmountOut(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      _mintColor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapToUSDVAmountOutVerbose(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      _mintColor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegistered(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minterToColor(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerMinter(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMinterCodeHash(
      _hash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToSTBTLp(
      _toSTBTLp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapToUSDV(
      _param: IMinter.SwapParamStruct,
      _usdvReceiver: PromiseOrValue<string>,
      _mintColor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapToUSDVAndSend(
      _param: IMinter.SwapParamStruct,
      _usdvReceiver: PromiseOrValue<BytesLike>,
      _dstEid: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _msgFee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      _mintColor: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toSTBTLp(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterMinter(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdv(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addMinterCodeHash(
      _hash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    colorToMinter(
      color: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinterCodeHashes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedFromTokens(
      _color: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapToUSDVAmountOut(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      _mintColor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapToUSDVAmountOutVerbose(
      _fromToken: PromiseOrValue<string>,
      _fromTokenAmount: PromiseOrValue<BigNumberish>,
      _mintColor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegistered(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minterToColor(
      minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerMinter(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMinterCodeHash(
      _hash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToSTBTLp(
      _toSTBTLp: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapToUSDV(
      _param: IMinter.SwapParamStruct,
      _usdvReceiver: PromiseOrValue<string>,
      _mintColor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapToUSDVAndSend(
      _param: IMinter.SwapParamStruct,
      _usdvReceiver: PromiseOrValue<BytesLike>,
      _dstEid: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _msgFee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      _mintColor: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toSTBTLp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterMinter(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdv(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
