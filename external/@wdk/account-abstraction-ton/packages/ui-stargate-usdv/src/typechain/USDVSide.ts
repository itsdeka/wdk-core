/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type DeltaStruct = {
  color: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
};

export type DeltaStructOutput = [number, BigNumber] & {
  color: number;
  amount: BigNumber;
};

export type MessagingFeeStruct = {
  nativeFee: PromiseOrValue<BigNumberish>;
  lzTokenFee: PromiseOrValue<BigNumberish>;
};

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
  nativeFee: BigNumber;
  lzTokenFee: BigNumber;
};

export type MessagingReceiptStruct = {
  guid: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
  fee: MessagingFeeStruct;
};

export type MessagingReceiptStructOutput = [
  string,
  BigNumber,
  MessagingFeeStructOutput
] & { guid: string; nonce: BigNumber; fee: MessagingFeeStructOutput };

export declare namespace Colors {
  export type ColorStateStruct = {
    colored: PromiseOrValue<BigNumberish>;
    delta: PromiseOrValue<BigNumberish>;
    lastDelta: PromiseOrValue<BigNumberish>;
    lastBlockNumber: PromiseOrValue<BigNumberish>;
    known: PromiseOrValue<boolean>;
  };

  export type ColorStateStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    boolean
  ] & {
    colored: BigNumber;
    delta: BigNumber;
    lastDelta: BigNumber;
    lastBlockNumber: number;
    known: boolean;
  };
}

export declare namespace IOFT {
  export type SendParamStruct = {
    to: PromiseOrValue<BytesLike>;
    amountLD: PromiseOrValue<BigNumberish>;
    minAmountLD: PromiseOrValue<BigNumberish>;
    dstEid: PromiseOrValue<BigNumberish>;
  };

  export type SendParamStructOutput = [string, BigNumber, BigNumber, number] & {
    to: string;
    amountLD: BigNumber;
    minAmountLD: BigNumber;
    dstEid: number;
  };
}

export interface USDVSideInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "implementation()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blacklist(address,bool)": FunctionFragment;
    "burn(address,uint64,uint32[])": FunctionFragment;
    "colorStateOf(uint32)": FunctionFragment;
    "colorers(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "eip712Domain()": FunctionFragment;
    "getDeltas(uint32,uint32)": FunctionFragment;
    "getDeltas(uint32[])": FunctionFragment;
    "getRole(uint8)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "maxKnownColor()": FunctionFragment;
    "mint(address,uint64,uint32)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "paused()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "quoteRemintFee(uint32,bytes,bool)": FunctionFragment;
    "quoteSendFee((bytes32,uint256,uint256,uint32),bytes,bool,bytes)": FunctionFragment;
    "quoteSyncDeltaFee(uint32,uint32,bytes,bool)": FunctionFragment;
    "remint(uint32,uint64,uint32[],uint64,bytes,(uint256,uint256),address)": FunctionFragment;
    "send((bytes32,uint256,uint256,uint32),bytes,(uint256,uint256),address,bytes)": FunctionFragment;
    "sendAck(bytes32,address,uint32,uint64,uint64)": FunctionFragment;
    "setColorer(address,address)": FunctionFragment;
    "setDefaultColor(address,uint32)": FunctionFragment;
    "setPause(bool)": FunctionFragment;
    "setRole(uint8,address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "syncDelta(uint32,uint64,uint32[],uint64,bytes,(uint256,uint256),address)": FunctionFragment;
    "syncDeltaAck((uint32,int64)[])": FunctionFragment;
    "token()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "userStates(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "implementation"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "DOMAIN_SEPARATOR"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "blacklist"
      | "burn"
      | "colorStateOf"
      | "colorers"
      | "decimals"
      | "decreaseAllowance"
      | "eip712Domain"
      | "getDeltas(uint32,uint32)"
      | "getDeltas(uint32[])"
      | "getRole"
      | "increaseAllowance"
      | "initialize"
      | "maxKnownColor"
      | "mint"
      | "name"
      | "nonces"
      | "paused"
      | "permit"
      | "quoteRemintFee"
      | "quoteSendFee"
      | "quoteSyncDeltaFee"
      | "remint"
      | "send"
      | "sendAck"
      | "setColorer"
      | "setDefaultColor"
      | "setPause"
      | "setRole"
      | "symbol"
      | "syncDelta"
      | "syncDeltaAck"
      | "token"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "userStates"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklist",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "colorStateOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "colorers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeltas(uint32,uint32)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeltas(uint32[])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRole",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxKnownColor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteRemintFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSendFee",
    values: [
      IOFT.SendParamStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSyncDeltaFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "remint",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      MessagingFeeStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      IOFT.SendParamStruct,
      PromiseOrValue<BytesLike>,
      MessagingFeeStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendAck",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setColorer",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultColor",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPause",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRole",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "syncDelta",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      MessagingFeeStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "syncDeltaAck",
    values: [DeltaStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userStates",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "colorStateOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "colorers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeltas(uint32,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeltas(uint32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxKnownColor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteRemintFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteSendFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteSyncDeltaFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendAck", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setColorer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultColor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "syncDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "syncDeltaAck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStates", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "EIP712DomainChanged()": EventFragment;
    "Initialized(uint8)": EventFragment;
    "ReceiveOFT(bytes32,address,uint256)": EventFragment;
    "Reminting(bytes32,tuple[],uint64)": EventFragment;
    "SendOFT(bytes32,address,uint256,bytes)": EventFragment;
    "SetBlacklist(address,bool)": EventFragment;
    "SetColorer(address,address,address)": EventFragment;
    "SetDefaultColor(address,address,uint32)": EventFragment;
    "SetInspector(address)": EventFragment;
    "SetPause(bool)": EventFragment;
    "SetRole(uint8,address)": EventFragment;
    "Synced(bytes32,tuple[])": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiveOFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reminting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendOFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBlacklist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetColorer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDefaultColor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetInspector"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRole"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Synced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface EIP712DomainChangedEventObject {}
export type EIP712DomainChangedEvent = TypedEvent<
  [],
  EIP712DomainChangedEventObject
>;

export type EIP712DomainChangedEventFilter =
  TypedEventFilter<EIP712DomainChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ReceiveOFTEventObject {
  _guid: string;
  _toAddress: string;
  _amountLD: BigNumber;
}
export type ReceiveOFTEvent = TypedEvent<
  [string, string, BigNumber],
  ReceiveOFTEventObject
>;

export type ReceiveOFTEventFilter = TypedEventFilter<ReceiveOFTEvent>;

export interface RemintingEventObject {
  _guid: string;
  deltas: DeltaStructOutput[];
  remintFee: BigNumber;
}
export type RemintingEvent = TypedEvent<
  [string, DeltaStructOutput[], BigNumber],
  RemintingEventObject
>;

export type RemintingEventFilter = TypedEventFilter<RemintingEvent>;

export interface SendOFTEventObject {
  _guid: string;
  _fromAddress: string;
  _amountLD: BigNumber;
  _composeMsg: string;
}
export type SendOFTEvent = TypedEvent<
  [string, string, BigNumber, string],
  SendOFTEventObject
>;

export type SendOFTEventFilter = TypedEventFilter<SendOFTEvent>;

export interface SetBlacklistEventObject {
  user: string;
  isBlacklisted: boolean;
}
export type SetBlacklistEvent = TypedEvent<
  [string, boolean],
  SetBlacklistEventObject
>;

export type SetBlacklistEventFilter = TypedEventFilter<SetBlacklistEvent>;

export interface SetColorerEventObject {
  caller: string;
  user: string;
  colorer: string;
}
export type SetColorerEvent = TypedEvent<
  [string, string, string],
  SetColorerEventObject
>;

export type SetColorerEventFilter = TypedEventFilter<SetColorerEvent>;

export interface SetDefaultColorEventObject {
  caller: string;
  user: string;
  defaultColor: number;
}
export type SetDefaultColorEvent = TypedEvent<
  [string, string, number],
  SetDefaultColorEventObject
>;

export type SetDefaultColorEventFilter = TypedEventFilter<SetDefaultColorEvent>;

export interface SetInspectorEventObject {
  _inspector: string;
}
export type SetInspectorEvent = TypedEvent<[string], SetInspectorEventObject>;

export type SetInspectorEventFilter = TypedEventFilter<SetInspectorEvent>;

export interface SetPauseEventObject {
  paused: boolean;
}
export type SetPauseEvent = TypedEvent<[boolean], SetPauseEventObject>;

export type SetPauseEventFilter = TypedEventFilter<SetPauseEvent>;

export interface SetRoleEventObject {
  role: number;
  addr: string;
}
export type SetRoleEvent = TypedEvent<[number, string], SetRoleEventObject>;

export type SetRoleEventFilter = TypedEventFilter<SetRoleEvent>;

export interface SyncedEventObject {
  guid: string;
  deltas: DeltaStructOutput[];
}
export type SyncedEvent = TypedEvent<
  [string, DeltaStructOutput[]],
  SyncedEventObject
>;

export type SyncedEventFilter = TypedEventFilter<SyncedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface USDVSide extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: USDVSideInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    implementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blacklist(
      _user: PromiseOrValue<string>,
      _isBlacklisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burn(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deficits: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    colorStateOf(
      _color: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Colors.ColorStateStructOutput]>;

    colorers(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { colorer: string }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    "getDeltas(uint32,uint32)"(
      _startColor: PromiseOrValue<BigNumberish>,
      _endColor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DeltaStructOutput[]]>;

    "getDeltas(uint32[])"(
      _colors: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[DeltaStructOutput[]]>;

    getRole(
      _role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _foundation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxKnownColor(overrides?: CallOverrides): Promise<[number]>;

    mint(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _color: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quoteRemintFee(
      _numDeficits: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _useLZToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; lzTokenFee: BigNumber }
    >;

    quoteSendFee(
      _param: IOFT.SendParamStruct,
      _extraOptions: PromiseOrValue<BytesLike>,
      _useLZToken: PromiseOrValue<boolean>,
      _composeMsg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; lzTokenFee: BigNumber }
    >;

    quoteSyncDeltaFee(
      _dstEid: PromiseOrValue<BigNumberish>,
      _numDeficits: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _useLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; lzTokenFee: BigNumber }
    >;

    remint(
      _surplusColor: PromiseOrValue<BigNumberish>,
      _surplusAmount: PromiseOrValue<BigNumberish>,
      _deficits: PromiseOrValue<BigNumberish>[],
      _feeCap: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _msgFee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    send(
      _param: IOFT.SendParamStruct,
      _extraOptions: PromiseOrValue<BytesLike>,
      _msgFee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      _composeMsg: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendAck(
      _guid: PromiseOrValue<BytesLike>,
      _receiver: PromiseOrValue<string>,
      _color: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _theta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setColorer(
      _user: PromiseOrValue<string>,
      _colorer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultColor(
      _user: PromiseOrValue<string>,
      _defaultColor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPause(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRole(
      _role: PromiseOrValue<BigNumberish>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    syncDelta(
      _eid: PromiseOrValue<BigNumberish>,
      _theta: PromiseOrValue<BigNumberish>,
      _deficits: PromiseOrValue<BigNumberish>[],
      _feeCap: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _msgFee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    syncDeltaAck(
      _deltas: DeltaStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userStates(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean, number] & {
        color: number;
        balance: BigNumber;
        blacklisted: boolean;
        defaultColor: number;
      }
    >;
  };

  admin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  implementation(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blacklist(
    _user: PromiseOrValue<string>,
    _isBlacklisted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burn(
    _from: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _deficits: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  colorStateOf(
    _color: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Colors.ColorStateStructOutput>;

  colorers(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  eip712Domain(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  "getDeltas(uint32,uint32)"(
    _startColor: PromiseOrValue<BigNumberish>,
    _endColor: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DeltaStructOutput[]>;

  "getDeltas(uint32[])"(
    _colors: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<DeltaStructOutput[]>;

  getRole(
    _role: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _owner: PromiseOrValue<string>,
    _foundation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxKnownColor(overrides?: CallOverrides): Promise<number>;

  mint(
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _color: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quoteRemintFee(
    _numDeficits: PromiseOrValue<BigNumberish>,
    _extraOptions: PromiseOrValue<BytesLike>,
    _useLZToken: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nativeFee: BigNumber; lzTokenFee: BigNumber }
  >;

  quoteSendFee(
    _param: IOFT.SendParamStruct,
    _extraOptions: PromiseOrValue<BytesLike>,
    _useLZToken: PromiseOrValue<boolean>,
    _composeMsg: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nativeFee: BigNumber; lzTokenFee: BigNumber }
  >;

  quoteSyncDeltaFee(
    _dstEid: PromiseOrValue<BigNumberish>,
    _numDeficits: PromiseOrValue<BigNumberish>,
    _extraOptions: PromiseOrValue<BytesLike>,
    _useLzToken: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nativeFee: BigNumber; lzTokenFee: BigNumber }
  >;

  remint(
    _surplusColor: PromiseOrValue<BigNumberish>,
    _surplusAmount: PromiseOrValue<BigNumberish>,
    _deficits: PromiseOrValue<BigNumberish>[],
    _feeCap: PromiseOrValue<BigNumberish>,
    _extraOptions: PromiseOrValue<BytesLike>,
    _msgFee: MessagingFeeStruct,
    _refundAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  send(
    _param: IOFT.SendParamStruct,
    _extraOptions: PromiseOrValue<BytesLike>,
    _msgFee: MessagingFeeStruct,
    _refundAddress: PromiseOrValue<string>,
    _composeMsg: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendAck(
    _guid: PromiseOrValue<BytesLike>,
    _receiver: PromiseOrValue<string>,
    _color: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _theta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setColorer(
    _user: PromiseOrValue<string>,
    _colorer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultColor(
    _user: PromiseOrValue<string>,
    _defaultColor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPause(
    _paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRole(
    _role: PromiseOrValue<BigNumberish>,
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  syncDelta(
    _eid: PromiseOrValue<BigNumberish>,
    _theta: PromiseOrValue<BigNumberish>,
    _deficits: PromiseOrValue<BigNumberish>[],
    _feeCap: PromiseOrValue<BigNumberish>,
    _extraOptions: PromiseOrValue<BytesLike>,
    _msgFee: MessagingFeeStruct,
    _refundAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  syncDeltaAck(
    _deltas: DeltaStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userStates(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, boolean, number] & {
      color: number;
      balance: BigNumber;
      blacklisted: boolean;
      defaultColor: number;
    }
  >;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklist(
      _user: PromiseOrValue<string>,
      _isBlacklisted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deficits: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<DeltaStructOutput[]>;

    colorStateOf(
      _color: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Colors.ColorStateStructOutput>;

    colorers(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    "getDeltas(uint32,uint32)"(
      _startColor: PromiseOrValue<BigNumberish>,
      _endColor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DeltaStructOutput[]>;

    "getDeltas(uint32[])"(
      _colors: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<DeltaStructOutput[]>;

    getRole(
      _role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _owner: PromiseOrValue<string>,
      _foundation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxKnownColor(overrides?: CallOverrides): Promise<number>;

    mint(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _color: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    quoteRemintFee(
      _numDeficits: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _useLZToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; lzTokenFee: BigNumber }
    >;

    quoteSendFee(
      _param: IOFT.SendParamStruct,
      _extraOptions: PromiseOrValue<BytesLike>,
      _useLZToken: PromiseOrValue<boolean>,
      _composeMsg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; lzTokenFee: BigNumber }
    >;

    quoteSyncDeltaFee(
      _dstEid: PromiseOrValue<BigNumberish>,
      _numDeficits: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _useLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; lzTokenFee: BigNumber }
    >;

    remint(
      _surplusColor: PromiseOrValue<BigNumberish>,
      _surplusAmount: PromiseOrValue<BigNumberish>,
      _deficits: PromiseOrValue<BigNumberish>[],
      _feeCap: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _msgFee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MessagingReceiptStructOutput>;

    send(
      _param: IOFT.SendParamStruct,
      _extraOptions: PromiseOrValue<BytesLike>,
      _msgFee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      _composeMsg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<MessagingReceiptStructOutput>;

    sendAck(
      _guid: PromiseOrValue<BytesLike>,
      _receiver: PromiseOrValue<string>,
      _color: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _theta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setColorer(
      _user: PromiseOrValue<string>,
      _colorer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultColor(
      _user: PromiseOrValue<string>,
      _defaultColor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPause(
      _paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRole(
      _role: PromiseOrValue<BigNumberish>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    syncDelta(
      _eid: PromiseOrValue<BigNumberish>,
      _theta: PromiseOrValue<BigNumberish>,
      _deficits: PromiseOrValue<BigNumberish>[],
      _feeCap: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _msgFee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MessagingReceiptStructOutput>;

    syncDeltaAck(
      _deltas: DeltaStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userStates(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean, number] & {
        color: number;
        balance: BigNumber;
        blacklisted: boolean;
        defaultColor: number;
      }
    >;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "EIP712DomainChanged()"(): EIP712DomainChangedEventFilter;
    EIP712DomainChanged(): EIP712DomainChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "ReceiveOFT(bytes32,address,uint256)"(
      _guid?: PromiseOrValue<BytesLike> | null,
      _toAddress?: PromiseOrValue<string> | null,
      _amountLD?: null
    ): ReceiveOFTEventFilter;
    ReceiveOFT(
      _guid?: PromiseOrValue<BytesLike> | null,
      _toAddress?: PromiseOrValue<string> | null,
      _amountLD?: null
    ): ReceiveOFTEventFilter;

    "Reminting(bytes32,tuple[],uint64)"(
      _guid?: null,
      deltas?: null,
      remintFee?: null
    ): RemintingEventFilter;
    Reminting(
      _guid?: null,
      deltas?: null,
      remintFee?: null
    ): RemintingEventFilter;

    "SendOFT(bytes32,address,uint256,bytes)"(
      _guid?: PromiseOrValue<BytesLike> | null,
      _fromAddress?: PromiseOrValue<string> | null,
      _amountLD?: null,
      _composeMsg?: null
    ): SendOFTEventFilter;
    SendOFT(
      _guid?: PromiseOrValue<BytesLike> | null,
      _fromAddress?: PromiseOrValue<string> | null,
      _amountLD?: null,
      _composeMsg?: null
    ): SendOFTEventFilter;

    "SetBlacklist(address,bool)"(
      user?: PromiseOrValue<string> | null,
      isBlacklisted?: null
    ): SetBlacklistEventFilter;
    SetBlacklist(
      user?: PromiseOrValue<string> | null,
      isBlacklisted?: null
    ): SetBlacklistEventFilter;

    "SetColorer(address,address,address)"(
      caller?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      colorer?: null
    ): SetColorerEventFilter;
    SetColorer(
      caller?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      colorer?: null
    ): SetColorerEventFilter;

    "SetDefaultColor(address,address,uint32)"(
      caller?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      defaultColor?: null
    ): SetDefaultColorEventFilter;
    SetDefaultColor(
      caller?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      defaultColor?: null
    ): SetDefaultColorEventFilter;

    "SetInspector(address)"(_inspector?: null): SetInspectorEventFilter;
    SetInspector(_inspector?: null): SetInspectorEventFilter;

    "SetPause(bool)"(paused?: null): SetPauseEventFilter;
    SetPause(paused?: null): SetPauseEventFilter;

    "SetRole(uint8,address)"(role?: null, addr?: null): SetRoleEventFilter;
    SetRole(role?: null, addr?: null): SetRoleEventFilter;

    "Synced(bytes32,tuple[])"(guid?: null, deltas?: null): SyncedEventFilter;
    Synced(guid?: null, deltas?: null): SyncedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    implementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklist(
      _user: PromiseOrValue<string>,
      _isBlacklisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burn(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deficits: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    colorStateOf(
      _color: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    colorers(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    eip712Domain(overrides?: CallOverrides): Promise<BigNumber>;

    "getDeltas(uint32,uint32)"(
      _startColor: PromiseOrValue<BigNumberish>,
      _endColor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeltas(uint32[])"(
      _colors: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRole(
      _role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _foundation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxKnownColor(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _color: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quoteRemintFee(
      _numDeficits: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _useLZToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSendFee(
      _param: IOFT.SendParamStruct,
      _extraOptions: PromiseOrValue<BytesLike>,
      _useLZToken: PromiseOrValue<boolean>,
      _composeMsg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSyncDeltaFee(
      _dstEid: PromiseOrValue<BigNumberish>,
      _numDeficits: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _useLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remint(
      _surplusColor: PromiseOrValue<BigNumberish>,
      _surplusAmount: PromiseOrValue<BigNumberish>,
      _deficits: PromiseOrValue<BigNumberish>[],
      _feeCap: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _msgFee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    send(
      _param: IOFT.SendParamStruct,
      _extraOptions: PromiseOrValue<BytesLike>,
      _msgFee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      _composeMsg: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendAck(
      _guid: PromiseOrValue<BytesLike>,
      _receiver: PromiseOrValue<string>,
      _color: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _theta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setColorer(
      _user: PromiseOrValue<string>,
      _colorer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultColor(
      _user: PromiseOrValue<string>,
      _defaultColor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPause(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRole(
      _role: PromiseOrValue<BigNumberish>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    syncDelta(
      _eid: PromiseOrValue<BigNumberish>,
      _theta: PromiseOrValue<BigNumberish>,
      _deficits: PromiseOrValue<BigNumberish>[],
      _feeCap: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _msgFee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    syncDeltaAck(
      _deltas: DeltaStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userStates(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    implementation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklist(
      _user: PromiseOrValue<string>,
      _isBlacklisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _deficits: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    colorStateOf(
      _color: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    colorers(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    eip712Domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDeltas(uint32,uint32)"(
      _startColor: PromiseOrValue<BigNumberish>,
      _endColor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDeltas(uint32[])"(
      _colors: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRole(
      _role: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _foundation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxKnownColor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _color: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quoteRemintFee(
      _numDeficits: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _useLZToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSendFee(
      _param: IOFT.SendParamStruct,
      _extraOptions: PromiseOrValue<BytesLike>,
      _useLZToken: PromiseOrValue<boolean>,
      _composeMsg: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSyncDeltaFee(
      _dstEid: PromiseOrValue<BigNumberish>,
      _numDeficits: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _useLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remint(
      _surplusColor: PromiseOrValue<BigNumberish>,
      _surplusAmount: PromiseOrValue<BigNumberish>,
      _deficits: PromiseOrValue<BigNumberish>[],
      _feeCap: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _msgFee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    send(
      _param: IOFT.SendParamStruct,
      _extraOptions: PromiseOrValue<BytesLike>,
      _msgFee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      _composeMsg: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendAck(
      _guid: PromiseOrValue<BytesLike>,
      _receiver: PromiseOrValue<string>,
      _color: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _theta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setColorer(
      _user: PromiseOrValue<string>,
      _colorer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultColor(
      _user: PromiseOrValue<string>,
      _defaultColor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPause(
      _paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRole(
      _role: PromiseOrValue<BigNumberish>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    syncDelta(
      _eid: PromiseOrValue<BigNumberish>,
      _theta: PromiseOrValue<BigNumberish>,
      _deficits: PromiseOrValue<BigNumberish>[],
      _feeCap: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _msgFee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    syncDeltaAck(
      _deltas: DeltaStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userStates(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
