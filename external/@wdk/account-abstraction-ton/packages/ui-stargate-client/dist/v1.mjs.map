{"version":3,"sources":["../src/v1/StargateClient.ts","../src/v1/zod.ts","../src/v1/constants.ts","../src/v1/utils.ts","../src/v1/types.ts"],"names":[],"mappings":"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","sourcesContent":["import redaxios from 'redaxios';\nimport type z from 'zod';\nimport {\n  chainsOutputSchema,\n  messageInputSchema,\n  messageOutputSchema,\n  optionsInputSchema,\n  optionsOutputSchema,\n  routesInputSchema,\n  routesOutputSchema,\n  tokensInputSchema,\n  tokensOutputSchema,\n  unclaimedInputSchema,\n  unclaimedOutputSchema,\n} from './zod';\nimport type {\n  ChainsResponse,\n  MessageResponse,\n  OptionsResponse,\n  RoutesResponse,\n  TokensResponse,\n  UnclaimedResponse,\n} from './types';\n\ntype ClientOptions =\n  | {\n      apiUrl: string;\n      apiKey: string;\n      http: undefined | never;\n    }\n  | {\n      apiUrl?: never;\n      apiKey?: never;\n      http: ReturnType<typeof redaxios.create>;\n    };\n\nexport class StargateClient {\n  protected http: ReturnType<typeof redaxios.create>;\n\n  constructor(public readonly config: ClientOptions) {\n    this.http = config.http\n      ? config.http\n      : redaxios.create({\n          baseURL: config.apiUrl,\n          headers: {'x-stargate-api-key': config.apiKey},\n        });\n  }\n\n  async getChains(): Promise<ChainsResponse> {\n    const response = await this.http.get('v1/bridge/chains');\n    return chainsOutputSchema.parse(response.data);\n  }\n\n  async getTokens(input: z.input<typeof tokensInputSchema> = {}): Promise<TokensResponse> {\n    const params = tokensInputSchema.parse(input);\n    const response = await this.http.get('v1/bridge/tokens', {params});\n    return tokensOutputSchema.parse(response.data);\n  }\n\n  async getRoutes(input: z.input<typeof routesInputSchema>): Promise<RoutesResponse> {\n    const params = routesInputSchema.parse(input);\n    const response = await this.http.get('v1/bridge/routes', {params});\n    return routesOutputSchema.parse(response.data);\n  }\n\n  async getMessage(input: z.input<typeof messageInputSchema>): Promise<MessageResponse> {\n    const params = messageInputSchema.parse(input);\n    const response = await this.http.get(`v1/bridge/tx/${encodeURIComponent(params.txHash)}`, {\n      validateStatus: (status) => status === 200 || status === 404,\n    });\n    return messageOutputSchema.parse(response.data);\n  }\n\n  async getOptions(input: z.input<typeof optionsInputSchema>): Promise<OptionsResponse> {\n    const params = optionsInputSchema.parse(input);\n    const response = await this.http.get('v1/bridge/options', {params});\n    return optionsOutputSchema.parse(response.data);\n  }\n\n  async getUnclaimed(input: z.input<typeof unclaimedInputSchema>): Promise<UnclaimedResponse> {\n    const params = unclaimedInputSchema.parse(input);\n    const response = await this.http.get('v1/bridge/unclaimed', {params});\n    return unclaimedOutputSchema.parse(response.data);\n  }\n}\n","import {z} from 'zod';\nimport type {\n  ChainsResponse,\n  RoutesResponse,\n  TokensResponse,\n  OptionsResponse,\n  SerializedAptosTransaction,\n  SerializedApproveStep,\n  SerializedBridgeStep,\n  SerializedChain,\n  SerializedClaimStep,\n  SerializedRegisterStep,\n  SerializedRejectedRoute,\n  SerializedResolvedRoute,\n  SerializedSolanaTransaction,\n  SerializedToken,\n  SerializedEvmTransaction,\n  SerializedMessage,\n  SerializedOptions,\n} from './types';\n\nfunction isBigIntString(v: string) {\n  try {\n    BigInt(v);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport const bigIntStringSchema = z.string().refine(isBigIntString);\n\nexport const tokensInputSchema = z.object({\n  srcToken: z.string().optional(),\n  srcChainKey: z.string().optional(),\n});\n\n// refine extend and transform in app\n// types in client need to be kept as simple as possible\nexport const routesInputSchema = z.object({\n  srcToken: z.string(),\n  dstToken: z.string(),\n  srcChainKey: z.string(),\n  dstChainKey: z.string(),\n  srcAmount: bigIntStringSchema,\n  dstAmountMin: bigIntStringSchema,\n  srcAddress: z.string(),\n  dstAddress: z.string(),\n  dstNativeAmount: bigIntStringSchema.default('0'),\n});\n\nexport const errorSchema = z.object({\n  message: z.string(),\n});\n\nexport const messageInputSchema = z.object({\n  txHash: z.string(),\n});\n\nexport const messageOutputSchema = z.object({\n  message: z.lazy(() => messageSchema).optional(),\n});\n\nexport const optionsInputSchema = z.object({\n  srcChainKey: z.string(),\n  dstChainKey: z.string(),\n});\n\nexport const optionsSchema: z.ZodSchema<SerializedOptions> = z.object({\n  dstNativeAmountMax: bigIntStringSchema,\n  dstNativeAmountDefault: bigIntStringSchema,\n});\n\nexport const optionsOutputSchema: z.ZodSchema<OptionsResponse> = z.object({\n  options: optionsSchema,\n});\n\n// based on viem/types/transaction.ts\nexport const evmTransactionRequestSchema: z.ZodSchema<SerializedEvmTransaction> = z.object({\n  /** Contract code or a hashed method call with encoded args */\n  data: z.string(),\n  /** Transaction sender */\n  from: z.string().optional(),\n  /** Transaction recipient */\n  to: z.string(),\n  /** Value in wei sent with this transaction */\n  value: z.string().optional(),\n});\n\nexport const aptosTransactionRequestSchema: z.ZodSchema<SerializedAptosTransaction> = z.object({\n  function: z.string(),\n  typeArguments: z.string().array(),\n  arguments: z.any().array(),\n});\n\nexport const solanaTransactionRequestSchema: z.ZodSchema<SerializedSolanaTransaction> = z.object({\n  encoding: z.enum(['base64']),\n  data: z.string(),\n});\n\nexport const unknownTransactionRequestSchema = z.object({});\n\nexport const resolvedRouteSchema: z.ZodSchema<SerializedResolvedRoute> = z.object({\n  srcChainKey: z.string(),\n  dstChainKey: z.string(),\n  messageFee: bigIntStringSchema,\n  srcAddress: z.string(),\n  dstAddress: z.string(),\n  name: z.string(),\n  mode: z.string(),\n  srcToken: z.string(),\n  dstToken: z.string(),\n  srcAmount: bigIntStringSchema, // amount sent\n  srcAmountMax: bigIntStringSchema,\n  dstAmount: bigIntStringSchema, // amount received (expected)\n  dstAmountMin: bigIntStringSchema,\n  duration: z.number(),\n  allowance: bigIntStringSchema,\n  error: z.null(),\n  dstNativeAmount: bigIntStringSchema,\n  dstNativeAmountMax: bigIntStringSchema.optional(),\n  gasUsed: bigIntStringSchema.optional(),\n  gasCost: bigIntStringSchema.optional(), // amount in native\n  steps: z.lazy(() =>\n    z\n      .union([\n        // order affects performance\n        bridgeStepSchema,\n        approveStepSchema,\n        registerStepSchema,\n        claimStepSchema,\n      ])\n      .array(),\n  ),\n});\n\nexport const rejectedRouteSchema: z.ZodSchema<SerializedRejectedRoute> = z.object({\n  name: z.string(),\n  mode: z.string(),\n  error: errorSchema,\n});\n\nexport const routesOutputSchema: z.ZodSchema<RoutesResponse> = z.object({\n  routes: z.union([resolvedRouteSchema, rejectedRouteSchema]).array(),\n});\n\nexport const chainSchema: z.ZodSchema<SerializedChain> = z.object({\n  name: z.string(),\n  shortName: z.string(),\n  chainKey: z.string(),\n  chainType: z.string(),\n  nativeChainId: z.union([z.number(), z.string()]),\n  nativeCurrency: z.object({\n    name: z.string(),\n    symbol: z.string(),\n    decimals: z.number(),\n    address: z.string().optional(),\n  }),\n});\n\nexport const chainsOutputSchema: z.ZodSchema<ChainsResponse> = z.object({\n  chains: chainSchema.array(),\n});\n\nexport const tokenSchema: z.ZodSchema<SerializedToken> = z.object({\n  chainKey: z.string(),\n  address: z.string().optional(),\n  decimals: z.number(),\n  symbol: z.string(),\n  name: z.string().optional(),\n  price: z.object({\n    USD: z.number().optional(),\n  }),\n});\n\nexport const tokensOutputSchema: z.ZodSchema<TokensResponse> = z.object({\n  tokens: tokenSchema.array(),\n});\n\nexport const transactionSchema = z.union([\n  // order matters\n  evmTransactionRequestSchema,\n  aptosTransactionRequestSchema,\n  solanaTransactionRequestSchema,\n  unknownTransactionRequestSchema,\n]);\n\nexport const userOperationSchema = z.object({\n  abi: z.unknown(),\n  args: z.array(z.unknown()),\n});\n\n// todo: discuss if we should call it step or action\nexport const baseStepSchema = z.object({\n  type: z.string(),\n});\n\nexport const bridgeStepSchema: z.ZodSchema<SerializedBridgeStep> = baseStepSchema.extend({\n  type: z.literal('bridge'),\n  chainKey: z.string(),\n  sender: z.string(),\n  transaction: transactionSchema,\n});\n\nexport const approveStepSchema: z.ZodSchema<SerializedApproveStep> = baseStepSchema.extend({\n  type: z.literal('approve'),\n  chainKey: z.string(),\n  sender: z.string(),\n  transaction: transactionSchema,\n});\n\nexport const registerStepSchema: z.ZodSchema<SerializedRegisterStep> = baseStepSchema.extend({\n  type: z.literal('register'),\n  chainKey: z.string(),\n  sender: z.string(),\n  transaction: transactionSchema,\n});\n\nexport const claimStepSchema: z.ZodSchema<SerializedClaimStep> = baseStepSchema.extend({\n  type: z.literal('claim'),\n  chainKey: z.string(),\n  sender: z.string(),\n  transaction: transactionSchema,\n});\n\nexport const messageSchema: z.ZodSchema<SerializedMessage> = z.object({\n  srcTxHash: z.string(),\n  dstTxHash: z.string().optional(),\n});\n\nexport const unclaimedInputSchema = z.object({\n  chainKey: z.string(),\n  address: z.string(),\n  token: z.string().optional(),\n});\n\nexport const unclaimedOutputSchema = z.object({\n  unclaimed: z.record(z.string(), bigIntStringSchema),\n});\n","export const NATIVE_ETH_ADDRESS = '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE';\n","export function base64ToUint8Array(base64: string): Uint8Array {\n  // todo: fix deprecated atob\n  const binaryString = atob(base64);\n  const len = binaryString.length;\n  const uint8Array = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    uint8Array[i] = binaryString.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nexport function uint8ArrayToBase64(uint8Array: Uint8Array): string {\n  let binary = '';\n  const len = uint8Array.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(uint8Array[i]);\n  }\n  return btoa(binary);\n}\n\nexport function unit8ArrayToHex(value: Uint8Array): string {\n  // biome-ignore lint/style/useTemplate: <explanation>\n  return '0x' + Buffer.from(value).toString('hex');\n}\n\nexport function hexToUnit8Array(hex: string): Uint8Array {\n  return new Uint8Array(Buffer.from(hex.slice(2), 'hex'));\n}\n","export type SerializedRoute = SerializedRejectedRoute | SerializedResolvedRoute;\n\nexport type SerializedRouteError = {\n  message: string;\n};\n\nexport type SerializedRejectedRoute = {\n  name: string;\n  mode: string;\n  error: SerializedRouteError;\n};\n\nexport type SerializedResolvedRoute = {\n  name: string;\n  mode: string;\n  error: null;\n  srcChainKey: string;\n  dstChainKey: string;\n  srcToken: string;\n  dstToken: string;\n  srcAmount: string;\n  srcAmountMax: string;\n  dstAmount: string;\n  dstAmountMin: string;\n  duration: number;\n  allowance: string;\n  dstNativeAmount: string;\n  dstNativeAmountMax?: string;\n  messageFee: string;\n  srcAddress: string;\n  dstAddress: string;\n  gasCost?: string;\n  gasUsed?: string;\n  gasNativeAmount?: string;\n  steps: SerializedStep[];\n};\n\nexport type SerializedEvmTransaction = {\n  data?: string;\n  from?: string;\n  to: string;\n  value?: string;\n};\n\nexport type SerializedChain = {\n  name: string;\n  shortName: string;\n  chainKey: string;\n  chainType: string;\n  nativeChainId: number | string;\n  nativeCurrency: SerializedNativeCurrency;\n};\n\nexport type SerializedNativeCurrency = {\n  name: string;\n  symbol: string;\n  decimals: number;\n  address?: string;\n};\n\nexport type SerializedToken = {\n  chainKey: string;\n  address?: string;\n  decimals: number;\n  symbol: string;\n  name?: string;\n  price: {\n    [key: string]: number;\n  };\n};\n\nexport type SerializedOptions = {\n  dstNativeAmountMax: string;\n  dstNativeAmountDefault: string;\n};\n\nexport function isSerializedRouteResolved(\n  route: SerializedRoute,\n): route is SerializedResolvedRoute {\n  return !('error' in route);\n}\n\nexport function isSerializedRouteRejected(\n  route: SerializedRoute,\n): route is SerializedRejectedRoute {\n  return 'error' in route;\n}\n\nexport type MessageResponse = {\n  message?: SerializedMessage;\n};\n\nexport type RoutesResponse = {\n  routes: SerializedRoute[];\n};\n\nexport type ChainsResponse = {\n  chains: SerializedChain[];\n};\n\nexport type OptionsResponse = {\n  options: SerializedOptions;\n};\n\nexport type TokensResponse = {\n  tokens: SerializedToken[];\n};\n\nexport type SerializedBaseStep = {\n  type: string;\n  transaction: unknown;\n};\n\ntype ChainKey = string;\n\nexport type SerializedApproveStep = {\n  type: 'approve';\n  chainKey: ChainKey;\n  sender: string;\n  transaction: SerializedTransaction;\n};\n\nexport type SerializedBridgeStep = {\n  type: 'bridge';\n  chainKey: ChainKey;\n  sender: string;\n  transaction: SerializedTransaction;\n};\n\nexport type SerializedClaimStep = {\n  type: 'claim';\n  chainKey: ChainKey;\n  sender: string;\n  transaction: SerializedTransaction;\n};\n\nexport type SerializedRegisterStep = {\n  type: 'register';\n  chainKey: ChainKey;\n  sender: string;\n  transaction: SerializedTransaction;\n};\n\nexport type SerializedAptosTransaction = {\n  function: string;\n  typeArguments: string[];\n  arguments: any[];\n};\n\nexport type SerializedSolanaTransaction = {\n  // represents VersionedTransaction\n  encoding: 'base64';\n  data: string;\n};\n\nexport type SerializedUnknownTransaction = object;\n\nexport type SerializedTransaction =\n  | SerializedEvmTransaction\n  | SerializedAptosTransaction\n  | SerializedSolanaTransaction\n  | SerializedUnknownTransaction;\n\nexport type SerializedStep =\n  | SerializedBridgeStep\n  | SerializedApproveStep\n  | SerializedRegisterStep\n  | SerializedClaimStep\n  | SerializedBaseStep;\n\nexport type SerializedMessage = {\n  srcTxHash: string;\n  dstTxHash?: string;\n};\n\nexport type UnclaimedResponse = {\n  unclaimed: Record<string, string>;\n};\n"]}