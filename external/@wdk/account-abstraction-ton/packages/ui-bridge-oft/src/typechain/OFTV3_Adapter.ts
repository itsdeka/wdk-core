/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type EnforcedOptionParamStruct = {
  eid: PromiseOrValue<BigNumberish>;
  msgType: PromiseOrValue<BigNumberish>;
  options: PromiseOrValue<BytesLike>;
};

export type EnforcedOptionParamStructOutput = [number, number, string] & {
  eid: number;
  msgType: number;
  options: string;
};

export type OriginStruct = {
  srcEid: PromiseOrValue<BigNumberish>;
  sender: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
};

export type OriginStructOutput = [number, string, BigNumber] & {
  srcEid: number;
  sender: string;
  nonce: BigNumber;
};

export type SendParamStruct = {
  dstEid: PromiseOrValue<BigNumberish>;
  to: PromiseOrValue<BytesLike>;
  amountLD: PromiseOrValue<BigNumberish>;
  minAmountLD: PromiseOrValue<BigNumberish>;
  extraOptions: PromiseOrValue<BytesLike>;
  composeMsg: PromiseOrValue<BytesLike>;
  oftCmd: PromiseOrValue<BytesLike>;
};

export type SendParamStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  string,
  string,
  string
] & {
  dstEid: number;
  to: string;
  amountLD: BigNumber;
  minAmountLD: BigNumber;
  extraOptions: string;
  composeMsg: string;
  oftCmd: string;
};

export type OFTLimitStruct = {
  minAmountLD: PromiseOrValue<BigNumberish>;
  maxAmountLD: PromiseOrValue<BigNumberish>;
};

export type OFTLimitStructOutput = [BigNumber, BigNumber] & {
  minAmountLD: BigNumber;
  maxAmountLD: BigNumber;
};

export type OFTFeeDetailStruct = {
  feeAmountLD: PromiseOrValue<BigNumberish>;
  description: PromiseOrValue<string>;
};

export type OFTFeeDetailStructOutput = [BigNumber, string] & {
  feeAmountLD: BigNumber;
  description: string;
};

export type OFTReceiptStruct = {
  amountSentLD: PromiseOrValue<BigNumberish>;
  amountReceivedLD: PromiseOrValue<BigNumberish>;
};

export type OFTReceiptStructOutput = [BigNumber, BigNumber] & {
  amountSentLD: BigNumber;
  amountReceivedLD: BigNumber;
};

export type MessagingFeeStruct = {
  nativeFee: PromiseOrValue<BigNumberish>;
  lzTokenFee: PromiseOrValue<BigNumberish>;
};

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
  nativeFee: BigNumber;
  lzTokenFee: BigNumber;
};

export type MessagingReceiptStruct = {
  guid: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
  fee: MessagingFeeStruct;
};

export type MessagingReceiptStructOutput = [
  string,
  BigNumber,
  MessagingFeeStructOutput
] & { guid: string; nonce: BigNumber; fee: MessagingFeeStructOutput };

export interface OFTV3_AdapterInterface extends utils.Interface {
  functions: {
    "ARBITRUM_EID()": FunctionFragment;
    "BPS_DENOMINATOR()": FunctionFragment;
    "ETH_EID()": FunctionFragment;
    "LOCAL_EID()": FunctionFragment;
    "SEND_CREDITS()": FunctionFragment;
    "SEND_OFT()": FunctionFragment;
    "TON_EID()": FunctionFragment;
    "TRON_EID()": FunctionFragment;
    "WITHDRAW_REMOTE()": FunctionFragment;
    "allowInitializePath((uint32,bytes32,uint64))": FunctionFragment;
    "approvalRequired()": FunctionFragment;
    "combineOptions(uint32,uint16,bytes)": FunctionFragment;
    "credits(uint32)": FunctionFragment;
    "depositLocal(uint256)": FunctionFragment;
    "endpoint()": FunctionFragment;
    "enforcedOptions(uint32,uint16)": FunctionFragment;
    "feeBalance()": FunctionFragment;
    "feeBps()": FunctionFragment;
    "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": FunctionFragment;
    "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
    "nextNonce(uint32,bytes32)": FunctionFragment;
    "oAppVersion()": FunctionFragment;
    "oftVersion()": FunctionFragment;
    "owner()": FunctionFragment;
    "peers(uint32)": FunctionFragment;
    "planner()": FunctionFragment;
    "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))": FunctionFragment;
    "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)": FunctionFragment;
    "quoteSendCredits(uint32,uint64,uint64,uint64,uint64,bytes,bool)": FunctionFragment;
    "quoteWithdrawRemote((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)": FunctionFragment;
    "sendCredits(uint32,uint64,uint64,uint64,uint64,bytes,(uint256,uint256))": FunctionFragment;
    "setDelegate(address)": FunctionFragment;
    "setEnforcedOptions((uint32,uint16,bytes)[])": FunctionFragment;
    "setFeeBps(uint16)": FunctionFragment;
    "setPeer(uint32,bytes32)": FunctionFragment;
    "setPlanner(address)": FunctionFragment;
    "sharedDecimals()": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "tvl()": FunctionFragment;
    "withdrawFees(address,uint256)": FunctionFragment;
    "withdrawLocal(address,uint256)": FunctionFragment;
    "withdrawRemote((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ARBITRUM_EID"
      | "BPS_DENOMINATOR"
      | "ETH_EID"
      | "LOCAL_EID"
      | "SEND_CREDITS"
      | "SEND_OFT"
      | "TON_EID"
      | "TRON_EID"
      | "WITHDRAW_REMOTE"
      | "allowInitializePath"
      | "approvalRequired"
      | "combineOptions"
      | "credits"
      | "depositLocal"
      | "endpoint"
      | "enforcedOptions"
      | "feeBalance"
      | "feeBps"
      | "isComposeMsgSender"
      | "lzReceive"
      | "nextNonce"
      | "oAppVersion"
      | "oftVersion"
      | "owner"
      | "peers"
      | "planner"
      | "quoteOFT"
      | "quoteSend"
      | "quoteSendCredits"
      | "quoteWithdrawRemote"
      | "renounceOwnership"
      | "send"
      | "sendCredits"
      | "setDelegate"
      | "setEnforcedOptions"
      | "setFeeBps"
      | "setPeer"
      | "setPlanner"
      | "sharedDecimals"
      | "token"
      | "transferOwnership"
      | "tvl"
      | "withdrawFees"
      | "withdrawLocal"
      | "withdrawRemote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ARBITRUM_EID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BPS_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ETH_EID", values?: undefined): string;
  encodeFunctionData(functionFragment: "LOCAL_EID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SEND_CREDITS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SEND_OFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "TON_EID", values?: undefined): string;
  encodeFunctionData(functionFragment: "TRON_EID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WITHDRAW_REMOTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowInitializePath",
    values: [OriginStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "approvalRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "combineOptions",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "credits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLocal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enforcedOptions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeBps", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isComposeMsgSender",
    values: [OriginStruct, PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [
      OriginStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nextNonce",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "oAppVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oftVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "peers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "planner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteOFT",
    values: [SendParamStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSend",
    values: [SendParamStruct, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSendCredits",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteWithdrawRemote",
    values: [SendParamStruct, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [SendParamStruct, MessagingFeeStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCredits",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      MessagingFeeStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnforcedOptions",
    values: [EnforcedOptionParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBps",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlanner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sharedDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "tvl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLocal",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRemote",
    values: [SendParamStruct, MessagingFeeStruct, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ARBITRUM_EID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BPS_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ETH_EID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LOCAL_EID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SEND_CREDITS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SEND_OFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TON_EID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TRON_EID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAW_REMOTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowInitializePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvalRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "combineOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "credits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositLocal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enforcedOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isComposeMsgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oAppVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oftVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "planner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteOFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteSend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteSendCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteWithdrawRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnforcedOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeBps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPlanner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sharedDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tvl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLocal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRemote",
    data: BytesLike
  ): Result;

  events: {
    "CreditsReceived(bytes32,uint32,bytes)": EventFragment;
    "CreditsSent(uint32,uint64,uint64,uint64,uint64)": EventFragment;
    "EnforcedOptionSet(tuple[])": EventFragment;
    "FeeBpsSet(uint16)": EventFragment;
    "FeesWithdrawn(address,uint256)": EventFragment;
    "LocalDeposit(uint256)": EventFragment;
    "LocalWithdrawn(address,uint256)": EventFragment;
    "OFTReceived(bytes32,uint32,address,uint256)": EventFragment;
    "OFTSent(bytes32,uint32,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PeerSet(uint32,bytes32)": EventFragment;
    "PlannerSet(address)": EventFragment;
    "RemoteWithdrawReceived(bytes32,uint32,address,uint256)": EventFragment;
    "RemoteWithdrawn(uint32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreditsReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreditsSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnforcedOptionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeBpsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LocalDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LocalWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OFTReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OFTSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlannerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoteWithdrawReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoteWithdrawn"): EventFragment;
}

export interface CreditsReceivedEventObject {
  guid: string;
  srcEid: number;
  message: string;
}
export type CreditsReceivedEvent = TypedEvent<
  [string, number, string],
  CreditsReceivedEventObject
>;

export type CreditsReceivedEventFilter = TypedEventFilter<CreditsReceivedEvent>;

export interface CreditsSentEventObject {
  dstEid: number;
  creditsEth: BigNumber;
  creditsArbitrum: BigNumber;
  creditsTon: BigNumber;
  creditsTron: BigNumber;
}
export type CreditsSentEvent = TypedEvent<
  [number, BigNumber, BigNumber, BigNumber, BigNumber],
  CreditsSentEventObject
>;

export type CreditsSentEventFilter = TypedEventFilter<CreditsSentEvent>;

export interface EnforcedOptionSetEventObject {
  _enforcedOptions: EnforcedOptionParamStructOutput[];
}
export type EnforcedOptionSetEvent = TypedEvent<
  [EnforcedOptionParamStructOutput[]],
  EnforcedOptionSetEventObject
>;

export type EnforcedOptionSetEventFilter =
  TypedEventFilter<EnforcedOptionSetEvent>;

export interface FeeBpsSetEventObject {
  feeBps: number;
}
export type FeeBpsSetEvent = TypedEvent<[number], FeeBpsSetEventObject>;

export type FeeBpsSetEventFilter = TypedEventFilter<FeeBpsSetEvent>;

export interface FeesWithdrawnEventObject {
  to: string;
  amount: BigNumber;
}
export type FeesWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  FeesWithdrawnEventObject
>;

export type FeesWithdrawnEventFilter = TypedEventFilter<FeesWithdrawnEvent>;

export interface LocalDepositEventObject {
  amount: BigNumber;
}
export type LocalDepositEvent = TypedEvent<
  [BigNumber],
  LocalDepositEventObject
>;

export type LocalDepositEventFilter = TypedEventFilter<LocalDepositEvent>;

export interface LocalWithdrawnEventObject {
  to: string;
  amount: BigNumber;
}
export type LocalWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  LocalWithdrawnEventObject
>;

export type LocalWithdrawnEventFilter = TypedEventFilter<LocalWithdrawnEvent>;

export interface OFTReceivedEventObject {
  guid: string;
  srcEid: number;
  toAddress: string;
  amountReceivedLD: BigNumber;
}
export type OFTReceivedEvent = TypedEvent<
  [string, number, string, BigNumber],
  OFTReceivedEventObject
>;

export type OFTReceivedEventFilter = TypedEventFilter<OFTReceivedEvent>;

export interface OFTSentEventObject {
  guid: string;
  dstEid: number;
  fromAddress: string;
  amountSentLD: BigNumber;
  amountReceivedLD: BigNumber;
}
export type OFTSentEvent = TypedEvent<
  [string, number, string, BigNumber, BigNumber],
  OFTSentEventObject
>;

export type OFTSentEventFilter = TypedEventFilter<OFTSentEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PeerSetEventObject {
  eid: number;
  peer: string;
}
export type PeerSetEvent = TypedEvent<[number, string], PeerSetEventObject>;

export type PeerSetEventFilter = TypedEventFilter<PeerSetEvent>;

export interface PlannerSetEventObject {
  planner: string;
}
export type PlannerSetEvent = TypedEvent<[string], PlannerSetEventObject>;

export type PlannerSetEventFilter = TypedEventFilter<PlannerSetEvent>;

export interface RemoteWithdrawReceivedEventObject {
  guid: string;
  srcEid: number;
  to: string;
  amount: BigNumber;
}
export type RemoteWithdrawReceivedEvent = TypedEvent<
  [string, number, string, BigNumber],
  RemoteWithdrawReceivedEventObject
>;

export type RemoteWithdrawReceivedEventFilter =
  TypedEventFilter<RemoteWithdrawReceivedEvent>;

export interface RemoteWithdrawnEventObject {
  dstEid: number;
  amount: BigNumber;
}
export type RemoteWithdrawnEvent = TypedEvent<
  [number, BigNumber],
  RemoteWithdrawnEventObject
>;

export type RemoteWithdrawnEventFilter = TypedEventFilter<RemoteWithdrawnEvent>;

export interface OFTV3_Adapter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OFTV3_AdapterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ARBITRUM_EID(overrides?: CallOverrides): Promise<[number]>;

    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<[number]>;

    ETH_EID(overrides?: CallOverrides): Promise<[number]>;

    LOCAL_EID(overrides?: CallOverrides): Promise<[number]>;

    SEND_CREDITS(overrides?: CallOverrides): Promise<[number]>;

    SEND_OFT(overrides?: CallOverrides): Promise<[number]>;

    TON_EID(overrides?: CallOverrides): Promise<[number]>;

    TRON_EID(overrides?: CallOverrides): Promise<[number]>;

    WITHDRAW_REMOTE(overrides?: CallOverrides): Promise<[number]>;

    allowInitializePath(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approvalRequired(overrides?: CallOverrides): Promise<[boolean]>;

    combineOptions(
      _eid: PromiseOrValue<BigNumberish>,
      _msgType: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    credits(
      eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { credits: BigNumber }>;

    depositLocal(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endpoint(overrides?: CallOverrides): Promise<[string]>;

    enforcedOptions(
      eid: PromiseOrValue<BigNumberish>,
      msgType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { enforcedOption: string }>;

    feeBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeBps(overrides?: CallOverrides): Promise<[number]>;

    isComposeMsgSender(
      arg0: OriginStruct,
      arg1: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lzReceive(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nextNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    oAppVersion(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
      }
    >;

    oftVersion(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { interfaceId: string; version: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    peers(
      eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { peer: string }>;

    planner(overrides?: CallOverrides): Promise<[string]>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
      ] & {
        oftLimit: OFTLimitStructOutput;
        oftFeeDetails: OFTFeeDetailStructOutput[];
        oftReceipt: OFTReceiptStructOutput;
      }
    >;

    quoteSend(
      _sendParam: SendParamStruct,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [MessagingFeeStructOutput] & { msgFee: MessagingFeeStructOutput }
    >;

    quoteSendCredits(
      _dstEid: PromiseOrValue<BigNumberish>,
      _creditsEth: PromiseOrValue<BigNumberish>,
      _creditsArbitrum: PromiseOrValue<BigNumberish>,
      _creditsTon: PromiseOrValue<BigNumberish>,
      _creditsTron: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [MessagingFeeStructOutput] & { msgFee: MessagingFeeStructOutput }
    >;

    quoteWithdrawRemote(
      _sendParam: SendParamStruct,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [MessagingFeeStructOutput] & { msgFee: MessagingFeeStructOutput }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    send(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendCredits(
      _dstEid: PromiseOrValue<BigNumberish>,
      _creditsEth: PromiseOrValue<BigNumberish>,
      _creditsArbitrum: PromiseOrValue<BigNumberish>,
      _creditsTon: PromiseOrValue<BigNumberish>,
      _creditsTron: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _fee: MessagingFeeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelegate(
      _delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEnforcedOptions(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeBps(
      _feeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPeer(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlanner(
      _planner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sharedDecimals(overrides?: CallOverrides): Promise<[number]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tvl(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawFees(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawLocal(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawRemote(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ARBITRUM_EID(overrides?: CallOverrides): Promise<number>;

  BPS_DENOMINATOR(overrides?: CallOverrides): Promise<number>;

  ETH_EID(overrides?: CallOverrides): Promise<number>;

  LOCAL_EID(overrides?: CallOverrides): Promise<number>;

  SEND_CREDITS(overrides?: CallOverrides): Promise<number>;

  SEND_OFT(overrides?: CallOverrides): Promise<number>;

  TON_EID(overrides?: CallOverrides): Promise<number>;

  TRON_EID(overrides?: CallOverrides): Promise<number>;

  WITHDRAW_REMOTE(overrides?: CallOverrides): Promise<number>;

  allowInitializePath(
    origin: OriginStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approvalRequired(overrides?: CallOverrides): Promise<boolean>;

  combineOptions(
    _eid: PromiseOrValue<BigNumberish>,
    _msgType: PromiseOrValue<BigNumberish>,
    _extraOptions: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  credits(
    eid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositLocal(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endpoint(overrides?: CallOverrides): Promise<string>;

  enforcedOptions(
    eid: PromiseOrValue<BigNumberish>,
    msgType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  feeBalance(overrides?: CallOverrides): Promise<BigNumber>;

  feeBps(overrides?: CallOverrides): Promise<number>;

  isComposeMsgSender(
    arg0: OriginStruct,
    arg1: PromiseOrValue<BytesLike>,
    _sender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lzReceive(
    _origin: OriginStruct,
    _guid: PromiseOrValue<BytesLike>,
    _message: PromiseOrValue<BytesLike>,
    _executor: PromiseOrValue<string>,
    _extraData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nextNonce(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oAppVersion(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      senderVersion: BigNumber;
      receiverVersion: BigNumber;
    }
  >;

  oftVersion(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { interfaceId: string; version: BigNumber }>;

  owner(overrides?: CallOverrides): Promise<string>;

  peers(
    eid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  planner(overrides?: CallOverrides): Promise<string>;

  quoteOFT(
    _sendParam: SendParamStruct,
    overrides?: CallOverrides
  ): Promise<
    [
      OFTLimitStructOutput,
      OFTFeeDetailStructOutput[],
      OFTReceiptStructOutput
    ] & {
      oftLimit: OFTLimitStructOutput;
      oftFeeDetails: OFTFeeDetailStructOutput[];
      oftReceipt: OFTReceiptStructOutput;
    }
  >;

  quoteSend(
    _sendParam: SendParamStruct,
    _payInLzToken: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<MessagingFeeStructOutput>;

  quoteSendCredits(
    _dstEid: PromiseOrValue<BigNumberish>,
    _creditsEth: PromiseOrValue<BigNumberish>,
    _creditsArbitrum: PromiseOrValue<BigNumberish>,
    _creditsTon: PromiseOrValue<BigNumberish>,
    _creditsTron: PromiseOrValue<BigNumberish>,
    _extraOptions: PromiseOrValue<BytesLike>,
    _payInLzToken: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<MessagingFeeStructOutput>;

  quoteWithdrawRemote(
    _sendParam: SendParamStruct,
    _payInLzToken: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<MessagingFeeStructOutput>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  send(
    _sendParam: SendParamStruct,
    _fee: MessagingFeeStruct,
    _refundAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendCredits(
    _dstEid: PromiseOrValue<BigNumberish>,
    _creditsEth: PromiseOrValue<BigNumberish>,
    _creditsArbitrum: PromiseOrValue<BigNumberish>,
    _creditsTon: PromiseOrValue<BigNumberish>,
    _creditsTron: PromiseOrValue<BigNumberish>,
    _extraOptions: PromiseOrValue<BytesLike>,
    _fee: MessagingFeeStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelegate(
    _delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEnforcedOptions(
    _enforcedOptions: EnforcedOptionParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeBps(
    _feeBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPeer(
    _eid: PromiseOrValue<BigNumberish>,
    _peer: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlanner(
    _planner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sharedDecimals(overrides?: CallOverrides): Promise<number>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tvl(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawFees(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawLocal(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawRemote(
    _sendParam: SendParamStruct,
    _fee: MessagingFeeStruct,
    _refundAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ARBITRUM_EID(overrides?: CallOverrides): Promise<number>;

    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<number>;

    ETH_EID(overrides?: CallOverrides): Promise<number>;

    LOCAL_EID(overrides?: CallOverrides): Promise<number>;

    SEND_CREDITS(overrides?: CallOverrides): Promise<number>;

    SEND_OFT(overrides?: CallOverrides): Promise<number>;

    TON_EID(overrides?: CallOverrides): Promise<number>;

    TRON_EID(overrides?: CallOverrides): Promise<number>;

    WITHDRAW_REMOTE(overrides?: CallOverrides): Promise<number>;

    allowInitializePath(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approvalRequired(overrides?: CallOverrides): Promise<boolean>;

    combineOptions(
      _eid: PromiseOrValue<BigNumberish>,
      _msgType: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    credits(
      eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositLocal(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    endpoint(overrides?: CallOverrides): Promise<string>;

    enforcedOptions(
      eid: PromiseOrValue<BigNumberish>,
      msgType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    feeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    feeBps(overrides?: CallOverrides): Promise<number>;

    isComposeMsgSender(
      arg0: OriginStruct,
      arg1: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lzReceive(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    nextNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oAppVersion(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
      }
    >;

    oftVersion(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { interfaceId: string; version: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    peers(
      eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    planner(overrides?: CallOverrides): Promise<string>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
      ] & {
        oftLimit: OFTLimitStructOutput;
        oftFeeDetails: OFTFeeDetailStructOutput[];
        oftReceipt: OFTReceiptStructOutput;
      }
    >;

    quoteSend(
      _sendParam: SendParamStruct,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    quoteSendCredits(
      _dstEid: PromiseOrValue<BigNumberish>,
      _creditsEth: PromiseOrValue<BigNumberish>,
      _creditsArbitrum: PromiseOrValue<BigNumberish>,
      _creditsTon: PromiseOrValue<BigNumberish>,
      _creditsTron: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    quoteWithdrawRemote(
      _sendParam: SendParamStruct,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    send(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [MessagingReceiptStructOutput, OFTReceiptStructOutput] & {
        msgReceipt: MessagingReceiptStructOutput;
        oftReceipt: OFTReceiptStructOutput;
      }
    >;

    sendCredits(
      _dstEid: PromiseOrValue<BigNumberish>,
      _creditsEth: PromiseOrValue<BigNumberish>,
      _creditsArbitrum: PromiseOrValue<BigNumberish>,
      _creditsTon: PromiseOrValue<BigNumberish>,
      _creditsTron: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _fee: MessagingFeeStruct,
      overrides?: CallOverrides
    ): Promise<MessagingReceiptStructOutput>;

    setDelegate(
      _delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnforcedOptions(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeBps(
      _feeBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPeer(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlanner(
      _planner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sharedDecimals(overrides?: CallOverrides): Promise<number>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tvl(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFees(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLocal(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRemote(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MessagingReceiptStructOutput>;
  };

  filters: {
    "CreditsReceived(bytes32,uint32,bytes)"(
      guid?: null,
      srcEid?: null,
      message?: null
    ): CreditsReceivedEventFilter;
    CreditsReceived(
      guid?: null,
      srcEid?: null,
      message?: null
    ): CreditsReceivedEventFilter;

    "CreditsSent(uint32,uint64,uint64,uint64,uint64)"(
      dstEid?: null,
      creditsEth?: null,
      creditsArbitrum?: null,
      creditsTon?: null,
      creditsTron?: null
    ): CreditsSentEventFilter;
    CreditsSent(
      dstEid?: null,
      creditsEth?: null,
      creditsArbitrum?: null,
      creditsTon?: null,
      creditsTron?: null
    ): CreditsSentEventFilter;

    "EnforcedOptionSet(tuple[])"(
      _enforcedOptions?: null
    ): EnforcedOptionSetEventFilter;
    EnforcedOptionSet(_enforcedOptions?: null): EnforcedOptionSetEventFilter;

    "FeeBpsSet(uint16)"(feeBps?: null): FeeBpsSetEventFilter;
    FeeBpsSet(feeBps?: null): FeeBpsSetEventFilter;

    "FeesWithdrawn(address,uint256)"(
      to?: null,
      amount?: null
    ): FeesWithdrawnEventFilter;
    FeesWithdrawn(to?: null, amount?: null): FeesWithdrawnEventFilter;

    "LocalDeposit(uint256)"(amount?: null): LocalDepositEventFilter;
    LocalDeposit(amount?: null): LocalDepositEventFilter;

    "LocalWithdrawn(address,uint256)"(
      to?: null,
      amount?: null
    ): LocalWithdrawnEventFilter;
    LocalWithdrawn(to?: null, amount?: null): LocalWithdrawnEventFilter;

    "OFTReceived(bytes32,uint32,address,uint256)"(
      guid?: PromiseOrValue<BytesLike> | null,
      srcEid?: null,
      toAddress?: PromiseOrValue<string> | null,
      amountReceivedLD?: null
    ): OFTReceivedEventFilter;
    OFTReceived(
      guid?: PromiseOrValue<BytesLike> | null,
      srcEid?: null,
      toAddress?: PromiseOrValue<string> | null,
      amountReceivedLD?: null
    ): OFTReceivedEventFilter;

    "OFTSent(bytes32,uint32,address,uint256,uint256)"(
      guid?: PromiseOrValue<BytesLike> | null,
      dstEid?: null,
      fromAddress?: PromiseOrValue<string> | null,
      amountSentLD?: null,
      amountReceivedLD?: null
    ): OFTSentEventFilter;
    OFTSent(
      guid?: PromiseOrValue<BytesLike> | null,
      dstEid?: null,
      fromAddress?: PromiseOrValue<string> | null,
      amountSentLD?: null,
      amountReceivedLD?: null
    ): OFTSentEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PeerSet(uint32,bytes32)"(eid?: null, peer?: null): PeerSetEventFilter;
    PeerSet(eid?: null, peer?: null): PeerSetEventFilter;

    "PlannerSet(address)"(planner?: null): PlannerSetEventFilter;
    PlannerSet(planner?: null): PlannerSetEventFilter;

    "RemoteWithdrawReceived(bytes32,uint32,address,uint256)"(
      guid?: null,
      srcEid?: null,
      to?: null,
      amount?: null
    ): RemoteWithdrawReceivedEventFilter;
    RemoteWithdrawReceived(
      guid?: null,
      srcEid?: null,
      to?: null,
      amount?: null
    ): RemoteWithdrawReceivedEventFilter;

    "RemoteWithdrawn(uint32,uint256)"(
      dstEid?: null,
      amount?: null
    ): RemoteWithdrawnEventFilter;
    RemoteWithdrawn(dstEid?: null, amount?: null): RemoteWithdrawnEventFilter;
  };

  estimateGas: {
    ARBITRUM_EID(overrides?: CallOverrides): Promise<BigNumber>;

    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    ETH_EID(overrides?: CallOverrides): Promise<BigNumber>;

    LOCAL_EID(overrides?: CallOverrides): Promise<BigNumber>;

    SEND_CREDITS(overrides?: CallOverrides): Promise<BigNumber>;

    SEND_OFT(overrides?: CallOverrides): Promise<BigNumber>;

    TON_EID(overrides?: CallOverrides): Promise<BigNumber>;

    TRON_EID(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAW_REMOTE(overrides?: CallOverrides): Promise<BigNumber>;

    allowInitializePath(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvalRequired(overrides?: CallOverrides): Promise<BigNumber>;

    combineOptions(
      _eid: PromiseOrValue<BigNumberish>,
      _msgType: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    credits(
      eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositLocal(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endpoint(overrides?: CallOverrides): Promise<BigNumber>;

    enforcedOptions(
      eid: PromiseOrValue<BigNumberish>,
      msgType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    feeBps(overrides?: CallOverrides): Promise<BigNumber>;

    isComposeMsgSender(
      arg0: OriginStruct,
      arg1: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lzReceive(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nextNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oAppVersion(overrides?: CallOverrides): Promise<BigNumber>;

    oftVersion(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    peers(
      eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    planner(overrides?: CallOverrides): Promise<BigNumber>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSend(
      _sendParam: SendParamStruct,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSendCredits(
      _dstEid: PromiseOrValue<BigNumberish>,
      _creditsEth: PromiseOrValue<BigNumberish>,
      _creditsArbitrum: PromiseOrValue<BigNumberish>,
      _creditsTon: PromiseOrValue<BigNumberish>,
      _creditsTron: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteWithdrawRemote(
      _sendParam: SendParamStruct,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    send(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendCredits(
      _dstEid: PromiseOrValue<BigNumberish>,
      _creditsEth: PromiseOrValue<BigNumberish>,
      _creditsArbitrum: PromiseOrValue<BigNumberish>,
      _creditsTon: PromiseOrValue<BigNumberish>,
      _creditsTron: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _fee: MessagingFeeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelegate(
      _delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEnforcedOptions(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeBps(
      _feeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPeer(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlanner(
      _planner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tvl(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFees(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawLocal(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawRemote(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ARBITRUM_EID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ETH_EID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOCAL_EID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SEND_CREDITS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SEND_OFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TON_EID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRON_EID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WITHDRAW_REMOTE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowInitializePath(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvalRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    combineOptions(
      _eid: PromiseOrValue<BigNumberish>,
      _msgType: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    credits(
      eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositLocal(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enforcedOptions(
      eid: PromiseOrValue<BigNumberish>,
      msgType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isComposeMsgSender(
      arg0: OriginStruct,
      arg1: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lzReceive(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nextNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oAppVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oftVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peers(
      eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    planner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSend(
      _sendParam: SendParamStruct,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSendCredits(
      _dstEid: PromiseOrValue<BigNumberish>,
      _creditsEth: PromiseOrValue<BigNumberish>,
      _creditsArbitrum: PromiseOrValue<BigNumberish>,
      _creditsTon: PromiseOrValue<BigNumberish>,
      _creditsTron: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteWithdrawRemote(
      _sendParam: SendParamStruct,
      _payInLzToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    send(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendCredits(
      _dstEid: PromiseOrValue<BigNumberish>,
      _creditsEth: PromiseOrValue<BigNumberish>,
      _creditsArbitrum: PromiseOrValue<BigNumberish>,
      _creditsTon: PromiseOrValue<BigNumberish>,
      _creditsTron: PromiseOrValue<BigNumberish>,
      _extraOptions: PromiseOrValue<BytesLike>,
      _fee: MessagingFeeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelegate(
      _delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEnforcedOptions(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeBps(
      _feeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPeer(
      _eid: PromiseOrValue<BigNumberish>,
      _peer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlanner(
      _planner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sharedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tvl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFees(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLocal(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRemote(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
