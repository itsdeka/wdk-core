{"version":3,"sources":["../src/aptos/OftBridgeV2__aptos.ts","../src/aptos/utils.ts","../src/aptos/OftClaimV2__aptos.ts"],"names":["isErrorOfApiError","createTransaction","CurrencyAmount","isAptosChainKey"],"mappings":"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","sourcesContent":["import {createTransaction, type GetAptosClientFunction} from '@layerzerolabs/ui-aptos';\nimport type {\n  BridgeApi,\n  GetRouteInput,\n  GetRouteResult,\n  ResolvedRoute,\n  BridgeOptions,\n  GetOptionsInput,\n  TransferInput,\n  GetDurationInput,\n  GetDurationResult,\n} from '@layerzerolabs/ui-bridge-sdk/v2';\nimport {\n  type Currency,\n  CurrencyAmount,\n  MaxUint256,\n  type ChainKey,\n  removeDust,\n  castCurrencyAmountUnsafe,\n  MessageFee,\n  type Transaction,\n  type FeeQuote,\n  isAptosChainKey,\n  isEvmChainKey,\n} from '@layerzerolabs/ui-core';\nimport type {BCS, Types} from 'aptos';\nimport type {OftBridgeConfig} from '../types';\nimport {getDeployment, tryGetDeployment} from '../utils';\nimport {AddressOne, addressToBytes32} from '@layerzerolabs/ui-evm';\nimport {\n  getMinDstGas,\n  getMessageFee,\n  isErrorOfApiError,\n  buildDefaultAdapterParams,\n  buildAirdropAdapterParams,\n} from '@layerzerolabs/ui-aptos';\nimport type {AccountsConfig} from './types';\nimport {getAccount, getOftAddress, getTypeAddress, sendCoinPayload} from './utils';\n\nconst SEND_PAYLOAD_LENGTH = 41;\n\nexport class OftBridgeV2__aptos implements BridgeApi<unknown> {\n  constructor(\n    protected config: OftBridgeConfig,\n    protected accounts: AccountsConfig,\n    protected getClient: GetAptosClientFunction,\n  ) {}\n\n  async getDuration(input: GetDurationInput): Promise<GetDurationResult> {\n    return {estimated: 0};\n  }\n\n  async getOptions(input: GetOptionsInput): Promise<BridgeOptions> {\n    return {options: [{mode: 'taxi'}]};\n  }\n\n  async transfer(\n    input: TransferInput & {dstNativeAmount: CurrencyAmount},\n  ): Promise<Transaction<unknown>> {\n    const path = getPath(input);\n    const client = this.getClient(input.srcChainKey);\n    const minDstGas = await this.getMinDstGas(path);\n    const messageFee = await this.getMessageFee(path, {\n      minDstGas,\n      // dstNativeAddress: input.dstAddress,\n      dstNativeAddress: getDstAddressForQuote(input.dstChainKey),\n      dstNativeAmount: input.dstNativeAmount.toBigInt(),\n    });\n    const minAmountLD = castCurrencyAmountUnsafe(input.dstAmountMin, input.srcToken);\n\n    const adapterParams = input.dstNativeAmount.equalTo(0)\n      ? buildDefaultAdapterParams(minDstGas)\n      : buildAirdropAdapterParams(minDstGas, input.dstNativeAmount.toBigInt(), input.dstAddress);\n\n    const dstEid = getDeployment(input.dstChainKey, this.config).eid;\n    const dstAddress = addressToBytes32(input.dstAddress);\n    const msgLibParams = new Uint8Array(0);\n    const accounts = this.accounts[input.srcChainKey];\n    const oftType = getOftAddress(input.srcChainKey, this.config);\n    const entryFunctionPayload = sendCoinPayload(\n      accounts,\n      oftType,\n      dstEid,\n      dstAddress,\n      input.srcAmount.toBigInt(),\n      minAmountLD.toBigInt(),\n      messageFee.nativeFee.toBigInt(),\n      0n,\n      adapterParams,\n      msgLibParams,\n    );\n    return createTransaction(entryFunctionPayload, {client});\n  }\n  supportsTransfer(srcToken: Currency, dstToken: Currency): boolean {\n    return Boolean(\n      isAptosChainKey(srcToken.chainKey) &&\n        tryGetDeployment(srcToken.chainKey, this.config)?.token.equals(srcToken) &&\n        tryGetDeployment(dstToken.chainKey, this.config)?.token.equals(dstToken),\n    );\n  }\n\n  public async getGlobalStore(chainKey: string): Promise<Types.MoveResource> {\n    const client = this.getClient(chainKey);\n    const oftType = getOftAddress(chainKey, this.config);\n    const address = getTypeAddress(oftType);\n    const module = `${getAccount(this.accounts, chainKey, 'layerzero_apps')}::oft`;\n    return client.getAccountResource(address, `${module}::GlobalStore<${oftType}>`);\n  }\n\n  public async getMinDstGas({srcChainKey, dstChainKey}: Path): Promise<BCS.Uint64> {\n    const dstEid = getDeployment(dstChainKey, this.config).eid;\n    const oftType = getOftAddress(srcChainKey, this.config);\n    const minDstGas = await getMinDstGas(\n      this.getClient(srcChainKey),\n      this.accounts[srcChainKey],\n      getTypeAddress(oftType),\n      dstEid,\n      BigInt(PacketType.SEND),\n    );\n    return BigInt(minDstGas);\n  }\n\n  public async getFeeBp({srcChainKey, dstChainKey}: Path): Promise<bigint> {\n    const client = this.getClient(srcChainKey);\n    const dstEid = getDeployment(dstChainKey, this.config).eid;\n    const resource = await this.getGlobalStore(srcChainKey);\n    const {fee_config} = resource.data as GlobalStore;\n\n    try {\n      return await client.getTableItem(fee_config.chain_id_to_fee_bp.handle, {\n        key_type: `u64`,\n        value_type: `u64`,\n        key: dstEid.toString(),\n      });\n    } catch (e) {\n      if (isErrorOfApiError(e, 404)) {\n        return BigInt(fee_config.default_fee_bp);\n      }\n      throw e;\n    }\n  }\n\n  public async getMessageFee(\n    {srcChainKey, dstChainKey}: Path,\n    {\n      dstNativeAmount,\n      minDstGas,\n      dstNativeAddress,\n    }: {dstNativeAmount: bigint; minDstGas: bigint; dstNativeAddress: string},\n  ): Promise<FeeQuote> {\n    const oftType = getOftAddress(srcChainKey, this.config);\n    const uaAddress = getTypeAddress(oftType);\n    const dstEid = getDeployment(dstChainKey, this.config).eid;\n    const adapterParams =\n      dstNativeAmount === 0n\n        ? buildDefaultAdapterParams(minDstGas)\n        : buildAirdropAdapterParams(minDstGas, dstNativeAmount, dstNativeAddress);\n\n    const nativeFee = await getMessageFee(\n      this.getClient(srcChainKey),\n      this.accounts[srcChainKey],\n      uaAddress,\n      dstEid,\n      adapterParams,\n      SEND_PAYLOAD_LENGTH,\n    );\n\n    return MessageFee.from(srcChainKey, {\n      nativeFee: nativeFee,\n      zroFee: 0n,\n    });\n  }\n\n  public async getRoute(input: GetRouteInput): Promise<GetRouteResult> {\n    const path = getPath(input);\n    const [minDstGas, feeBp] = await Promise.all([\n      this.getMinDstGas(path),\n      // don't hit the network if fee is disabled\n      this.config.fee === false ? 0n : this.getFeeBp(path),\n    ]);\n\n    // need to quote message with 0 and provided dstNativeAmount to get\n    // actual message fee\n\n    const [endpointFee0, endpointFee1, duration] = await Promise.all([\n      this.getMessageFee(path, {\n        minDstGas,\n        dstNativeAddress: getDstAddressForQuote(path.dstChainKey),\n        dstNativeAmount: 0n,\n      }),\n      // quoting to warm up cache\n      this.getMessageFee(path, {\n        minDstGas,\n        dstNativeAddress: getDstAddressForQuote(path.dstChainKey),\n        dstNativeAmount: input.dstNativeAmount.toBigInt(),\n      }),\n      this.getDuration(input),\n    ]);\n\n    const gasCost = endpointFee1.nativeFee.subtract(endpointFee0.nativeFee);\n    const srcAmount = removeDust(input.srcAmount, this.config.sharedDecimals);\n    const feeAmount = srcAmount.multiply(feeBp).divide(10000);\n    const dstAmountLd = srcAmount.subtract(feeAmount);\n    const dstAmount = castCurrencyAmountUnsafe(dstAmountLd, input.dstToken);\n    const srcAmountMax = CurrencyAmount.fromBigInt(input.srcToken, MaxUint256);\n    const messageFee = endpointFee0;\n\n    const route: ResolvedRoute = {\n      mode: 'taxi',\n      allowance: getMaxAllowance(input.srcToken),\n      dstAddress: input.dstAddress,\n      dstAmount,\n      dstAmountMin: dstAmount,\n      dstNativeAmount: input.dstNativeAmount,\n      dstToken: input.dstToken,\n      duration,\n      error: undefined,\n      gasCost,\n      messageFee,\n      option: {\n        mode: 'taxi',\n      },\n      srcAddress: input.srcAddress,\n      srcAmount: srcAmount,\n      srcAmountMax: srcAmountMax,\n      srcToken: input.srcToken,\n    };\n\n    return route;\n  }\n}\n\n// returns same address so it can be cached\nfunction getDstAddressForQuote(chainKey: ChainKey) {\n  if (isEvmChainKey(chainKey)) {\n    return AddressOne;\n  }\n  throw new Error(`Unsupported chain key: ${chainKey}`);\n}\n\nfunction getPath(input: {srcToken: Currency; dstToken: Currency}) {\n  return {\n    srcChainKey: input.srcToken.chainKey,\n    dstChainKey: input.dstToken.chainKey,\n  };\n}\n\ntype Path = {srcChainKey: ChainKey; dstChainKey: ChainKey};\n\nfunction getMaxAllowance(token: Currency) {\n  return CurrencyAmount.fromRawAmount(token, MaxUint256);\n}\n\ninterface GlobalStore {\n  proxy: boolean;\n  ld2sd_rate: string;\n  fee_config: FeeConfig;\n  custom_adapter_params: boolean;\n}\n\ninterface FeeConfig {\n  fee_owner: string;\n  default_fee_bp: string;\n  chain_id_to_fee_bp: {\n    handle: string;\n  };\n}\n\nenum PacketType {\n  SEND = 0,\n}\n","import {type Accounts, isErrorOfApiError} from '@layerzerolabs/ui-aptos';\nimport {assert, hasAddress, type ChainKey} from '@layerzerolabs/ui-core';\nimport type {BCS, Types, MaybeHexString, AptosClient} from 'aptos';\nimport type {AccountsConfig} from './types';\nimport {getDeployment} from '../utils';\nimport type {OftBridgeConfig} from '../types';\n\nexport function sendCoinPayload(\n  accounts: Accounts,\n  oftType: string,\n  dstChainId: BCS.Uint16,\n  dstReceiver: BCS.Bytes,\n  amount: BCS.Uint64 | BCS.Uint32,\n  minAmount: BCS.Uint64 | BCS.Uint32,\n  nativeFee: BCS.Uint64 | BCS.Uint32,\n  zroFee: BCS.Uint64 | BCS.Uint32,\n  adapterParams: BCS.Bytes,\n  msgLibParams: BCS.Bytes,\n): Types.EntryFunctionPayload {\n  const module = `${accounts.layerzero_apps.address}::oft`;\n  return {\n    function: `${module}::send`,\n    type_arguments: [oftType],\n    arguments: [\n      dstChainId.toString(),\n      dstReceiver,\n      amount.toString(),\n      minAmount.toString(),\n      nativeFee.toString(),\n      zroFee.toString(),\n      adapterParams,\n      msgLibParams,\n    ],\n  };\n}\n\nexport function getTypeAddress(oftAddress: string): string {\n  const match = oftAddress.match(/0x(?<address>.*)::(?<module>.*)::(?<struct>.*)/i);\n  if (!match) {\n    throw new Error(`Invalid oft type: ${oftAddress}`);\n  }\n  const {address} = match.groups!;\n  return address;\n}\n\nexport function getAccount(\n  accounts: AccountsConfig,\n  chainKey: ChainKey,\n  app: keyof AccountsConfig[ChainKey],\n): MaybeHexString {\n  const address = accounts[chainKey]?.[app]?.address;\n  if (address) return address;\n  throw new Error(`No address for ${app} on ${chainKey}`);\n}\n\nexport function claimCoinPayload(accounts: Accounts, oftType: string) {\n  const module = `${accounts.layerzero_apps.address}::oft`;\n  return {\n    function: `${module}::claim`,\n    type_arguments: [oftType],\n    arguments: [],\n  };\n}\n\nexport async function getCoinStore(\n  accounts: Accounts,\n  client: AptosClient,\n  oftType: string,\n): Promise<Types.MoveResource> {\n  const module = `${accounts.layerzero_apps.address}::oft`;\n  const address = getTypeAddress(oftType);\n  return client.getAccountResource(address, `${module}::CoinStore<${oftType}>`);\n}\n\nexport async function getUnclaimed(\n  accounts: Accounts,\n  client: AptosClient,\n  oftType: string,\n  owner: string,\n): Promise<BCS.Uint64> {\n  const resource = await getCoinStore(accounts, client, oftType);\n  const {claimable_amount} = resource.data as {claimable_amount: {handle: string}};\n  const claimableAmtLDHandle = claimable_amount.handle;\n\n  try {\n    const response = await client.getTableItem(claimableAmtLDHandle, {\n      key_type: 'address',\n      value_type: 'u64',\n      key: owner,\n    });\n    return BigInt(response);\n  } catch (e) {\n    if (isErrorOfApiError(e, 404)) {\n      return 0n;\n    }\n    throw e;\n  }\n}\n\nexport function getOftAddress(chainKey: ChainKey, config: OftBridgeConfig): string {\n  const deployment = getDeployment(chainKey, config);\n  const token = deployment.token;\n  assert(hasAddress(token), 'Token address is required');\n  return token.address;\n}\n","import {createTransaction, type GetAptosClientFunction} from '@layerzerolabs/ui-aptos';\nimport type {\n  ClaimApi,\n  ClaimInput,\n  GetUnclaimedInput,\n  GetUnclaimedResult,\n} from '@layerzerolabs/ui-bridge-sdk/dist/v2';\nimport type {OftBridgeConfig} from '../types';\nimport type {AccountsConfig} from './types';\nimport {\n  type Currency,\n  CurrencyAmount,\n  isAptosChainKey,\n  type Transaction,\n} from '@layerzerolabs/ui-core';\nimport {claimCoinPayload, getOftAddress, getUnclaimed} from './utils';\n\nexport class OftClaimV2__aptos implements ClaimApi<unknown> {\n  constructor(\n    protected config: OftBridgeConfig,\n    protected accounts: AccountsConfig,\n    protected getClient: GetAptosClientFunction,\n  ) {}\n\n  supports(token: Currency): boolean {\n    if (!isAptosChainKey(token.chainKey)) return false;\n    for (const deployment of Object.values(this.config.deployments)) {\n      if (deployment.token.equals(token)) return true;\n    }\n    return false;\n  }\n\n  async claim(input: ClaimInput): Promise<Transaction<unknown>> {\n    const client = this.getClient(input.token.chainKey);\n    const oftType = getOftAddress(input.token.chainKey, this.config);\n    const accounts = this.accounts[input.token.chainKey];\n    const entryFunctionPayload = claimCoinPayload(accounts, oftType);\n    return createTransaction(entryFunctionPayload, {client});\n  }\n\n  async getUnclaimed(input: GetUnclaimedInput): Promise<GetUnclaimedResult> {\n    const accounts = this.accounts[input.token.chainKey];\n    const client = this.getClient(input.token.chainKey);\n    const oftType = getOftAddress(input.token.chainKey, this.config);\n    const unclaimed = await getUnclaimed(accounts, client, oftType, input.owner);\n    return CurrencyAmount.fromBigInt(input.token, unclaimed);\n  }\n}\n"]}