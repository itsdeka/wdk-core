{"version":3,"sources":["../src/ton/OftBridgeV3__ton.ts","../src/ton/allObjects.ts","../../../node_modules/lodash-es/_freeGlobal.js","../../../node_modules/lodash-es/_root.js","../../../node_modules/lodash-es/_Symbol.js","../../../node_modules/lodash-es/_getRawTag.js","../../../node_modules/lodash-es/_objectToString.js","../../../node_modules/lodash-es/_baseGetTag.js","../../../node_modules/lodash-es/isObjectLike.js","../../../node_modules/lodash-es/isSymbol.js","../../../node_modules/lodash-es/_arrayMap.js","../../../node_modules/lodash-es/isArray.js","../../../node_modules/lodash-es/_baseToString.js","../../../node_modules/lodash-es/toString.js","../../../node_modules/lodash-es/replace.js","../src/ton/utils.ts","../src/ton/OftBridgeApiFactory__ton.ts"],"names":["objectProto","nativeObjectToString","symToStringTag"],"mappings":";;;;;;AACA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAqBP;AAAA,EACE;AAAA,EAGA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OAGK;AAEP,SAAiB,WAAW,cAAa;AACzC,SAAQ,gBAAe;AAEvB;AAAA,EACE;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,OACK;;;AC/DA,IAAM,aAAa;AAAA,EACxB,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,IAAI;AAAA,MACF,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,IAAI;AAAA,MACF,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,IAAI;AAAA,MACF,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,IAAI;AAAA,MACF,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,IAAI;AAAA,MACF,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,IAAI;AAAA,MACF,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,IAAI;AAAA,MACF,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,IAAI;AAAA,MACF,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,mCAAmC;AAAA,IACjC,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,EACR;AAAA,EACA,iCAAiC;AAAA,IAC/B,MAAM;AAAA,EACR;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,YAAY;AAAA,IACV,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,uBAAuB;AAAA,IACrB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,oBAAoB;AAAA,IAClB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,sBAAsB;AAAA,IACpB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,iBAAiB;AAAA,IACf,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,YAAY;AAAA,IACV,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,wBAAwB;AAAA,IACtB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,mBAAmB;AAAA,IACjB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,wBAAwB;AAAA,IACtB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,gCAAgC;AAAA,IAC9B,MAAM;AAAA,EACR;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,6BAA6B;AAAA,IAC3B,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,oBAAoB;AAAA,IAClB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,yBAAyB;AAAA,IACvB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,wBAAwB;AAAA,IACtB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,uBAAuB;AAAA,IACrB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,gCAAgC;AAAA,IAC9B,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,iBAAiB;AAAA,IACf,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,aAAa;AAAA,IACX,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,aAAa;AAAA,IACX,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,wBAAwB;AAAA,IACtB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,0BAA0B;AAAA,IACxB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,IAAI;AAAA,MACF,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,aAAa;AAAA,IACX,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,uBAAuB;AAAA,IACrB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,iBAAiB;AAAA,IACf,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,iBAAiB;AAAA,IACf,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,mBAAmB;AAAA,IACjB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,eAAe;AAAA,IACb,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,2BAA2B;AAAA,IACzB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,iBAAiB;AAAA,IACf,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,IAAI;AAAA,MACF,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,YAAY;AAAA,IACV,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,aAAa;AAAA,IACX,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,IAAI;AAAA,MACF,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,IAAI;AAAA,MACF,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,eAAe;AAAA,IACb,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,YAAY;AAAA,IACV,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,mBAAmB;AAAA,IACjB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,sBAAsB;AAAA,IACpB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,eAAe;AAAA,IACb,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,yBAAyB;AAAA,IACvB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,wCAAwC;AAAA,IACtC,MAAM;AAAA,EACR;AAAA,EACA,sBAAsB;AAAA,IACpB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,+BAA+B;AAAA,IAC7B,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,sBAAsB;AAAA,IACpB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,WAAW;AAAA,IACT,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,qCAAqC;AAAA,IACnC,MAAM;AAAA,EACR;AAAA,EACA,eAAe;AAAA,IACb,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,eAAe;AAAA,IACb,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,kCAAkC;AAAA,IAChC,MAAM;AAAA,EACR;AAAA,EACA,uBAAuB;AAAA,IACrB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,+BAA+B;AAAA,IAC7B,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,6BAA6B;AAAA,IAC3B,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,qBAAqB;AAAA,IACnB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,0BAA0B;AAAA,IACxB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,KAAK;AAAA,IACH,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,eAAe;AAAA,IACb,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,YAAY;AAAA,IACV,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,WAAW;AAAA,IACT,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,4BAA4B;AAAA,IAC1B,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,iBAAiB;AAAA,IACf,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,mBAAmB;AAAA,IACjB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,KAAK;AAAA,IACH,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,qBAAqB;AAAA,IACnB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,eAAe;AAAA,IACb,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,iBAAiB;AAAA,IACf,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,qBAAqB;AAAA,IACnB,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,OAAO;AAAA,IACL,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,QAAQ;AAAA,IACN,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,aAAa;AAAA,IACX,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,KAAK;AAAA,IACH,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,YAAY;AAAA,IACV,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,QAAQ;AAAA,IACN,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,YAAY;AAAA,IACV,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,aAAa;AAAA,IACX,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AAAA,EACA,eAAe;AAAA,IACb,MAAM;AAAA,IACN,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,IACA,GAAG;AAAA,MACD,WAAW;AAAA,MACX,WAAW;AAAA,IACb;AAAA,EACF;AACF;;;ADl1DA,OAAO,iBAA+B;;;AEhEtC,IAAI,aAAa,OAAO,UAAU,YAAY,UAAU,OAAO,WAAW,UAAU;AAEpF,IAAO,qBAAQ;;;ACAf,IAAI,WAAW,OAAO,QAAQ,YAAY,QAAQ,KAAK,WAAW,UAAU;AAG5E,IAAI,OAAO,sBAAc,YAAY,SAAS,aAAa,EAAE;AAE7D,IAAO,eAAQ;;;ACLf,IAAI,SAAS,aAAK;AAElB,IAAO,iBAAQ;;;ACFf,IAAI,cAAc,OAAO;AAGzB,IAAI,iBAAiB,YAAY;AAOjC,IAAI,uBAAuB,YAAY;AAGvC,IAAI,iBAAiB,iBAAS,eAAO,cAAc;AASnD,SAAS,UAAU,OAAO;AACxB,MAAI,QAAQ,eAAe,KAAK,OAAO,cAAc,GACjD,MAAM,MAAM,cAAc;AAE9B,MAAI;AACF,UAAM,cAAc,IAAI;AACxB,QAAI,WAAW;AAAA,EACjB,SAAS,GAAP;AAAA,EAAW;AAEb,MAAI,SAAS,qBAAqB,KAAK,KAAK;AAC5C,MAAI,UAAU;AACZ,QAAI,OAAO;AACT,YAAM,cAAc,IAAI;AAAA,IAC1B,OAAO;AACL,aAAO,MAAM,cAAc;AAAA,IAC7B;AAAA,EACF;AACA,SAAO;AACT;AAEA,IAAO,oBAAQ;;;AC5Cf,IAAIA,eAAc,OAAO;AAOzB,IAAIC,wBAAuBD,aAAY;AASvC,SAAS,eAAe,OAAO;AAC7B,SAAOC,sBAAqB,KAAK,KAAK;AACxC;AAEA,IAAO,yBAAQ;;;AChBf,IAAI,UAAU;AAAd,IACI,eAAe;AAGnB,IAAIC,kBAAiB,iBAAS,eAAO,cAAc;AASnD,SAAS,WAAW,OAAO;AACzB,MAAI,SAAS,MAAM;AACjB,WAAO,UAAU,SAAY,eAAe;AAAA,EAC9C;AACA,SAAQA,mBAAkBA,mBAAkB,OAAO,KAAK,IACpD,kBAAU,KAAK,IACf,uBAAe,KAAK;AAC1B;AAEA,IAAO,qBAAQ;;;ACHf,SAAS,aAAa,OAAO;AAC3B,SAAO,SAAS,QAAQ,OAAO,SAAS;AAC1C;AAEA,IAAO,uBAAQ;;;ACxBf,IAAI,YAAY;AAmBhB,SAAS,SAAS,OAAO;AACvB,SAAO,OAAO,SAAS,YACpB,qBAAa,KAAK,KAAK,mBAAW,KAAK,KAAK;AACjD;AAEA,IAAO,mBAAQ;;;ACnBf,SAAS,SAAS,OAAO,UAAU;AACjC,MAAI,QAAQ,IACR,SAAS,SAAS,OAAO,IAAI,MAAM,QACnC,SAAS,MAAM,MAAM;AAEzB,SAAO,EAAE,QAAQ,QAAQ;AACvB,WAAO,KAAK,IAAI,SAAS,MAAM,KAAK,GAAG,OAAO,KAAK;AAAA,EACrD;AACA,SAAO;AACT;AAEA,IAAO,mBAAQ;;;ACGf,IAAI,UAAU,MAAM;AAEpB,IAAO,kBAAQ;;;ACnBf,IAAI,WAAW,IAAI;AAGnB,IAAI,cAAc,iBAAS,eAAO,YAAY;AAA9C,IACI,iBAAiB,cAAc,YAAY,WAAW;AAU1D,SAAS,aAAa,OAAO;AAE3B,MAAI,OAAO,SAAS,UAAU;AAC5B,WAAO;AAAA,EACT;AACA,MAAI,gBAAQ,KAAK,GAAG;AAElB,WAAO,iBAAS,OAAO,YAAY,IAAI;AAAA,EACzC;AACA,MAAI,iBAAS,KAAK,GAAG;AACnB,WAAO,iBAAiB,eAAe,KAAK,KAAK,IAAI;AAAA,EACvD;AACA,MAAI,SAAU,QAAQ;AACtB,SAAQ,UAAU,OAAQ,IAAI,SAAU,CAAC,WAAY,OAAO;AAC9D;AAEA,IAAO,uBAAQ;;;ACbf,SAAS,SAAS,OAAO;AACvB,SAAO,SAAS,OAAO,KAAK,qBAAa,KAAK;AAChD;AAEA,IAAO,mBAAQ;;;ACNf,SAAS,UAAU;AACjB,MAAI,OAAO,WACP,SAAS,iBAAS,KAAK,CAAC,CAAC;AAE7B,SAAO,KAAK,SAAS,IAAI,SAAS,OAAO,QAAQ,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AACnE;AAEA,IAAO,kBAAQ;;;AC1BR,SAAS,aAAa,SAAiB,aAAqB,aAAqB;AACtF,SAAO,GAAG,WAAW,gBAAQ,YAAY,YAAY,GAAG,KAAK,GAAG,KAAK,gBAAQ,YAAY,YAAY,GAAG,KAAK,GAAG;AAClH;;;AfkEA,IAAM,gBAAgB,mBAAmB,UAAU;AACnD,IAAM,iBAAiB,oBAAoB,UAAU;AAiBrD,IAAM,sBAAsB;AAErB,IAAM,mBAAN,MAA0D;AAAA,EAS/D,YACqB,QACH,QACG,eACA,YACnB;AAJmB;AACH;AACG;AACA;AAEnB,SAAK,eAAe,MAAM;AAE1B,SAAK,cAAc,gBAAgB,KAAK,cAAc,QAAQ;AAG9D,UAAM,UAAU,mBAAmB,OAAO,KAAK,WAAW;AAC1D,SAAK,WAAW,KAAK,OAAO,SAAS,KAAK,WAAW,EAAE,KAAK,OAAO;AAEnE,UAAM,mBAAmB,gBAAgB,cAAc,KAAK;AAE5D,SAAK,iBAAiB,KAAK,OAAO,KAAK,WAAW,kBAAkB,gBAAgB,CAAC;AAAA,EACvF;AAAA,EAzBA;AAAA,EACA;AAAA,EACA;AAAA,EACA,mBAA2B;AAAA;AAAA,EAG3B,WAAkD,IAAI,YAAY,MAAM;AAAA,EAqB9D,eAAe,QAAyB;AAChD,WAAO,OAAO,YAAY,GAAG,uCAAuC;AAAA,EAGtE;AAAA,EAEA,QAAQ,OAAsD;AAE5D,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAAA,EAEA,MAAM,OAAoD;AACxD,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAAA,EAEA,MAAM,UAAU,OAA4D;AAC1E,QAAI;AACF,YAAM,CAAC,QAAQ,GAAG,IAAI,MAAM,KAAK,SAAS,mBAAmB,MAAM,UAAU,SAAS,CAAC;AAEvF,aAAO;AAAA,QACL,WAAW,eAAe,WAAW,MAAM,UAAU,MAAM;AAAA,QAC3D,KAAK;AAAA,UACH,WAAW,eAAe;AAAA,YACxB,kBAAkB,MAAM,UAAU,MAAM,QAAQ;AAAA,YAChD;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF,SAAS,OAAP;AACA,aAAO;AAAA,QACL,WAAW,MAAM;AAAA,QACjB,KAAK;AAAA,UACH,WAAW,eAAe;AAAA,YACxB,kBAAkB,MAAM,UAAU,MAAM,QAAQ;AAAA,YAChD;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IAEF;AAAA,EACF;AAAA,EAEA,SAAS,UAA0D;AACjE,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAAA,EAEA,MAAM,qBAAqB,OAA2D;AACpF,UAAM,EAAC,aAAa,YAAY,KAAK,cAAc,gBAAe,IAAI;AACtE,UAAM,YAAY,KAAK,UAAU,SAAS,KAAK;AAE/C,QAAI,eAAe,UAAU,EAAE,QAAQ;AACvC,QAAI,mBAAmB,gBAAgB,YAAY,CAAC,GAAG;AACrD,qBAAe,WAAW,iBAAiB;AAAA,QACzC,cAAc;AAAA,QACd,gBAAgB;AAAA,QAChB,mBAAmB,OAAO,UAAU;AAAA,QACpC,kBAAkB,gBAAgB,SAAS;AAAA,MAC7C,CAAC;AAAA,IACH;AAEA,QAAI,mBAAmB;AACvB,QAAI,eAAe,WAAW,GAAG;AAC/B,yBAAmB,OAAO,gBAAgB,UAAU;AAAA,IACtD;AAEA,WAAO,cAAc,WAAW;AAAA,MAC9B,QAAQ,OAAO,KAAK,iBAAiB,WAAW,EAAE,GAAG;AAAA,MACrD,IAAI,OAAO,gBAAgB;AAAA,MAC3B,WAAW,cAAc,SAAS,KAAK,OAAO,CAAC;AAAA,MAC/C;AAAA,MACA,QAAQ,OAAO,CAAC;AAAA;AAAA,MAChB;AAAA,MACA,gBAAgB,UAAU,EAAE,UAAU,GAAG,CAAC,EAAE,QAAQ;AAAA,IACtD,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,mBAAmB,OAAyC;AAChE,UAAM,EAAC,aAAa,YAAY,KAAK,WAAW,YAAY,cAAc,gBAAe,IACvF;AACF,WAAO,aAAa,aAAa;AACjC,WAAO,KAAK,KAAK;AACjB,WAAO,YAAY,YAAY;AAC/B,WAAO,YAAY,YAAY;AAC/B,WAAO,WAAW,WAAW;AAC7B,WAAO,cAAc,cAAc;AAGnC,UAAM,QAAQ,IAAI,UAAU,SAAS,IAAI,KAAK;AAC9C,UAAM,iBAAiB,MAAM,KAAK,qBAAqB;AAAA,MACrD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAED,UAAM,mBAAmB,gBAAgB,UAAU;AACnD,WAAO,qBAAqB;AAAA,MAC1B,WAAW,KAAK;AAAA;AAAA,MAChB,aAAa;AAAA,MACb;AAAA,MACA,WAAW;AAAA;AAAA,MACX,cAAc,UAAU,SAAS;AAAA,MACjC;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,SAAS,OAAiE;AAC9E,UAAM,EAAC,YAAY,IAAG,IAAI;AAC1B,UAAM,mBAAmB,gBAAgB,UAAU;AAEnD,SAAK,mBAAmB,MAAM,KAAK,cAAc;AAEjD,UAAM,OAAO,MAAM,KAAK,mBAAmB,KAAK;AAEhD,UAAM,gBAAgB,MAAM,2BAA2B,KAAK,gBAAgB,gBAAgB;AAC5F,UAAM,SAAS,IAAI,UAAU,SAAS,IAAI,KAAK,mBAAmB,OAAO,mBAAmB;AAC5F,UAAM,cAAc;AAAA,MAClB;AAAA,QACE,UAAU;AAAA,UACR;AAAA,YACE,SAAS;AAAA,YACT,QAAQ,OAAO,SAAS;AAAA,YACxB,SAAS;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,QACE,QAAQ,KAAK;AAAA,MACf;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,gBAAgB;AACpB,UAAM,aAAa,MAAM,KAAK,OAC3B,SAAS,gBAAgB,KAAK,cAAc,QAAQ,CAAC,EACrD,IAAI,sBAAsB,CAAC,CAAC;AAC/B,UAAM,UAAU,eAAe,WAAW,WAAW,MAAM,SAAS,CAAC;AACrE,UAAM,aAAa,eAAe,cAAc,QAAQ,UAAU;AAElE,WAAO,WAAW,aAAa;AAAA,EACjC;AAAA,EAEA,aAAa,OAAmD;AAE9D,WAAO,QAAQ,QAAQ,eAAe,cAAc,MAAM,OAAO,UAAU,CAAC;AAAA,EAC9E;AAAA,EAEA,YAAY,OAA2C;AACrD,UAAM,EAAC,UAAU,SAAQ,IAAI;AAC7B,UAAM,SAAS,KAAK,iBAAiB,SAAS,QAAQ,EAAE;AACxD,UAAM,SAAS,KAAK,iBAAiB,SAAS,QAAQ,EAAE;AACxD,UAAM,KAAK,EAAC,SAAS,KAAK,cAAc,UAAU,KAAK,OAAM;AAC7D,WAAO,mBAAmB,IAAI,MAAM;AAAA,EACtC;AAAA,EAEA,YAAY,OAA0C;AACpD,WAAO,QAAQ,QAAQ,CAAC;AAAA,EAC1B;AAAA,EAEA,MAAM,SAAS,OAA+C;AAE5D,UAAM,CAAC,UAAU,WAAW,UAAU,UAAU,SAAS,IACvD,MAAM,KAAK,SAAS,iBAAiB;AACvC,YAAQ,MAAM,SAAS,UAAU;AAAA,MAC/B,KAAK,SAAS;AAAA,MACd,KAAK,SAAS;AACZ,eAAO,eAAe,cAAc,MAAM,UAAU,QAAQ;AAAA,MAC9D,KAAK,SAAS;AACZ,eAAO,eAAe,cAAc,MAAM,UAAU,SAAS;AAAA,MAC/D,KAAK,SAAS;AAAA,MACd,KAAK,SAAS;AACZ,eAAO,eAAe,cAAc,MAAM,UAAU,QAAQ;AAAA,MAC9D,KAAK;AAAA,MACL,KAAK;AACH,eAAO,eAAe,cAAc,MAAM,UAAU,QAAQ;AAAA,MAC9D,KAAK,SAAS;AAAA,MACd,KAAK,SAAS;AAAA,MACd,KAAK,SAAS;AAAA,MACd,KAAK,SAAS;AACZ,eAAO,eAAe,cAAc,MAAM,UAAU,SAAS;AAAA,MAC/D;AACE,eAAO,eAAe,cAAc,MAAM,UAAU,EAAE;AAAA,IAC1D;AAAA,EACF;AAAA,EAEA,MAAM,cAAc,OAA8C;AAChE,UAAM,EAAC,WAAU,IAAI;AACrB,QAAI,CAAC,YAAY;AACf,aAAO,WAAW,KAAK,MAAM,SAAS,UAAU;AAAA,QAC9C,WAAW;AAAA,QACX,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AACA,UAAM,OAAO,MAAM,KAAK,mBAAmB;AAAA,MACzC,GAAG;AAAA,MACH,KAAK,WAAW,KAAK,MAAM,SAAS,UAAU;AAAA,QAC5C,WAAW;AAAA,QACX,QAAQ;AAAA,MACV,CAAC;AAAA,IACH,CAAC;AAGD,UAAM,cAAc,GAAG,MAAM,eAAe,MAAM,eAAe,MAAM,iBAAiB,SAAS,KAAK;AACtG,QAAI,UAAU,KAAK,SAAS,IAAI,WAAW;AAC3C,QAAI,CAAC,SAAS;AAEZ,gBAAU,KAAK,gBAAgB,KAAK;AACpC,YAAM,KAAK,SAAS,IAAI,aAAa,SAAS,MAAO,EAAE;AAAA,IACzD;AACA,WAAO,MAAM;AAAA,EACf;AAAA,EAEA,MAAM,gBAAgB,OAA8C;AAClE,UAAM,EAAC,UAAU,UAAU,YAAY,gBAAe,IAAI;AAC1D,UAAM,cAAc,SAAS;AAC7B,UAAM,gBAAgB,KAAK,iBAAiB,SAAS,QAAQ;AAC7D,UAAM,aAAa;AAAA,MACjB,qBAAqB,OAAO,KAAK,cAAc,UAAU,GAAG,OAAO,cAAc,GAAG,CAAC;AAAA,IACvF;AAEA,UAAM,kBAAkB;AAAA,MACtB,0BAA0B,OAAO,KAAK,cAAc,UAAU,GAAG,OAAO,cAAc,GAAG,CAAC;AAAA,IAC5F;AAEA,UAAM,iBAAiB;AAAA,MACrB;AAAA,QACE,OAAO,KAAK,cAAc,QAAQ;AAAA,QAClC,OAAO,cAAc,GAAG;AAAA,QACxB,OAAO,cAAc,UAAU,WAAW,EAAE;AAAA,QAC5C,OAAO,KAAK,cAAc,UAAU;AAAA,QACpC,gBAAgB,eAAe;AAAA,MACjC;AAAA,IACF;AAEA,UAAM,SAAS;AAAA,MACb;AAAA,MACA,MAAM,KAAK,SAAS;AAAA,QAClB,MAAM,KAAK,qBAAqB;AAAA,UAC9B,aAAa,eAAe;AAAA,UAC5B,YAAY,cAAc;AAAA,UAC1B;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,UAAM,YAAY,WAAW,eAAe;AAAA,MAC1C;AAAA,MACA,qBACE,KAAK,WAAW,aAAa,QAAQ,OAAO,WAAW,CAAC,KACvD,MAAM,KAAK,aAAa,aAAa;AAAA,MACxC,0BAA0B,UAAU,EAAE,QAAQ;AAAA,MAC9C,mBAAmB;AAAA,IACrB,CAAC;AAED,QAAI;AACF,YAAM,cACJ,MAAM,KAAK,OAAO,SAAS,UAAU,EAAE,IAAI,YAAY;AAAA,QACrD;AAAA,UACE,MAAM;AAAA,UACN,MAAM;AAAA,QACR;AAAA,MACF,CAAC,GACD;AAIF,YAAM,cAAc,WAAW,UAAU,EAAE,KAAK,CAAC,EAAE,IAAI;AACvD,YAAM,kBAAkB,YAAY,0BAA0B,YAAY,CAAC,CAAC;AAC5E,YAAM,iBAAiB,kBAAkB,SAAS,QAAQ;AAC1D,YAAM,iBAAiB,IAAI,SAAS,IAAI,EAAE;AAC1C,aAAO;AAAA;AAAA,QAEL,WAAW,eAAe,WAAW,gBAAgB,gBAAgB,SAAS,EAAE;AAAA,UAC9E;AAAA,QACF;AAAA;AAAA,QAEA,QAAQ,eAAe,WAAW,gBAAgB,gBAAgB,MAAM,EAAE;AAAA,UACxE;AAAA,QACF;AAAA,MACF;AAAA,IACF,SAAS,OAAP;AACA,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAM,aAAa,eAAoC;AACrD,UAAM,aAAa;AAAA,MACjB,qBAAqB,OAAO,KAAK,cAAc,UAAU,GAAG,OAAO,cAAc,GAAG,CAAC;AAAA,IACvF;AAEA,UAAM,uBAAuB;AAAA,MAC3B;AAAA;AAAA,QAEE,OAAO,KAAK,cAAc,QAAQ;AAAA,QAClC,OAAO,cAAc,GAAG;AAAA,QACxB,OAAO,cAAc,UAAU,WAAW,EAAE;AAAA,QAC5C,OAAO,KAAK,cAAc,UAAU;AAAA,QACpC,gBAAgB,UAAU;AAAA,MAC5B;AAAA,IACF;AAEA,UAAM,6BAA6B,MAAM,KAAK,OAC3C,SAAS,oBAAoB,EAC7B,IAAI,sBAAsB,CAAC,CAAC;AAE/B,UAAM,uBAAuB;AAAA,MAC3B;AAAA,MACA,2BAA2B,MAAM,SAAS;AAAA,IAC5C;AAEA,WAAO,qBAAqB;AAAA,EAC9B;AAAA,EAEA,MAAM,WAAW,OAAgD;AAC/D,UAAM,aAA2B;AAAA,MAC/B,MAAM;AAAA,IACR;AACA,WAAO,EAAC,SAAS,CAAC,UAAU,EAAC;AAAA,EAC/B;AAAA,EAEA,aAAa,OAAmD;AAC9D,WAAO,QAAQ,QAAQ,eAAe,cAAc,MAAM,OAAO,CAAC,CAAC;AAAA,EACrE;AAAA,EAEA,aAAa,OAA4C;AACvD,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAC9B;AAAA,EAEA,cAAc,UAA6B;AACzC,WAAO;AAAA,EACT;AAAA,EAEA,iBAAiB,UAA6B;AAC5C,WAAO;AAAA,EACT;AAAA,EAEU,iBAAiB,UAAwB;AACjD,WAAO,KAAK,OAAO,YAAY,QAAQ;AAAA,EACzC;AAAA,EAEA,iBAAiB,UAAoB,UAA6B;AAChE,UAAM,eAAe,KAAK,iBAAiB,SAAS,QAAQ,GAAG;AAC/D,QAAI,cAAc;AAChB,UAAI,CAAC,aAAa,SAAS,SAAS,QAAQ,GAAG;AAC7C,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,MACL,cAAc,SAAS,QAAQ,KAC7B,KAAK,iBAAiB,SAAS,QAAQ,GAAG,MAAM,OAAO,QAAQ,KAC/D,KAAK,iBAAiB,SAAS,QAAQ,GAAG,MAAM,OAAO,QAAQ;AAAA,IACnE;AAAA,EACF;AACF;;;AgBpdO,IAAM,2BAAN,MAA+B;AAAA,EACpC,YACqB,QACA,eACA,YACnB;AAHmB;AACA;AACA;AAAA,EAClB;AAAA,EACH,OAAO,QAA2C;AAChD,UAAM,OACJ,OAAO,YAAY,IACf,IAAI,iBAAiB,KAAK,QAAQ,QAAQ,KAAK,eAAe,KAAK,UAAU,IAC7E;AACN,QAAI,CAAC,MAAM;AACT,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAC9C;AACA,WAAO;AAAA,EACT;AACF","sourcesContent":["import type {OftBridgeApi, OftBridgeConfig, OftBridgeDeployment, OftBridgeFee} from '../types';\nimport {\n  buildTonTransferCell,\n  createTransaction,\n  parseTonAddress,\n  TonContractWrapper,\n  getJettonAddressFromWallet,\n  TonSigner,\n  TonBaseMinter,\n  UsdtMinter,\n  computeTonUlnAddress,\n  computeTonEndpointAddress,\n  bigIntToAddress,\n  computeTonUlnConnectionAddress,\n  addressToBigInt,\n  computeTonChannelAddress,\n} from '@layerzerolabs/ui-ton';\nimport {\n  ApproveInput,\n  type BridgeOption,\n  BridgeOptions,\n  BridgeOutput,\n  ClaimInput,\n  GetAllowanceInput,\n  GetDurationInput,\n  GetExtraGasInput,\n  GetLimitInput,\n  GetMessageFeeInput,\n  GetOptionsInput,\n  GetOutputInput,\n  GetUnclaimedInput,\n  IsRegisteredInput,\n  PartialTransferInput,\n  RegisterInput,\n  Seconds,\n  TransferInput,\n} from '@layerzerolabs/ui-bridge-sdk/v1';\nimport {\n  assert,\n  type ChainKey as ChainKeyType,\n  Currency,\n  CurrencyAmount,\n  FeeQuote,\n  Fraction,\n  getMessageDuration,\n  getNativeCurrency,\n  isTonChainKey,\n  isTronChainKey,\n  MaxUint256,\n  MessageFee,\n  Token,\n  Transaction,\n} from '@layerzerolabs/ui-core';\nimport {Cell, OpenedContract, TonClient, Tuple, TupleItemCell} from '@ton/ton';\nimport {Address, beginCell, toNano} from '@ton/core';\nimport {ChainKey} from '@layerzerolabs/lz-definitions';\nimport {AddressConfig, LoadedUlnConfig} from './types';\nimport {\n  buildClass,\n  decodeClass,\n  emptyCell,\n  generateBuildClass,\n  generateDecodeClass,\n} from '@layerzerolabs/lz-ton-sdk-v2';\nimport {tonObjects} from './allObjects';\nimport memoryCache, {CacheClass} from 'memory-cache';\nimport {fromTronAddress} from '../tron';\nimport {replace} from 'lodash-es';\nimport {ulnConfigKey} from './utils';\n\nconst oftBuildClass = generateBuildClass(tonObjects);\nconst oftDecodeClass = generateDecodeClass(tonObjects);\n\nconst tmp = {\n  confirmations: '5',\n  confirmationsNull: false,\n  executor: '0x0',\n  executorNull: true,\n  maxMessageBytes: '42',\n  optionalDVNs: [],\n  optionalDVNsNull: false,\n  requiredDVNs: ['0x51a34d3bbc028705435c9154b79f86181fc44f960ae7d1d3fb4ad5a9de8c351a'],\n  requiredDVNsNull: false,\n  workerQuoteGasLimit: '120000',\n};\n\n// This is the Gas to get to the OApp. This is additional gas required on-top of the FWD_AMOUNT_GAS.\n// Should be pretty trivial though. Should actually be ~0.5 so we get a bit back.\nconst JETTON_TRANSFER_GAS = 0.07;\n\nexport class OftBridgeV3__ton implements OftBridgeApi<TonSigner> {\n  contract: OpenedContract<TonContractWrapper>;\n  oAppAddress: Address;\n  minterContract: OpenedContract<TonBaseMinter>;\n  estimatedGasCost: bigint = 0n;\n\n  // Create a feeCache because getting the fee takes a lot of rpc calls\n  feeCache: CacheClass<string, Promise<FeeQuote>> = new memoryCache.Cache();\n\n  constructor(\n    protected readonly client: TonClient,\n    public readonly config: OftBridgeConfig,\n    protected readonly addressConfig: AddressConfig,\n    protected readonly ulnConfigs: Record<string, LoadedUlnConfig>,\n  ) {\n    this.validateConfig(config);\n\n    this.oAppAddress = parseTonAddress(this.addressConfig.oftProxy);\n\n    // OFT is validated to exist already\n    const wrapper = TonContractWrapper.create(this.oAppAddress);\n    this.contract = this.client.provider(this.oAppAddress).open(wrapper);\n\n    const tonMinterAddress = parseTonAddress(addressConfig.token);\n\n    this.minterContract = this.client.open(UsdtMinter.createFromAddress(tonMinterAddress));\n  }\n\n  protected validateConfig(config: OftBridgeConfig) {\n    assert(config.version === 3, 'OftBridgeConfig version 3 is required');\n    // assert(!!config.deployments.ton, 'OftBridgeConfig must have a ton deployment');\n    // assert(!!config.deployments.ton.token, 'OftBridgeConfig must have a ton oft');\n  }\n\n  approve(input: ApproveInput): Promise<Transaction<TonSigner>> {\n    // Unlimited allowance means we don't need an approval\n    throw new Error('Not Implemented');\n  }\n\n  claim(input: ClaimInput): Promise<Transaction<TonSigner>> {\n    throw new Error('Not Implemented');\n  }\n\n  async getOutput(input: GetOutputInput): Promise<BridgeOutput<OftBridgeFee>> {\n    try {\n      const [amount, fee] = await this.contract.getGetAmountAndFee(input.srcAmount.toBigInt());\n\n      return {\n        dstAmount: CurrencyAmount.fromBigInt(input.dstToken, amount),\n        fee: {\n          bridgeFee: CurrencyAmount.fromBigInt(\n            getNativeCurrency(input.srcAmount.token.chainKey),\n            fee,\n          ),\n        },\n      };\n    } catch (error) {\n      return {\n        dstAmount: input.srcAmount,\n        fee: {\n          bridgeFee: CurrencyAmount.fromBigInt(\n            getNativeCurrency(input.srcAmount.token.chainKey),\n            0n,\n          ),\n        },\n      };\n      // throw error;\n    }\n  }\n\n  register(register: RegisterInput): Promise<Transaction<TonSigner>> {\n    throw new Error('Not Implemented');\n  }\n\n  async createForwardPayload(input: PartialTransferInput<'dstChainKey' | 'dstAddress'>) {\n    const {dstChainKey, dstAddress, fee, dstAmountMin, dstNativeAmount} = input;\n    const nativeFee = fee?.nativeFee.toBigInt() ?? 0;\n\n    let extraOptions = beginCell().endCell();\n    if (dstNativeAmount && dstNativeAmount.greaterThan(0)) {\n      extraOptions = buildClass('md::OptionsV1', {\n        lzReceiveGas: 0n,\n        lzReceiveValue: 0n,\n        nativeDropAddress: BigInt(dstAddress),\n        nativeDropAmount: dstNativeAmount.toBigInt(),\n      });\n    }\n\n    let parsedDstAddress = dstAddress;\n    if (isTronChainKey(dstChainKey)) {\n      parsedDstAddress = '0x' + fromTronAddress(dstAddress);\n    }\n\n    return oftBuildClass('OFTSend', {\n      dstEid: BigInt(this.tryGetDeployment(dstChainKey).eid),\n      to: BigInt(parsedDstAddress),\n      minAmount: dstAmountMin?.toBigInt() ?? toNano(0),\n      nativeFee,\n      zroFee: toNano(0), // Zro is not on TON so this will always be 0\n      extraOptions,\n      composeMessage: beginCell().storeUint(0, 1).endCell(),\n    });\n  }\n\n  async createTransferBody(input: PartialTransferInput<'srcToken'>) {\n    const {dstChainKey, dstAddress, fee, srcAmount, srcAddress, dstAmountMin, dstNativeAmount} =\n      input;\n    assert(dstChainKey, 'dstChainKey');\n    assert(fee, 'fee');\n    assert(dstAddress, 'dstAddress');\n    assert(srcAddress, 'srcAddress');\n    assert(srcAmount, 'srcAmount');\n    assert(dstAmountMin, 'dstAmountMin');\n\n    // The total gas + fees that will be supplied.\n    const value = fee.nativeFee.toBigInt() + this.estimatedGasCost;\n    const forwardPayload = await this.createForwardPayload({\n      dstChainKey,\n      dstAddress,\n      dstAmountMin,\n      fee,\n      dstNativeAmount,\n    });\n\n    const srcWalletAddress = parseTonAddress(srcAddress);\n    return buildTonTransferCell({\n      toAddress: this.oAppAddress, // oApp Address\n      fromAddress: srcWalletAddress,\n      value,\n      fwdAmount: value, // How much to forward from the usdt jetton wallet to the\n      jettonAmount: srcAmount.toBigInt(),\n      forwardPayload,\n    });\n  }\n\n  async transfer(input: Required<TransferInput>): Promise<Transaction<TonSigner>> {\n    const {srcAddress, fee} = input;\n    const srcWalletAddress = parseTonAddress(srcAddress);\n\n    this.estimatedGasCost = await this.getGasAsserts();\n\n    const body = await this.createTransferBody(input);\n\n    const jettonAddress = await getJettonAddressFromWallet(this.minterContract, srcWalletAddress);\n    const amount = fee.nativeFee.toBigInt() + this.estimatedGasCost + toNano(JETTON_TRANSFER_GAS);\n    const transaction = createTransaction(\n      {\n        messages: [\n          {\n            address: jettonAddress,\n            amount: amount.toString(),\n            payload: body,\n          },\n        ],\n      },\n      {\n        client: this.client,\n      },\n    );\n    return transaction;\n  }\n\n  async getGasAsserts() {\n    const oftStorage = await this.client\n      .provider(parseTonAddress(this.addressConfig.oftProxy))\n      .get('getContractStorage', []);\n    const oftCell = oftDecodeClass('UsdtOFT', oftStorage.stack.readCell());\n    const gasAsserts = oftDecodeClass('GasAsserts', oftCell.gasAsserts);\n\n    return gasAsserts.sendOFTGas * 440n; // Add 10% for buffer\n  }\n\n  getAllowance(input: GetAllowanceInput): Promise<CurrencyAmount> {\n    // Ton doesn't need to approve\n    return Promise.resolve(CurrencyAmount.fromRawAmount(input.token, MaxUint256));\n  }\n\n  getDuration(input: GetDurationInput): Promise<Seconds> {\n    const {dstToken, srcToken} = input;\n    const srcEid = this.tryGetDeployment(srcToken.chainKey).eid;\n    const dstEid = this.tryGetDeployment(dstToken.chainKey).eid;\n    const ua = {address: this.addressConfig.oftProxy, eid: srcEid};\n    return getMessageDuration(ua, dstEid);\n  }\n\n  getExtraGas(input: GetExtraGasInput): Promise<number> {\n    return Promise.resolve(0);\n  }\n\n  async getLimit(input: GetLimitInput): Promise<CurrencyAmount> {\n    // Arbitrum, Celo, Eth, Ton, Tron\n    const [arbCreds, celoCreds, ethCreds, tonCreds, tronCreds] =\n      await this.contract.getGetAllCredits();\n    switch (input.dstToken.chainKey) {\n      case ChainKey.ARBITRUM:\n      case ChainKey.ARBITRUM_SEPOLIA:\n        return CurrencyAmount.fromRawAmount(input.srcToken, arbCreds);\n      case ChainKey.CELO:\n        return CurrencyAmount.fromRawAmount(input.srcToken, celoCreds);\n      case ChainKey.ETHEREUM:\n      case ChainKey.SEPOLIA:\n        return CurrencyAmount.fromRawAmount(input.srcToken, ethCreds);\n      case 'ton':\n      case 'ton-testnet':\n        return CurrencyAmount.fromRawAmount(input.srcToken, tonCreds);\n      case ChainKey.TRON_TESTNET:\n      case ChainKey.TRON:\n      case ChainKey.TRONDEV:\n      case ChainKey.TRON_SANDBOX:\n        return CurrencyAmount.fromRawAmount(input.srcToken, tronCreds);\n      default:\n        return CurrencyAmount.fromRawAmount(input.srcToken, 0n);\n    }\n  }\n\n  async getMessageFee(input: GetMessageFeeInput): Promise<FeeQuote> {\n    const {dstAddress} = input;\n    if (!dstAddress) {\n      return MessageFee.from(input.srcToken.chainKey, {\n        nativeFee: 0n,\n        zroFee: 0n,\n      });\n    }\n    const body = await this.createTransferBody({\n      ...input,\n      fee: MessageFee.from(input.srcToken.chainKey, {\n        nativeFee: 0n,\n        zroFee: 0n,\n      }),\n    });\n\n    // Getting\n    const feeCacheKey = `${input.srcChainKey}-${input.dstChainKey}-${input.dstNativeAmount?.toBigInt() ?? 0}`;\n    let promise = this.feeCache.get(feeCacheKey);\n    if (!promise) {\n      // Probably could do a lock here, but might be overkill\n      promise = this.getLzMessageFee(input);\n      await this.feeCache.put(feeCacheKey, promise, 1000 * 10);\n    }\n    return await promise;\n  }\n\n  async getLzMessageFee(input: GetMessageFeeInput): Promise<FeeQuote> {\n    const {dstToken, srcToken, dstAddress, dstNativeAmount} = input;\n    const dstChainKey = dstToken.chainKey;\n    const dstDeployment = this.tryGetDeployment(dstToken.chainKey);\n    const ulnAddress = bigIntToAddress(\n      computeTonUlnAddress(BigInt(this.addressConfig.ulnManager), BigInt(dstDeployment.eid)),\n    );\n\n    const endpointAddress = bigIntToAddress(\n      computeTonEndpointAddress(BigInt(this.addressConfig.controller), BigInt(dstDeployment.eid)),\n    );\n\n    const channelAddress = bigIntToAddress(\n      computeTonChannelAddress(\n        BigInt(this.addressConfig.oftProxy),\n        BigInt(dstDeployment.eid),\n        BigInt(dstDeployment.oftProxy?.address ?? ''),\n        BigInt(this.addressConfig.controller),\n        addressToBigInt(endpointAddress),\n      ),\n    );\n\n    const lzSend = decodeClass(\n      'md::LzSend',\n      await this.contract.getLzSendMd(\n        await this.createForwardPayload({\n          dstChainKey: dstChainKey ?? '',\n          dstAddress: dstAddress ?? '',\n          dstNativeAmount,\n        }),\n      ),\n    );\n\n    const mdUlnSend = buildClass('md::UlnSend', {\n      lzSend,\n      customUlnSendConfig:\n        this.ulnConfigs[ulnConfigKey('USDT', 'TON', dstChainKey)] ??\n        (await this.getUlnConfig(dstDeployment)),\n      connectionInitialStorage: beginCell().endCell(),\n      forwardingAddress: channelAddress,\n    });\n\n    try {\n      const quoteStack = (\n        await this.client.provider(ulnAddress).get('ulnQuote', [\n          {\n            type: 'cell',\n            cell: mdUlnSend,\n          },\n        ])\n      ).stack;\n\n      // For some reason these aren't actually tuples. It doesn't pop a tuple item, it is just an array. Actually an\n      // array of Cells or bigints, but we only want to grab the Cell item, so just type it like this for now\n      const parsedArray = quoteStack.readTuple().skip(1).pop() as unknown as Array<Cell>;\n      const parsedQuoteCell = decodeClass('md::MsglibSendCallback', parsedArray[3]);\n      const srcNativeToken = getNativeCurrency(srcToken.chainKey);\n      const tenPercentMult = new Fraction(13, 10);\n      return {\n        // add 10% as a buffer. If it's not used it will just be returned to the user\n        nativeFee: CurrencyAmount.fromBigInt(srcNativeToken, parsedQuoteCell.nativeFee).multiply(\n          tenPercentMult,\n        ),\n        // This should always be 0 as ZRO isn't on Ton\n        zroFee: CurrencyAmount.fromBigInt(srcNativeToken, parsedQuoteCell.zroFee).multiply(\n          tenPercentMult,\n        ),\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async getUlnConfig(dstDeployment: OftBridgeDeployment) {\n    const ulnAddress = bigIntToAddress(\n      computeTonUlnAddress(BigInt(this.addressConfig.ulnManager), BigInt(dstDeployment.eid)),\n    );\n\n    const ulnConnectionAddress = bigIntToAddress(\n      computeTonUlnConnectionAddress(\n        // oftProxy is the ton oApp address\n        BigInt(this.addressConfig.oftProxy),\n        BigInt(dstDeployment.eid),\n        BigInt(dstDeployment.oftProxy?.address ?? ''),\n        BigInt(this.addressConfig.ulnManager),\n        addressToBigInt(ulnAddress),\n      ),\n    );\n\n    const ulnConnectionStorageResult = await this.client\n      .provider(ulnConnectionAddress)\n      .get('getContractStorage', []);\n\n    const ulnConnectionStorage = decodeClass(\n      'UlnConnection',\n      ulnConnectionStorageResult.stack.readCell(),\n    );\n\n    return ulnConnectionStorage.UlnSendConfigOApp;\n  }\n\n  async getOptions(input: GetOptionsInput): Promise<BridgeOptions> {\n    const taxiOption: BridgeOption = {\n      mode: 'taxi',\n    };\n    return {options: [taxiOption]};\n  }\n\n  getUnclaimed(input: GetUnclaimedInput): Promise<CurrencyAmount> {\n    return Promise.resolve(CurrencyAmount.fromRawAmount(input.token, 0));\n  }\n\n  isRegistered(input: IsRegisteredInput): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  supportsClaim(currency: Currency): boolean {\n    return false;\n  }\n\n  supportsRegister(currency: Currency): boolean {\n    return false;\n  }\n\n  protected tryGetDeployment(chainKey: ChainKeyType) {\n    return this.config.deployments[chainKey];\n  }\n\n  supportsTransfer(srcToken: Currency, dstToken: Currency): boolean {\n    const srcDstChains = this.tryGetDeployment(srcToken.chainKey)?.destinationChains;\n    if (srcDstChains) {\n      if (!srcDstChains.includes(dstToken.chainKey)) {\n        return false;\n      }\n    }\n    return Boolean(\n      isTonChainKey(srcToken.chainKey) &&\n        this.tryGetDeployment(srcToken.chainKey)?.token.equals(srcToken) &&\n        this.tryGetDeployment(dstToken.chainKey)?.token.equals(dstToken),\n    );\n  }\n}\n","export const tonObjects = {\n  OApp: {\n    name: 'oAppStore',\n    0: {\n      fieldName: 'OApp::owner',\n      fieldType: 'cl::t::address',\n    },\n    1: {\n      fieldName: 'OApp::tentativeOwner',\n      fieldType: 'cl::t::address',\n    },\n    2: {\n      fieldName: 'OApp::authenticated',\n      fieldType: 'cl::t::bool',\n    },\n    3: {\n      fieldName: 'OApp::initialized',\n      fieldType: 'cl::t::bool',\n    },\n    4: {\n      fieldName: 'OApp::controllerAddress',\n      fieldType: 'cl::t::address',\n    },\n    5: {\n      fieldName: 'OApp::eid',\n      fieldType: 'cl::t::uint32',\n    },\n    6: {\n      fieldName: 'OApp::maxReceivedNonce',\n      fieldType: 'cl::t::dict256',\n    },\n    7: {\n      fieldName: 'OApp::peers',\n      fieldType: 'cl::t::dict256',\n    },\n    8: {\n      fieldName: 'OApp::enforcedOptions',\n      fieldType: 'cl::t::dict256',\n    },\n    9: {\n      fieldName: 'OApp::endpointCode',\n      fieldType: 'cl::t::cellRef',\n    },\n    10: {\n      fieldName: 'OApp::channelCode',\n      fieldType: 'cl::t::cellRef',\n    },\n    11: {\n      fieldName: 'OApp::endpointInitStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    12: {\n      fieldName: 'OApp::lzReceiveExecuteCallbackGas',\n      fieldType: 'cl::t::uint32',\n    },\n  },\n  UsdtOFT: {\n    name: 'usdtOFT',\n    0: {\n      fieldName: 'UsdtOFT::oAppStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'UsdtOFT::creditsArbitrum',\n      fieldType: 'cl::t::coins',\n    },\n    2: {\n      fieldName: 'UsdtOFT::creditsCelo',\n      fieldType: 'cl::t::coins',\n    },\n    3: {\n      fieldName: 'UsdtOFT::creditsEth',\n      fieldType: 'cl::t::coins',\n    },\n    4: {\n      fieldName: 'UsdtOFT::creditsTon',\n      fieldType: 'cl::t::coins',\n    },\n    5: {\n      fieldName: 'UsdtOFT::creditsTron',\n      fieldType: 'cl::t::coins',\n    },\n    6: {\n      fieldName: 'UsdtOFT::contractBalance',\n      fieldType: 'cl::t::coins',\n    },\n    7: {\n      fieldName: 'UsdtOFT::feeBalance',\n      fieldType: 'cl::t::coins',\n    },\n    8: {\n      fieldName: 'UsdtOFT::feeBps',\n      fieldType: 'cl::t::uint16',\n    },\n    9: {\n      fieldName: 'UsdtOFT::contractWalletAddress',\n      fieldType: 'cl::t::address',\n    },\n    10: {\n      fieldName: 'UsdtOFT::plannerAddress',\n      fieldType: 'cl::t::address',\n    },\n    11: {\n      fieldName: 'UsdtOFT::gasAsserts',\n      fieldType: 'cl::t::objRef',\n    },\n    12: {\n      fieldName: 'UsdtOFT::costAsserts',\n      fieldType: 'cl::t::objRef',\n    },\n    13: {\n      fieldName: 'UsdtOFT::recoverRequest',\n      fieldType: 'cl::t::objRef',\n    },\n    14: {\n      fieldName: 'UsdtOFT::lpAdminAddress',\n      fieldType: 'cl::t::address',\n    },\n  },\n  'lz::Config': {\n    name: 'Config',\n    0: {\n      fieldName: 'lz::Config::path',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'lz::Config::forwardingAddress',\n      fieldType: 'cl::t::address',\n    },\n    2: {\n      fieldName: 'lz::Config::opCode',\n      fieldType: 'cl::t::uint32',\n    },\n    3: {\n      fieldName: 'lz::Config::config',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  'lz::EpConfig::NewWithConnection': {\n    name: 'EpConfig',\n    0: {\n      fieldName: 'lz::EpConfig::NewWithConnection::isNull',\n      fieldType: 'cl::t::bool',\n    },\n    1: {\n      fieldName: 'lz::EpConfig::NewWithConnection::sendMsglibManager',\n      fieldType: 'cl::t::address',\n    },\n    2: {\n      fieldName: 'lz::EpConfig::NewWithConnection::sendMsglib',\n      fieldType: 'cl::t::address',\n    },\n    3: {\n      fieldName: 'lz::EpConfig::NewWithConnection::sendMsglibConnection',\n      fieldType: 'cl::t::address',\n    },\n    4: {\n      fieldName: 'lz::EpConfig::NewWithConnection::receiveMsglib',\n      fieldType: 'cl::t::address',\n    },\n    5: {\n      fieldName: 'lz::EpConfig::NewWithConnection::receiveMsglibConnection',\n      fieldType: 'cl::t::address',\n    },\n    6: {\n      fieldName: 'lz::EpConfig::NewWithConnection::timeoutReceiveMsglib',\n      fieldType: 'cl::t::address',\n    },\n    7: {\n      fieldName: 'lz::EpConfig::NewWithConnection::timeoutReceiveMsglibConnection',\n      fieldType: 'cl::t::address',\n    },\n    8: {\n      fieldName: 'lz::EpConfig::NewWithConnection::timeoutReceiveMsglibExpiry',\n      fieldType: 'cl::t::uint64',\n    },\n  },\n  'lz::EpConfig': {\n    name: 'EpConfig',\n  },\n  'lz::EpConfig::NewWithDefaults': {\n    name: 'EpConfig',\n  },\n  'lz::MsglibInfo': {\n    name: 'MsglibInfo',\n    0: {\n      fieldName: 'lz::MsglibInfo::msglibAddress',\n      fieldType: 'cl::t::address',\n    },\n    1: {\n      fieldName: 'lz::MsglibInfo::msglibConnectionCode',\n      fieldType: 'cl::t::cellRef',\n    },\n    2: {\n      fieldName: 'lz::MsglibInfo::msglibConnectionInitStorage',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  'lz::Packet': {\n    name: 'Packet',\n    0: {\n      fieldName: 'lz::Packet::path',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'lz::Packet::message',\n      fieldType: 'cl::t::cellRef',\n    },\n    2: {\n      fieldName: 'lz::Packet::nonce',\n      fieldType: 'cl::t::uint64',\n    },\n    3: {\n      fieldName: 'lz::Packet::guid',\n      fieldType: 'cl::t::uint256',\n    },\n  },\n  'lz::Path': {\n    name: 'path',\n    0: {\n      fieldName: 'lz::Path::srcEid',\n      fieldType: 'cl::t::uint32',\n    },\n    1: {\n      fieldName: 'lz::Path::srcOApp',\n      fieldType: 'cl::t::address',\n    },\n    2: {\n      fieldName: 'lz::Path::dstEid',\n      fieldType: 'cl::t::uint32',\n    },\n    3: {\n      fieldName: 'lz::Path::dstOApp',\n      fieldType: 'cl::t::address',\n    },\n  },\n  'lz::ReceiveEpConfig': {\n    name: 'RcvEpCfg',\n    0: {\n      fieldName: 'lz::ReceiveEpConfig::receiveMsglibConnection',\n      fieldType: 'cl::t::address',\n    },\n    1: {\n      fieldName: 'lz::ReceiveEpConfig::timeoutReceiveMsglibConnection',\n      fieldType: 'cl::t::address',\n    },\n    2: {\n      fieldName: 'lz::ReceiveEpConfig::expiry',\n      fieldType: 'cl::t::uint64',\n    },\n  },\n  'lz::SendEpConfig': {\n    name: 'SendEpCfg',\n    0: {\n      fieldName: 'lz::SendEpConfig::sendMsglibManager',\n      fieldType: 'cl::t::address',\n    },\n    1: {\n      fieldName: 'lz::SendEpConfig::sendMsglib',\n      fieldType: 'cl::t::address',\n    },\n    2: {\n      fieldName: 'lz::SendEpConfig::sendMsglibConnection',\n      fieldType: 'cl::t::address',\n    },\n  },\n  'lz::SmlJobAssigned': {\n    name: 'SmlJobAssg',\n    0: {\n      fieldName: 'lz::SmlJobAssigned::executorAddress',\n      fieldType: 'cl::t::address',\n    },\n    1: {\n      fieldName: 'lz::SmlJobAssigned::fee',\n      fieldType: 'cl::t::coins',\n    },\n  },\n  'lz::Worker': {\n    name: 'Worker',\n    0: {\n      fieldName: 'lz::Worker::owner',\n      fieldType: 'cl::t::address',\n    },\n    1: {\n      fieldName: 'lz::Worker::viewAllowlist',\n      fieldType: 'cl::t::dict256',\n    },\n    2: {\n      fieldName: 'lz::Worker::viewDependencies',\n      fieldType: 'cl::t::dict256',\n    },\n    3: {\n      fieldName: 'lz::Worker::bytecodeLibrary',\n      fieldType: 'cl::t::cellRef',\n    },\n    4: {\n      fieldName: 'lz::Worker::storage',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  'md::AddMsglib': {\n    name: 'addMsgLib',\n    0: {\n      fieldName: 'md::AddMsglib::msglibManagerAddress',\n      fieldType: 'cl::t::address',\n    },\n    1: {\n      fieldName: 'md::AddMsglib::dstEid',\n      fieldType: 'cl::t::uint32',\n    },\n  },\n  'md::Bool': {\n    name: 'Bool',\n    0: {\n      fieldName: 'md::Bool::bool',\n      fieldType: 'cl::t::bool',\n    },\n  },\n  'md::ChannelNonceInfo': {\n    name: 'cNonceInfo',\n    0: {\n      fieldName: 'md::ChannelNonceInfo::nonce',\n      fieldType: 'cl::t::uint64',\n    },\n    1: {\n      fieldName: 'md::ChannelNonceInfo::firstUnexecutedNonce',\n      fieldType: 'cl::t::uint64',\n    },\n  },\n  'md::CoinsAmount': {\n    name: 'coinsAmt',\n    0: {\n      fieldName: 'md::CoinsAmount::amount',\n      fieldType: 'cl::t::coins',\n    },\n  },\n  'md::CounterIncrement': {\n    name: 'countIncr',\n    0: {\n      fieldName: 'md::CounterIncrement::dstEid',\n      fieldType: 'cl::t::uint32',\n    },\n    1: {\n      fieldName: 'md::CounterIncrement::incrementType',\n      fieldType: 'cl::t::uint8',\n    },\n    2: {\n      fieldName: 'md::CounterIncrement::extraOptions',\n      fieldType: 'cl::t::objRef',\n    },\n    3: {\n      fieldName: 'md::CounterIncrement::nativeFee',\n      fieldType: 'cl::t::coins',\n    },\n    4: {\n      fieldName: 'md::CounterIncrement::zroFee',\n      fieldType: 'cl::t::coins',\n    },\n  },\n  'md::Deploy': {\n    name: 'deploy',\n    0: {\n      fieldName: 'md::Deploy::initialDeposit',\n      fieldType: 'cl::t::coins',\n    },\n    1: {\n      fieldName: 'md::Deploy::dstEid',\n      fieldType: 'cl::t::uint32',\n    },\n    2: {\n      fieldName: 'md::Deploy::dstOApp',\n      fieldType: 'cl::t::uint256',\n    },\n    3: {\n      fieldName: 'md::Deploy::extraInfo',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  'md::Deploy::NewWithExtraInfo': {\n    name: 'deploy',\n  },\n  'md::ExtendedMd': {\n    name: 'extendedMd',\n    0: {\n      fieldName: 'md::ExtendedMd::md',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'md::ExtendedMd::obj',\n      fieldType: 'cl::t::objRef',\n    },\n    2: {\n      fieldName: 'md::ExtendedMd::forwardingAddress',\n      fieldType: 'cl::t::address',\n    },\n  },\n  'md::getMsglibInfoCallback': {\n    name: 'getMsgLbCb',\n    0: {\n      fieldName: 'md::getMsglibInfoCallback::msglibAddress',\n      fieldType: 'cl::t::address',\n    },\n    1: {\n      fieldName: 'md::getMsglibInfoCallback::connectionCode',\n      fieldType: 'cl::t::cellRef',\n    },\n  },\n  'md::InitEndpoint': {\n    name: 'initEp',\n    0: {\n      fieldName: 'md::InitEndpoint::channelCode',\n      fieldType: 'cl::t::cellRef',\n    },\n  },\n  'md::InitSmlConnection': {\n    name: 'initSmlCon',\n    0: {\n      fieldName: 'md::InitSmlConnection::channelAddress',\n      fieldType: 'cl::t::address',\n    },\n  },\n  'md::LzReceivePrepare': {\n    name: 'lzrecvprep',\n    0: {\n      fieldName: 'md::LzReceivePrepare::nonce',\n      fieldType: 'cl::t::uint64',\n    },\n    1: {\n      fieldName: 'md::LzReceivePrepare::nanotons',\n      fieldType: 'cl::t::coins',\n    },\n  },\n  'md::LzReceiveStatus': {\n    name: 'LzRecvSts',\n    0: {\n      fieldName: 'md::LzReceiveStatus::success',\n      fieldType: 'cl::t::bool',\n    },\n    1: {\n      fieldName: 'md::LzReceiveStatus::nonce',\n      fieldType: 'cl::t::uint64',\n    },\n    2: {\n      fieldName: 'md::LzReceiveStatus::value',\n      fieldType: 'cl::t::coins',\n    },\n    3: {\n      fieldName: 'md::LzReceiveStatus::extraData',\n      fieldType: 'cl::t::cellRef',\n    },\n    4: {\n      fieldName: 'md::LzReceiveStatus::reason',\n      fieldType: 'cl::t::cellRef',\n    },\n    5: {\n      fieldName: 'md::LzReceiveStatus::sender',\n      fieldType: 'cl::t::address',\n    },\n    6: {\n      fieldName: 'md::LzReceiveStatus::packet',\n      fieldType: 'cl::t::objRef',\n    },\n    7: {\n      fieldName: 'md::LzReceiveStatus::executionStatus',\n      fieldType: 'cl::t::uint8',\n    },\n  },\n  'md::LzReceiveStatus::NewFull': {\n    name: 'LzRecvSts',\n    0: {\n      fieldName: 'md::LzReceiveStatus::NewFull::success',\n      fieldType: 'cl::t::bool',\n    },\n    1: {\n      fieldName: 'md::LzReceiveStatus::NewFull::nonce',\n      fieldType: 'cl::t::uint64',\n    },\n    2: {\n      fieldName: 'md::LzReceiveStatus::NewFull::value',\n      fieldType: 'cl::t::coins',\n    },\n    3: {\n      fieldName: 'md::LzReceiveStatus::NewFull::extraData',\n      fieldType: 'cl::t::cellRef',\n    },\n    4: {\n      fieldName: 'md::LzReceiveStatus::NewFull::reason',\n      fieldType: 'cl::t::cellRef',\n    },\n    5: {\n      fieldName: 'md::LzReceiveStatus::NewFull::sender',\n      fieldType: 'cl::t::address',\n    },\n    6: {\n      fieldName: 'md::LzReceiveStatus::NewFull::packet',\n      fieldType: 'cl::t::objRef',\n    },\n    7: {\n      fieldName: 'md::LzReceiveStatus::NewFull::executionStatus',\n      fieldType: 'cl::t::uint8',\n    },\n  },\n  'md::LzSend': {\n    name: 'lzSend',\n    0: {\n      fieldName: 'md::LzSend::sendRequestId',\n      fieldType: 'cl::t::uint64',\n    },\n    1: {\n      fieldName: 'md::LzSend::sendMsglibManager',\n      fieldType: 'cl::t::address',\n    },\n    2: {\n      fieldName: 'md::LzSend::sendMsglib',\n      fieldType: 'cl::t::address',\n    },\n    3: {\n      fieldName: 'md::LzSend::sendMsglibConnection',\n      fieldType: 'cl::t::address',\n    },\n    4: {\n      fieldName: 'md::LzSend::packet',\n      fieldType: 'cl::t::objRef',\n    },\n    5: {\n      fieldName: 'md::LzSend::nativeFee',\n      fieldType: 'cl::t::coins',\n    },\n    6: {\n      fieldName: 'md::LzSend::zroFee',\n      fieldType: 'cl::t::coins',\n    },\n    7: {\n      fieldName: 'md::LzSend::extraOptions',\n      fieldType: 'cl::t::objRef',\n    },\n    8: {\n      fieldName: 'md::LzSend::enforcedOptions',\n      fieldType: 'cl::t::objRef',\n    },\n    9: {\n      fieldName: 'md::LzSend::callbackData',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  'md::MdAddress': {\n    name: 'MdAddr',\n    0: {\n      fieldName: 'md::MdAddress::md',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'md::MdAddress::address',\n      fieldType: 'cl::t::address',\n    },\n  },\n  'md::MdEid': {\n    name: 'MdEid',\n    0: {\n      fieldName: 'md::MdEid::md',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'md::MdEid::eid',\n      fieldType: 'cl::t::uint32',\n    },\n  },\n  'md::MdObj': {\n    name: 'MdObj',\n    0: {\n      fieldName: 'md::MdObj::md',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'md::MdObj::obj',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  'md::MessagingReceipt': {\n    name: 'MsgReceipt',\n    0: {\n      fieldName: 'md::MessagingReceipt::lzSend',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'md::MessagingReceipt::nativeFeeActual',\n      fieldType: 'cl::t::coins',\n    },\n    2: {\n      fieldName: 'md::MessagingReceipt::zroFeeActual',\n      fieldType: 'cl::t::coins',\n    },\n    3: {\n      fieldName: 'md::MessagingReceipt::errorCode',\n      fieldType: 'cl::t::uint16',\n    },\n  },\n  'md::MsglibSendCallback': {\n    name: 'libSndCb',\n    0: {\n      fieldName: 'md::MsglibSendCallback::nativeFee',\n      fieldType: 'cl::t::coins',\n    },\n    1: {\n      fieldName: 'md::MsglibSendCallback::zroFee',\n      fieldType: 'cl::t::coins',\n    },\n    2: {\n      fieldName: 'md::MsglibSendCallback::lzSend',\n      fieldType: 'cl::t::objRef',\n    },\n    3: {\n      fieldName: 'md::MsglibSendCallback::packetEncoded',\n      fieldType: 'cl::t::cellRef',\n    },\n    4: {\n      fieldName: 'md::MsglibSendCallback::payees',\n      fieldType: 'cl::t::cellRef',\n    },\n    5: {\n      fieldName: 'md::MsglibSendCallback::nonceByteOffset',\n      fieldType: 'cl::t::uint16',\n    },\n    6: {\n      fieldName: 'md::MsglibSendCallback::nonceBytes',\n      fieldType: 'cl::t::uint8',\n    },\n    7: {\n      fieldName: 'md::MsglibSendCallback::guidByteOffset',\n      fieldType: 'cl::t::uint16',\n    },\n    8: {\n      fieldName: 'md::MsglibSendCallback::guidBytes',\n      fieldType: 'cl::t::uint8',\n    },\n    9: {\n      fieldName: 'md::MsglibSendCallback::msglibSendEvents',\n      fieldType: 'cl::t::objRef',\n    },\n    10: {\n      fieldName: 'md::MsglibSendCallback::errorCode',\n      fieldType: 'cl::t::uint8',\n    },\n  },\n  'md::Nonce': {\n    name: 'nonce',\n    0: {\n      fieldName: 'md::Nonce::nonce',\n      fieldType: 'cl::t::uint64',\n    },\n  },\n  'md::OptionsExtended': {\n    name: 'OptionsExt',\n    0: {\n      fieldName: 'md::OptionsExtended::eid',\n      fieldType: 'cl::t::uint32',\n    },\n    1: {\n      fieldName: 'md::OptionsExtended::msgType',\n      fieldType: 'cl::t::uint32',\n    },\n    2: {\n      fieldName: 'md::OptionsExtended::options',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  'md::OptionsV1': {\n    name: 'OptionsV1',\n    0: {\n      fieldName: 'md::OptionsV1::lzReceiveGas',\n      fieldType: 'cl::t::uint256',\n    },\n    1: {\n      fieldName: 'md::OptionsV1::lzReceiveValue',\n      fieldType: 'cl::t::uint256',\n    },\n    2: {\n      fieldName: 'md::OptionsV1::nativeDropAddress',\n      fieldType: 'cl::t::address',\n    },\n    3: {\n      fieldName: 'md::OptionsV1::nativeDropAmount',\n      fieldType: 'cl::t::uint256',\n    },\n  },\n  'md::OptionsV2': {\n    name: 'OptionsV2',\n    0: {\n      fieldName: 'md::OptionsV2::lzReceiveGas',\n      fieldType: 'cl::t::uint256',\n    },\n    1: {\n      fieldName: 'md::OptionsV2::lzReceiveValue',\n      fieldType: 'cl::t::uint256',\n    },\n    2: {\n      fieldName: 'md::OptionsV2::lzComposeGas',\n      fieldType: 'cl::t::uint256',\n    },\n    3: {\n      fieldName: 'md::OptionsV2::lzComposeValue',\n      fieldType: 'cl::t::uint256',\n    },\n    4: {\n      fieldName: 'md::OptionsV2::nativeDropAddress',\n      fieldType: 'cl::t::address',\n    },\n    5: {\n      fieldName: 'md::OptionsV2::nativeDropAmount',\n      fieldType: 'cl::t::uint256',\n    },\n  },\n  'md::PacketId': {\n    name: 'pktId',\n    0: {\n      fieldName: 'md::PacketId::path',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'md::PacketId::nonce',\n      fieldType: 'cl::t::uint64',\n    },\n  },\n  'md::PacketSent': {\n    name: 'pktSent',\n    0: {\n      fieldName: 'md::PacketSent::nativeFee',\n      fieldType: 'cl::t::coins',\n    },\n    1: {\n      fieldName: 'md::PacketSent::zroFee',\n      fieldType: 'cl::t::coins',\n    },\n    2: {\n      fieldName: 'md::PacketSent::extraOptions',\n      fieldType: 'cl::t::objRef',\n    },\n    3: {\n      fieldName: 'md::PacketSent::enforcedOptions',\n      fieldType: 'cl::t::objRef',\n    },\n    4: {\n      fieldName: 'md::PacketSent::packetEncoded',\n      fieldType: 'cl::t::cellRef',\n    },\n    5: {\n      fieldName: 'md::PacketSent::nonce',\n      fieldType: 'cl::t::uint64',\n    },\n    6: {\n      fieldName: 'md::PacketSent::msglibAddress',\n      fieldType: 'cl::t::address',\n    },\n    7: {\n      fieldName: 'md::PacketSent::msglibSendEvents',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  'md::SetAddress': {\n    name: 'setAddress',\n    0: {\n      fieldName: 'md::SetAddress::address',\n      fieldType: 'cl::t::address',\n    },\n  },\n  'md::SetEpConfig': {\n    name: 'SetEpCfg',\n    0: {\n      fieldName: 'md::SetEpConfig::useDefaults',\n      fieldType: 'cl::t::bool',\n    },\n    1: {\n      fieldName: 'md::SetEpConfig::sendMsglibManager',\n      fieldType: 'cl::t::address',\n    },\n    2: {\n      fieldName: 'md::SetEpConfig::receiveMsglibManager',\n      fieldType: 'cl::t::address',\n    },\n    3: {\n      fieldName: 'md::SetEpConfig::timeoutReceiveMsglibManager',\n      fieldType: 'cl::t::address',\n    },\n    4: {\n      fieldName: 'md::SetEpConfig::timeoutReceiveMsglibExpiry',\n      fieldType: 'cl::t::uint64',\n    },\n  },\n  'md::SetPeer': {\n    name: 'setPeer',\n    0: {\n      fieldName: 'md::SetPeer::eid',\n      fieldType: 'cl::t::uint32',\n    },\n    1: {\n      fieldName: 'md::SetPeer::peer',\n      fieldType: 'cl::t::uint256',\n    },\n  },\n  'md::SetSmlManagerConfig': {\n    name: 'setSmlCfg',\n    0: {\n      fieldName: 'md::SetSmlManagerConfig::nativeFee',\n      fieldType: 'cl::t::coins',\n    },\n    1: {\n      fieldName: 'md::SetSmlManagerConfig::zroFee',\n      fieldType: 'cl::t::coins',\n    },\n  },\n  'action::event': {\n    name: 'event',\n    0: {\n      fieldName: 'action::event::topic',\n      fieldType: 'cl::t::uint256',\n    },\n    1: {\n      fieldName: 'action::event::body',\n      fieldType: 'cl::t::objRef',\n    },\n    2: {\n      fieldName: 'action::event::initialStorage',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  POOO: {\n    name: 'POOO',\n    0: {\n      fieldName: 'POOO::nextEmpty',\n      fieldType: 'cl::t::uint64',\n    },\n    1: {\n      fieldName: 'POOO::bitmap',\n      fieldType: 'cl::t::cellRef',\n    },\n  },\n  Channel: {\n    name: 'channel',\n    0: {\n      fieldName: 'Channel::baseStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'Channel::path',\n      fieldType: 'cl::t::objRef',\n    },\n    2: {\n      fieldName: 'Channel::endpointAddress',\n      fieldType: 'cl::t::address',\n    },\n    3: {\n      fieldName: 'Channel::epConfigOApp',\n      fieldType: 'cl::t::objRef',\n    },\n    4: {\n      fieldName: 'Channel::outboundNonce',\n      fieldType: 'cl::t::uint64',\n    },\n    5: {\n      fieldName: 'Channel::sendRequestQueue',\n      fieldType: 'cl::t::objRef',\n    },\n    6: {\n      fieldName: 'Channel::lastSendRequestId',\n      fieldType: 'cl::t::uint64',\n    },\n    7: {\n      fieldName: 'Channel::commitPOOO',\n      fieldType: 'cl::t::objRef',\n    },\n    8: {\n      fieldName: 'Channel::executePOOO',\n      fieldType: 'cl::t::objRef',\n    },\n    9: {\n      fieldName: 'Channel::executionQueue',\n      fieldType: 'cl::t::cellRef',\n    },\n    10: {\n      fieldName: 'Channel::zroBalance',\n      fieldType: 'cl::t::coins',\n    },\n  },\n  Controller: {\n    name: 'controller',\n    0: {\n      fieldName: 'Controller::baseStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'Controller::eid',\n      fieldType: 'cl::t::uint32',\n    },\n    2: {\n      fieldName: 'Controller::endpointCode',\n      fieldType: 'cl::t::cellRef',\n    },\n    3: {\n      fieldName: 'Controller::channelCode',\n      fieldType: 'cl::t::cellRef',\n    },\n    4: {\n      fieldName: 'Controller::zroWallet',\n      fieldType: 'cl::t::address',\n    },\n    5: {\n      fieldName: 'Controller::tentativeOwner',\n      fieldType: 'cl::t::address',\n    },\n  },\n  BaseStorage: {\n    name: 'baseStore',\n    0: {\n      fieldName: 'BaseStorage::owner',\n      fieldType: 'cl::t::address',\n    },\n    1: {\n      fieldName: 'BaseStorage::authenticated',\n      fieldType: 'cl::t::bool',\n    },\n    2: {\n      fieldName: 'BaseStorage::initialized',\n      fieldType: 'cl::t::bool',\n    },\n    3: {\n      fieldName: 'BaseStorage::initialStorage',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  Endpoint: {\n    name: 'endpoint',\n    0: {\n      fieldName: 'Endpoint::baseStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'Endpoint::eid',\n      fieldType: 'cl::t::uint32',\n    },\n    2: {\n      fieldName: 'Endpoint::dstEid',\n      fieldType: 'cl::t::uint32',\n    },\n    3: {\n      fieldName: 'Endpoint::msglibs',\n      fieldType: 'cl::t::dict256',\n    },\n    4: {\n      fieldName: 'Endpoint::numMsglibs',\n      fieldType: 'cl::t::uint8',\n    },\n    5: {\n      fieldName: 'Endpoint::channelCode',\n      fieldType: 'cl::t::cellRef',\n    },\n    6: {\n      fieldName: 'Endpoint::channelStorageInit',\n      fieldType: 'cl::t::objRef',\n    },\n    7: {\n      fieldName: 'Endpoint::defaultSendMsglibManager',\n      fieldType: 'cl::t::address',\n    },\n    8: {\n      fieldName: 'Endpoint::defaultSendLibInfo',\n      fieldType: 'cl::t::objRef',\n    },\n    9: {\n      fieldName: 'Endpoint::defaultReceiveLibInfo',\n      fieldType: 'cl::t::objRef',\n    },\n    10: {\n      fieldName: 'Endpoint::defaultTimeoutReceiveLibInfo',\n      fieldType: 'cl::t::objRef',\n    },\n    11: {\n      fieldName: 'Endpoint::defaultExpiry',\n      fieldType: 'cl::t::uint64',\n    },\n  },\n  SmlConnection: {\n    name: 'smlConn',\n    0: {\n      fieldName: 'SmlConnection::baseStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'SmlConnection::path',\n      fieldType: 'cl::t::objRef',\n    },\n    2: {\n      fieldName: 'SmlConnection::channelAddress',\n      fieldType: 'cl::t::address',\n    },\n  },\n  SmlManager: {\n    name: 'smlMgr',\n    0: {\n      fieldName: 'SmlManager::baseStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'SmlManager::eid',\n      fieldType: 'cl::t::uint32',\n    },\n    2: {\n      fieldName: 'SmlManager::verison',\n      fieldType: 'cl::t::uint8',\n    },\n    3: {\n      fieldName: 'SmlManager::nativeFee',\n      fieldType: 'cl::t::coins',\n    },\n    4: {\n      fieldName: 'SmlManager::zroFee',\n      fieldType: 'cl::t::coins',\n    },\n    5: {\n      fieldName: 'SmlManager::packets',\n      fieldType: 'cl::t::dict256',\n    },\n    6: {\n      fieldName: 'SmlManager::controllerAddress',\n      fieldType: 'cl::t::address',\n    },\n    7: {\n      fieldName: 'SmlManager::endpointCode',\n      fieldType: 'cl::t::cellRef',\n    },\n    8: {\n      fieldName: 'SmlManager::channelCode',\n      fieldType: 'cl::t::cellRef',\n    },\n    9: {\n      fieldName: 'SmlManager::smlConnectionCode',\n      fieldType: 'cl::t::cellRef',\n    },\n  },\n  'lz::Attestation': {\n    name: 'Attest',\n    0: {\n      fieldName: 'lz::Attestation::hash',\n      fieldType: 'cl::t::uint256',\n    },\n    1: {\n      fieldName: 'lz::Attestation::confirmations',\n      fieldType: 'cl::t::uint64',\n    },\n  },\n  DvnFeesPaidEvent: {\n    name: 'DvnFeePaid',\n    0: {\n      fieldName: 'DvnFeesPaidEvent::requiredDVNs',\n      fieldType: 'cl::t::addressList',\n    },\n    1: {\n      fieldName: 'DvnFeesPaidEvent::optionalDVNs',\n      fieldType: 'cl::t::addressList',\n    },\n    2: {\n      fieldName: 'DvnFeesPaidEvent::serializedPayees',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  ExecutorFeePaidEvent: {\n    name: 'ExcFeePaid',\n    0: {\n      fieldName: 'ExecutorFeePaidEvent::executorAddress',\n      fieldType: 'cl::t::address',\n    },\n    1: {\n      fieldName: 'ExecutorFeePaidEvent::feePaid',\n      fieldType: 'cl::t::coins',\n    },\n  },\n  'md::InitUln': {\n    name: 'initUln',\n    0: {\n      fieldName: 'md::InitUln::connectionCode',\n      fieldType: 'cl::t::cellRef',\n    },\n    1: {\n      fieldName: 'md::InitUln::treasuryFeeBps',\n      fieldType: 'cl::t::uint16',\n    },\n  },\n  'md::InitUlnConnection': {\n    name: 'initUlnCon',\n    0: {\n      fieldName: 'md::InitUlnConnection::ulnSendConfigOApp',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'md::InitUlnConnection::ulnReceiveConfigOApp',\n      fieldType: 'cl::t::objRef',\n    },\n    2: {\n      fieldName: 'md::InitUlnConnection::endpointAddress',\n      fieldType: 'cl::t::address',\n    },\n    3: {\n      fieldName: 'md::InitUlnConnection::channelAddress',\n      fieldType: 'cl::t::address',\n    },\n  },\n  'md::InitUlnConnection::NewOnlyConfig': {\n    name: 'initUlnCon',\n  },\n  'md::InitUlnManager': {\n    name: 'InitUlnMgr',\n    0: {\n      fieldName: 'md::InitUlnManager::endpointCode',\n      fieldType: 'cl::t::cellRef',\n    },\n    1: {\n      fieldName: 'md::InitUlnManager::channelCode',\n      fieldType: 'cl::t::cellRef',\n    },\n  },\n  'md::RentRefill': {\n    name: 'RentRefill',\n    0: {\n      fieldName: 'md::RentRefill::address',\n      fieldType: 'cl::t::address',\n    },\n    1: {\n      fieldName: 'md::RentRefill::amount',\n      fieldType: 'cl::t::coins',\n    },\n  },\n  'md::SetAdminWorkerAddresses': {\n    name: 'adminwork',\n    0: {\n      fieldName: 'md::SetAdminWorkerAddresses::adminWorkers',\n      fieldType: 'cl::t::addressList',\n    },\n  },\n  'md::TreasuryFeeBps': {\n    name: 'tfeebps',\n    0: {\n      fieldName: 'md::TreasuryFeeBps::treasuryFeeBps',\n      fieldType: 'cl::t::uint16',\n    },\n  },\n  UlnEvents: {\n    name: 'UlnEvents',\n    0: {\n      fieldName: 'UlnEvents::workerEvents',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'UlnEvents::dvnFeesPaidEvent',\n      fieldType: 'cl::t::objRef',\n    },\n    2: {\n      fieldName: 'UlnEvents::executorFeePaidEvent',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  UlnReceiveConfig: {\n    name: 'UlnRecvCfg',\n    0: {\n      fieldName: 'UlnReceiveConfig::minCommitPacketGasNull',\n      fieldType: 'cl::t::bool',\n    },\n    1: {\n      fieldName: 'UlnReceiveConfig::minCommitPacketGas',\n      fieldType: 'cl::t::uint32',\n    },\n    2: {\n      fieldName: 'UlnReceiveConfig::confirmationsNull',\n      fieldType: 'cl::t::bool',\n    },\n    3: {\n      fieldName: 'UlnReceiveConfig::confirmations',\n      fieldType: 'cl::t::uint64',\n    },\n    4: {\n      fieldName: 'UlnReceiveConfig::requiredDVNsNull',\n      fieldType: 'cl::t::bool',\n    },\n    5: {\n      fieldName: 'UlnReceiveConfig::requiredDVNs',\n      fieldType: 'cl::t::addressList',\n    },\n    6: {\n      fieldName: 'UlnReceiveConfig::optionalDVNsNull',\n      fieldType: 'cl::t::bool',\n    },\n    7: {\n      fieldName: 'UlnReceiveConfig::optionalDVNs',\n      fieldType: 'cl::t::addressList',\n    },\n    8: {\n      fieldName: 'UlnReceiveConfig::optionalDVNThreshold',\n      fieldType: 'cl::t::uint8',\n    },\n  },\n  'UlnReceiveConfig::NewWithDefaults': {\n    name: 'UlnRecvCfg',\n  },\n  'md::UlnSend': {\n    name: 'UlnSend',\n    0: {\n      fieldName: 'md::UlnSend::lzSend',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'md::UlnSend::customUlnSendConfig',\n      fieldType: 'cl::t::objRef',\n    },\n    2: {\n      fieldName: 'md::UlnSend::connectionInitialStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    3: {\n      fieldName: 'md::UlnSend::forwardingAddress',\n      fieldType: 'cl::t::address',\n    },\n  },\n  UlnSendConfig: {\n    name: 'UlnSendCfg',\n    0: {\n      fieldName: 'UlnSendConfig::workerQuoteGasLimit',\n      fieldType: 'cl::t::uint32',\n    },\n    1: {\n      fieldName: 'UlnSendConfig::maxMessageBytes',\n      fieldType: 'cl::t::uint32',\n    },\n    2: {\n      fieldName: 'UlnSendConfig::executorNull',\n      fieldType: 'cl::t::bool',\n    },\n    3: {\n      fieldName: 'UlnSendConfig::executor',\n      fieldType: 'cl::t::address',\n    },\n    4: {\n      fieldName: 'UlnSendConfig::requiredDVNsNull',\n      fieldType: 'cl::t::bool',\n    },\n    5: {\n      fieldName: 'UlnSendConfig::requiredDVNs',\n      fieldType: 'cl::t::addressList',\n    },\n    6: {\n      fieldName: 'UlnSendConfig::optionalDVNsNull',\n      fieldType: 'cl::t::bool',\n    },\n    7: {\n      fieldName: 'UlnSendConfig::optionalDVNs',\n      fieldType: 'cl::t::addressList',\n    },\n    8: {\n      fieldName: 'UlnSendConfig::confirmationsNull',\n      fieldType: 'cl::t::bool',\n    },\n    9: {\n      fieldName: 'UlnSendConfig::confirmations',\n      fieldType: 'cl::t::uint64',\n    },\n  },\n  'UlnSendConfig::NewWithDefaults': {\n    name: 'UlnSendCfg',\n  },\n  'md::UlnVerification': {\n    name: 'UlnVerify',\n    0: {\n      fieldName: 'md::UlnVerification::nonce',\n      fieldType: 'cl::t::uint64',\n    },\n    1: {\n      fieldName: 'md::UlnVerification::attestation',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  'md::UlnWorkerFeelibBytecode': {\n    name: 'Ulnbytecod',\n    0: {\n      fieldName: 'md::UlnWorkerFeelibBytecode::bytecode',\n      fieldType: 'cl::t::cellRef',\n    },\n  },\n  'md::UlnWorkerFeelibEvents': {\n    name: 'UlnWrkEvnt',\n    0: {\n      fieldName: 'md::UlnWorkerFeelibEvents::workerAddress',\n      fieldType: 'cl::t::address',\n    },\n    1: {\n      fieldName: 'md::UlnWorkerFeelibEvents::workerEvents',\n      fieldType: 'cl::t::objRef',\n    },\n    2: {\n      fieldName: 'md::UlnWorkerFeelibEvents::nextWorkerEvents',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  UlnWorkerFeelibInfo: {\n    name: 'UlnWrkInfo',\n    0: {\n      fieldName: 'UlnWorkerFeelibInfo::workerAddress',\n      fieldType: 'cl::t::address',\n    },\n    1: {\n      fieldName: 'UlnWorkerFeelibInfo::workerFeelibBytecode',\n      fieldType: 'cl::t::cellRef',\n    },\n    2: {\n      fieldName: 'UlnWorkerFeelibInfo::workerFeelibStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    3: {\n      fieldName: 'UlnWorkerFeelibInfo::friendWorkerAddress',\n      fieldType: 'cl::t::address',\n    },\n    4: {\n      fieldName: 'UlnWorkerFeelibInfo::dstEid',\n      fieldType: 'cl::t::uint32',\n    },\n    5: {\n      fieldName: 'UlnWorkerFeelibInfo::rentBalance',\n      fieldType: 'cl::t::coins',\n    },\n    6: {\n      fieldName: 'UlnWorkerFeelibInfo::lastRentTimestamp',\n      fieldType: 'cl::t::uint64',\n    },\n    7: {\n      fieldName: 'UlnWorkerFeelibInfo::isAdmin',\n      fieldType: 'cl::t::bool',\n    },\n  },\n  'md::VerificationStatus': {\n    name: 'veristatus',\n    0: {\n      fieldName: 'md::VerificationStatus::nonce',\n      fieldType: 'cl::t::uint64',\n    },\n    1: {\n      fieldName: 'md::VerificationStatus::status',\n      fieldType: 'cl::t::uint32',\n    },\n  },\n  Uln: {\n    name: 'uln',\n    0: {\n      fieldName: 'Uln::baseStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'Uln::eid',\n      fieldType: 'cl::t::uint32',\n    },\n    2: {\n      fieldName: 'Uln::dstEid',\n      fieldType: 'cl::t::uint32',\n    },\n    3: {\n      fieldName: 'Uln::defaultUlnReceiveConfig',\n      fieldType: 'cl::t::objRef',\n    },\n    4: {\n      fieldName: 'Uln::defaultUlnSendConfig',\n      fieldType: 'cl::t::objRef',\n    },\n    5: {\n      fieldName: 'Uln::connectionCode',\n      fieldType: 'cl::t::cellRef',\n    },\n    6: {\n      fieldName: 'Uln::workerFeelibInfos',\n      fieldType: 'cl::t::dict256',\n    },\n    7: {\n      fieldName: 'Uln::treasuryFeeBps',\n      fieldType: 'cl::t::uint16',\n    },\n    8: {\n      fieldName: 'Uln::remainingWorkerSlots',\n      fieldType: 'cl::t::uint16',\n    },\n    9: {\n      fieldName: 'Uln::remainingAdminWorkerSlots',\n      fieldType: 'cl::t::uint16',\n    },\n  },\n  UlnConnection: {\n    name: 'connection',\n    0: {\n      fieldName: 'UlnConnection::baseStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'UlnConnection::path',\n      fieldType: 'cl::t::objRef',\n    },\n    2: {\n      fieldName: 'UlnConnection::endpointAddress',\n      fieldType: 'cl::t::address',\n    },\n    3: {\n      fieldName: 'UlnConnection::channelAddress',\n      fieldType: 'cl::t::address',\n    },\n    4: {\n      fieldName: 'UlnConnection::firstUnexecutedNonce',\n      fieldType: 'cl::t::uint64',\n    },\n    5: {\n      fieldName: 'UlnConnection::ulnAddress',\n      fieldType: 'cl::t::address',\n    },\n    6: {\n      fieldName: 'UlnConnection::UlnSendConfigOApp',\n      fieldType: 'cl::t::objRef',\n    },\n    7: {\n      fieldName: 'UlnConnection::UlnReceiveConfigOApp',\n      fieldType: 'cl::t::objRef',\n    },\n    8: {\n      fieldName: 'UlnConnection::hashLookups',\n      fieldType: 'cl::t::dict256',\n    },\n    9: {\n      fieldName: 'UlnConnection::commitPOOO',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  UlnManager: {\n    name: 'ulnMgr',\n    0: {\n      fieldName: 'UlnManager::baseStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'UlnManager::ulnCode',\n      fieldType: 'cl::t::cellRef',\n    },\n    2: {\n      fieldName: 'UlnManager::ulnConnectionCode',\n      fieldType: 'cl::t::cellRef',\n    },\n    3: {\n      fieldName: 'UlnManager::controllerAddress',\n      fieldType: 'cl::t::address',\n    },\n    4: {\n      fieldName: 'UlnManager::eid',\n      fieldType: 'cl::t::uint32',\n    },\n    5: {\n      fieldName: 'UlnManager::endpointCode',\n      fieldType: 'cl::t::cellRef',\n    },\n    6: {\n      fieldName: 'UlnManager::channelCode',\n      fieldType: 'cl::t::cellRef',\n    },\n    7: {\n      fieldName: 'UlnManager::workerFeelibBytecodes',\n      fieldType: 'cl::t::dict256',\n    },\n    8: {\n      fieldName: 'UlnManager::adminWorkers',\n      fieldType: 'cl::t::addressList',\n    },\n    9: {\n      fieldName: 'UlnManager::tentativeOwner',\n      fieldType: 'cl::t::address',\n    },\n  },\n  DvnFeelib: {\n    name: 'UlnDvnFl',\n    0: {\n      fieldName: 'DvnFeelib::quorum',\n      fieldType: 'cl::t::uint64',\n    },\n    1: {\n      fieldName: 'DvnFeelib::remoteGas',\n      fieldType: 'cl::t::uint64',\n    },\n    2: {\n      fieldName: 'DvnFeelib::multiplierBps',\n      fieldType: 'cl::t::uint16',\n    },\n    3: {\n      fieldName: 'DvnFeelib::floorMarginUSD',\n      fieldType: 'cl::t::coins',\n    },\n  },\n  ExecutorFeelib: {\n    name: 'UlnExecutr',\n    0: {\n      fieldName: 'ExecutorFeelib::lzReceiveBaseGas',\n      fieldType: 'cl::t::uint64',\n    },\n    1: {\n      fieldName: 'ExecutorFeelib::multiplierBps',\n      fieldType: 'cl::t::uint16',\n    },\n    2: {\n      fieldName: 'ExecutorFeelib::floorMarginUSD',\n      fieldType: 'cl::t::coins',\n    },\n    3: {\n      fieldName: 'ExecutorFeelib::nativeCap',\n      fieldType: 'cl::t::coins',\n    },\n    4: {\n      fieldName: 'ExecutorFeelib::lzComposeBaseGas',\n      fieldType: 'cl::t::uint64',\n    },\n  },\n  ArbitrumPriceFeedExtension: {\n    name: 'ArbFeeExt',\n    0: {\n      fieldName: 'ArbitrumPriceFeedExtension::gasPerL2Tx',\n      fieldType: 'cl::t::uint64',\n    },\n    1: {\n      fieldName: 'ArbitrumPriceFeedExtension::gasPerL1CallDataByte',\n      fieldType: 'cl::t::uint32',\n    },\n  },\n  PriceFeedFeelib: {\n    name: 'PFFeelib',\n    0: {\n      fieldName: 'PriceFeedFeelib::priceRatio',\n      fieldType: 'cl::t::coins',\n    },\n    1: {\n      fieldName: 'PriceFeedFeelib::gasPriceInRemoteUnit',\n      fieldType: 'cl::t::uint64',\n    },\n    2: {\n      fieldName: 'PriceFeedFeelib::gasPerByte',\n      fieldType: 'cl::t::uint32',\n    },\n    3: {\n      fieldName: 'PriceFeedFeelib::nativePriceUsd',\n      fieldType: 'cl::t::coins',\n    },\n    4: {\n      fieldName: 'PriceFeedFeelib::arbitrumExtension',\n      fieldType: 'cl::t::objRef',\n    },\n    5: {\n      fieldName: 'PriceFeedFeelib::optimismExtension',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  WorkerCoreStorage: {\n    name: 'wrkCorStor',\n    0: {\n      fieldName: 'WorkerCoreStorage::admins',\n      fieldType: 'cl::t::addressList',\n    },\n    1: {\n      fieldName: 'WorkerCoreStorage::proxy',\n      fieldType: 'cl::t::address',\n    },\n    2: {\n      fieldName: 'WorkerCoreStorage::version',\n      fieldType: 'cl::t::uint256',\n    },\n  },\n  Dvn: {\n    name: 'dvn',\n    0: {\n      fieldName: 'Dvn::workerCoreStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'Dvn::quorum',\n      fieldType: 'cl::t::uint64',\n    },\n    2: {\n      fieldName: 'Dvn::verifiers',\n      fieldType: 'cl::t::dict256',\n    },\n    3: {\n      fieldName: 'Dvn::setQuorumNonce',\n      fieldType: 'cl::t::uint64',\n    },\n    4: {\n      fieldName: 'Dvn::setVerifiersNonce',\n      fieldType: 'cl::t::uint64',\n    },\n    5: {\n      fieldName: 'Dvn::setAdminsByQuorumNonce',\n      fieldType: 'cl::t::uint64',\n    },\n  },\n  Executor: {\n    name: 'executor',\n    0: {\n      fieldName: 'Executor::workerCoreStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'Executor::nativeDropTotalCap',\n      fieldType: 'cl::t::coins',\n    },\n  },\n  'md::ClaimTon': {\n    name: 'claimTon',\n    0: {\n      fieldName: 'md::ClaimTon::amount',\n      fieldType: 'cl::t::coins',\n    },\n    1: {\n      fieldName: 'md::ClaimTon::target',\n      fieldType: 'cl::t::address',\n    },\n  },\n  'md::ExecuteParams': {\n    name: 'execParams',\n    0: {\n      fieldName: 'md::ExecuteParams::target',\n      fieldType: 'cl::t::address',\n    },\n    1: {\n      fieldName: 'md::ExecuteParams::callData',\n      fieldType: 'cl::t::objRef',\n    },\n    2: {\n      fieldName: 'md::ExecuteParams::expiration',\n      fieldType: 'cl::t::uint64',\n    },\n    3: {\n      fieldName: 'md::ExecuteParams::opcode',\n      fieldType: 'cl::t::uint32',\n    },\n    4: {\n      fieldName: 'md::ExecuteParams::forwardingAddress',\n      fieldType: 'cl::t::address',\n    },\n  },\n  'md::NativeDrop': {\n    name: 'NativeDrop',\n    0: {\n      fieldName: 'md::NativeDrop::payees',\n      fieldType: 'cl::t::cellRef',\n    },\n    1: {\n      fieldName: 'md::NativeDrop::packetId',\n      fieldType: 'cl::t::objRef',\n    },\n    2: {\n      fieldName: 'md::NativeDrop::msglib',\n      fieldType: 'cl::t::address',\n    },\n  },\n  'md::SetDict': {\n    name: 'setDct',\n    0: {\n      fieldName: 'md::SetDict::nonce',\n      fieldType: 'cl::t::uint64',\n    },\n    1: {\n      fieldName: 'md::SetDict::opcode',\n      fieldType: 'cl::t::uint64',\n    },\n    2: {\n      fieldName: 'md::SetDict::dict',\n      fieldType: 'cl::t::dict256',\n    },\n    3: {\n      fieldName: 'md::SetDict::target',\n      fieldType: 'cl::t::address',\n    },\n  },\n  'md::SetQuorum': {\n    name: 'setQuorum',\n    0: {\n      fieldName: 'md::SetQuorum::nonce',\n      fieldType: 'cl::t::uint64',\n    },\n    1: {\n      fieldName: 'md::SetQuorum::opcode',\n      fieldType: 'cl::t::uint64',\n    },\n    2: {\n      fieldName: 'md::SetQuorum::quorum',\n      fieldType: 'cl::t::uint64',\n    },\n    3: {\n      fieldName: 'md::SetQuorum::target',\n      fieldType: 'cl::t::address',\n    },\n  },\n  'md::SignedRequest': {\n    name: 'sgndReq',\n    0: {\n      fieldName: 'md::SignedRequest::request',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'md::SignedRequest::signatures',\n      fieldType: 'cl::t::dict256',\n    },\n  },\n  PriceFeedCache: {\n    name: 'pfCache',\n    0: {\n      fieldName: 'PriceFeedCache::workerCoreStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'PriceFeedCache::priceFeedFeeLibStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    2: {\n      fieldName: 'PriceFeedCache::dstEid',\n      fieldType: 'cl::t::uint32',\n    },\n  },\n  Proxy: {\n    name: 'pfProxy',\n    0: {\n      fieldName: 'Proxy::workerCoreStorage',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'Proxy::callbackEnabled',\n      fieldType: 'cl::t::bool',\n    },\n  },\n  Address: {\n    name: 'Address',\n    0: {\n      fieldName: 'Address::address',\n      fieldType: 'cl::t::address',\n    },\n  },\n  Amount: {\n    name: 'Amount',\n    0: {\n      fieldName: 'Amount::amount',\n      fieldType: 'cl::t::coins',\n    },\n  },\n  CostAsserts: {\n    name: 'CostAssert',\n    0: {\n      fieldName: 'CostAsserts::maxPriceRatioArbitrum',\n      fieldType: 'cl::t::coins',\n    },\n    1: {\n      fieldName: 'CostAsserts::maxGasPriceArbitrum',\n      fieldType: 'cl::t::uint64',\n    },\n    2: {\n      fieldName: 'CostAsserts::maxPriceRatioCelo',\n      fieldType: 'cl::t::coins',\n    },\n    3: {\n      fieldName: 'CostAsserts::maxGasPriceCelo',\n      fieldType: 'cl::t::uint64',\n    },\n    4: {\n      fieldName: 'CostAsserts::maxPriceRatioEth',\n      fieldType: 'cl::t::coins',\n    },\n    5: {\n      fieldName: 'CostAsserts::maxGasPriceEth',\n      fieldType: 'cl::t::uint64',\n    },\n    6: {\n      fieldName: 'CostAsserts::maxPriceRatioTron',\n      fieldType: 'cl::t::coins',\n    },\n    7: {\n      fieldName: 'CostAsserts::maxGasPriceTron',\n      fieldType: 'cl::t::uint64',\n    },\n  },\n  Fee: {\n    name: 'Fee',\n    0: {\n      fieldName: 'Fee::bps',\n      fieldType: 'cl::t::uint16',\n    },\n  },\n  GasAsserts: {\n    name: 'GasAssert',\n    0: {\n      fieldName: 'GasAsserts::sendOFTGas',\n      fieldType: 'cl::t::uint32',\n    },\n    1: {\n      fieldName: 'GasAsserts::sendOFTGasReceiveGas',\n      fieldType: 'cl::t::uint32',\n    },\n    2: {\n      fieldName: 'GasAsserts::sendCreditsGas',\n      fieldType: 'cl::t::uint32',\n    },\n    3: {\n      fieldName: 'GasAsserts::sendCreditsGasReceiveGas',\n      fieldType: 'cl::t::uint32',\n    },\n    4: {\n      fieldName: 'GasAsserts::lzReceiveExecuteCallbackGas',\n      fieldType: 'cl::t::uint32',\n    },\n  },\n  MdError: {\n    name: 'MdError',\n    0: {\n      fieldName: 'MdError::md',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'MdError::errorCode',\n      fieldType: 'cl::t::uint256',\n    },\n  },\n  MdGuid: {\n    name: 'MdGuid',\n    0: {\n      fieldName: 'MdGuid::md',\n      fieldType: 'cl::t::objRef',\n    },\n    1: {\n      fieldName: 'MdGuid::guid',\n      fieldType: 'cl::t::uint256',\n    },\n  },\n  OFTCredits: {\n    name: 'OFTCredits',\n    0: {\n      fieldName: 'OFTCredits::dstEid',\n      fieldType: 'cl::t::uint32',\n    },\n    1: {\n      fieldName: 'OFTCredits::creditsArbitrum',\n      fieldType: 'cl::t::uint64',\n    },\n    2: {\n      fieldName: 'OFTCredits::creditsCelo',\n      fieldType: 'cl::t::uint64',\n    },\n    3: {\n      fieldName: 'OFTCredits::creditsEth',\n      fieldType: 'cl::t::uint64',\n    },\n    4: {\n      fieldName: 'OFTCredits::creditsTon',\n      fieldType: 'cl::t::uint64',\n    },\n    5: {\n      fieldName: 'OFTCredits::creditsTron',\n      fieldType: 'cl::t::uint64',\n    },\n    6: {\n      fieldName: 'OFTCredits::nativeFee',\n      fieldType: 'cl::t::coins',\n    },\n    7: {\n      fieldName: 'OFTCredits::zroFee',\n      fieldType: 'cl::t::coins',\n    },\n    8: {\n      fieldName: 'OFTCredits::extraOptions',\n      fieldType: 'cl::t::objRef',\n    },\n  },\n  OFTSend: {\n    name: 'OFTSend',\n    0: {\n      fieldName: 'OFTSend::dstEid',\n      fieldType: 'cl::t::uint32',\n    },\n    1: {\n      fieldName: 'OFTSend::to',\n      fieldType: 'cl::t::address',\n    },\n    2: {\n      fieldName: 'OFTSend::minAmount',\n      fieldType: 'cl::t::coins',\n    },\n    3: {\n      fieldName: 'OFTSend::nativeFee',\n      fieldType: 'cl::t::coins',\n    },\n    4: {\n      fieldName: 'OFTSend::zroFee',\n      fieldType: 'cl::t::coins',\n    },\n    5: {\n      fieldName: 'OFTSend::extraOptions',\n      fieldType: 'cl::t::objRef',\n    },\n    6: {\n      fieldName: 'OFTSend::composeMessage',\n      fieldType: 'cl::t::cellRef',\n    },\n  },\n  RecoverUsdt: {\n    name: 'RcvUsdt',\n    0: {\n      fieldName: 'RecoverUsdt::to',\n      fieldType: 'cl::t::address',\n    },\n    1: {\n      fieldName: 'RecoverUsdt::amount',\n      fieldType: 'cl::t::uint64',\n    },\n    2: {\n      fieldName: 'RecoverUsdt::recoveryTimeout',\n      fieldType: 'cl::t::uint64',\n    },\n  },\n  SetPeer: {\n    name: 'SetPeer',\n    0: {\n      fieldName: 'SetPeer::eid',\n      fieldType: 'cl::t::uint32',\n    },\n    1: {\n      fieldName: 'SetPeer::peer',\n      fieldType: 'cl::t::address',\n    },\n  },\n  TokenTransfer: {\n    name: 'TknTrsfer',\n    0: {\n      fieldName: 'TokenTransfer::to',\n      fieldType: 'cl::t::address',\n    },\n    1: {\n      fieldName: 'TokenTransfer::amount',\n      fieldType: 'cl::t::coins',\n    },\n  },\n} as const;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nexport default isSymbol;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nexport default arrayMap;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","import Symbol from './_Symbol.js';\nimport arrayMap from './_arrayMap.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n","import baseToString from './_baseToString.js';\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nexport default toString;\n","import toString from './toString.js';\n\n/**\n * Replaces matches for `pattern` in `string` with `replacement`.\n *\n * **Note:** This method is based on\n * [`String#replace`](https://mdn.io/String/replace).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to modify.\n * @param {RegExp|string} pattern The pattern to replace.\n * @param {Function|string} replacement The match replacement.\n * @returns {string} Returns the modified string.\n * @example\n *\n * _.replace('Hi Fred', 'Fred', 'Barney');\n * // => 'Hi Barney'\n */\nfunction replace() {\n  var args = arguments,\n      string = toString(args[0]);\n\n  return args.length < 3 ? string : string.replace(args[1], args[2]);\n}\n\nexport default replace;\n","import {replace} from 'lodash-es';\n\nexport function ulnConfigKey(oftName: string, srcChainKey: string, dstChainKey: string) {\n  return `${oftName}_${replace(srcChainKey.toUpperCase(), '-', '_')}_${replace(dstChainKey.toUpperCase(), '-', '_')}`;\n}\n","import {TonClient} from '@ton/ton';\nimport {OftBridgeConfig} from '../types';\nimport {OftBridgeV3__ton} from './OftBridgeV3__ton';\nimport {AddressConfig, LoadedUlnConfig} from './types';\n\nexport class OftBridgeApiFactory__ton {\n  constructor(\n    protected readonly client: TonClient,\n    protected readonly addressConfig: AddressConfig,\n    protected readonly ulnConfigs: Record<string, LoadedUlnConfig>,\n  ) {}\n  create(config: OftBridgeConfig): OftBridgeV3__ton {\n    const impl =\n      config.version === 3\n        ? new OftBridgeV3__ton(this.client, config, this.addressConfig, this.ulnConfigs)\n        : undefined;\n    if (!impl) {\n      throw new Error('Unsupported Config version');\n    }\n    return impl;\n  }\n}\n"]}