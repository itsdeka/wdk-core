{"version":3,"sources":["../src/types/zod.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  assert,\n  currencySchema,\n  endpointIdToChainKey,\n  serializeCurrency,\n  tokenSchema,\n} from '@layerzerolabs/ui-core';\nimport z from 'zod';\nimport type {OftBridgeConfig} from './OftBridgeConfig';\n\nconst deploymentSchemaBase = z.object({\n  eid: z.number(),\n  token: currencySchema,\n  tokenEscrow: z.object({address: z.string()}).optional(),\n  executorLzReceiveOption: z\n    .object({gasLimit: z.number(), nativeValue: z.number().optional()})\n    .optional(),\n  destinationChains: z.array(z.string()).optional(),\n});\n\nconst deploymentSchemaOft = deploymentSchemaBase.extend({\n  token: tokenSchema,\n  oft: z.object({programId: z.string()}).optional(),\n});\n\nconst deploymentSchemaOftProxy = deploymentSchemaBase.extend({\n  oftProxy: z.object({\n    address: z.string(),\n    approvalRequired: z.boolean().optional(),\n  }),\n});\n\nconst deploymentSchemaOftNative = deploymentSchemaBase.extend({\n  oftNative: z.object({address: z.string()}),\n});\n\nconst deploymentSchemaMultiAdapter = deploymentSchemaBase.extend({\n  oftProxy: z.object({\n    address: z.string(),\n    approvalRequired: z.boolean().optional(),\n  }),\n  oftNative: z.object({address: z.string()}),\n});\n\nexport const oftBridgeConfigSchema = z\n  .object({\n    fee: z.boolean(),\n    version: z.string().or(z.number()),\n    sharedDecimals: z.number(),\n    deployments: z.record(\n      z.union([\n        // order matters:\n        deploymentSchemaMultiAdapter,\n        deploymentSchemaOftNative,\n        deploymentSchemaOftProxy,\n        deploymentSchemaOft,\n      ]),\n    ),\n  })\n  .transform((input, err) => {\n    const config: OftBridgeConfig = {\n      version: input.version,\n      fee: input.fee,\n      sharedDecimals: input.sharedDecimals,\n      deployments: {},\n    };\n    for (const chainKey in input.deployments) {\n      const deployment = input.deployments[chainKey];\n      let oftProxy, oftNative, oft;\n\n      if ('oftProxy' in deployment) {\n        oftProxy = {\n          chainKey,\n          address: deployment.oftProxy.address,\n          approvalRequired: deployment.oftProxy.approvalRequired,\n        };\n      }\n      if ('oftNative' in deployment) {\n        oftNative = {\n          address: deployment.oftNative.address,\n          chainKey,\n        };\n      }\n      if ('oft' in deployment) {\n        oft = {\n          address: deployment.token.address,\n          chainKey,\n          programId: deployment.oft?.programId,\n        };\n      }\n      config.deployments[chainKey] = {\n        eid: deployment.eid,\n        oftProxy,\n        oftNative,\n        oft,\n        token: deployment.token,\n        tokenEscrow: deployment.tokenEscrow,\n        executorLzReceiveOption: deployment.executorLzReceiveOption,\n        destinationChains: deployment.destinationChains,\n      };\n      // check if token has same chainKey as deployment\n      if (chainKey !== deployment.token.chainKey) {\n        err.addIssue({\n          code: z.ZodIssueCode.custom,\n          params: {\n            chainKey: chainKey,\n            token: deployment.token,\n          },\n          path: ['deployments', chainKey, 'token'],\n          message: 'Invalid chainKey',\n        });\n      }\n      if (deployment.token.decimals < config.sharedDecimals) {\n        err.addIssue({\n          code: z.ZodIssueCode.custom,\n          params: {\n            token: deployment.token,\n            decimals: deployment.token.decimals,\n            sharedDecimals: config.sharedDecimals,\n          },\n          message: 'Invalid sharedDecimals',\n        });\n      }\n      // version 3 must use Endpoint V2\n      if (config.version === 3) {\n        if (deployment.eid < 30101) {\n          err.addIssue({\n            code: z.ZodIssueCode.custom,\n            params: {\n              eid: deployment.eid,\n            },\n            path: ['deployments', chainKey, 'eid'],\n            message: 'Invalid eid',\n          });\n        }\n      }\n    }\n    return config;\n  });\n\nexport type SerializedOftBridgeConfig = z.input<typeof oftBridgeConfigSchema>;\n\nexport function createOftBridgeConfig(input: SerializedOftBridgeConfig): OftBridgeConfig {\n  const chainKeys = Object.keys(input.deployments).reduce((totalSet, chainKey) => {\n    totalSet.add(chainKey);\n    return totalSet;\n  }, new Set<string>());\n\n  for (const chainKey in input.deployments) {\n    const deployment = input.deployments[chainKey];\n    const token = deployment.token;\n\n    const chainKeyFromEid =\n      deployment.eid === 108\n        ? 'aptos'\n        : deployment.eid === 30168\n          ? 'solana'\n          : endpointIdToChainKey(deployment.eid);\n\n    assert(\n      deployment.token.chainKey === chainKey,\n      `Deployment key ${chainKey} does not match token chainKey ${token.chainKey}`,\n    );\n    assert(\n      chainKeyFromEid === chainKey,\n      `Deployment eid ${deployment.eid} does not match expected chainKey ${chainKeyFromEid}`,\n    );\n\n    if (deployment.destinationChains) {\n      deployment.destinationChains.forEach((dstChainKey) => {\n        assert(\n          chainKeys.has(dstChainKey),\n          `Destination chain ${dstChainKey} does not have a matching config`,\n        );\n      });\n    }\n  }\n\n  return oftBridgeConfigSchema.parse(input);\n}\n\nexport function serializeOftBridgeConfig(input: OftBridgeConfig): SerializedOftBridgeConfig {\n  const serialized: SerializedOftBridgeConfig = {\n    version: input.version,\n    fee: input.fee,\n    sharedDecimals: input.sharedDecimals,\n    deployments: {},\n  };\n  for (const chainKey in input.deployments) {\n    const deployment = input.deployments[chainKey];\n    const {eid} = deployment;\n    const token = serializeCurrency(deployment.token);\n    const {tokenEscrow, executorLzReceiveOption, destinationChains} = deployment;\n    const deploymentData: any = {\n      eid,\n      token,\n      tokenEscrow,\n      executorLzReceiveOption,\n      destinationChains,\n    };\n\n    if (deployment.oftProxy) {\n      deploymentData.oftProxy = {\n        address: deployment.oftProxy.address,\n      };\n    }\n    if (deployment.oftNative) {\n      deploymentData.oftNative = {\n        address: deployment.oftNative.address,\n      };\n    }\n    if (deployment.oft) {\n      deploymentData.token = {\n        ...token,\n        // token.address and oft.address should be the same\n        address: deployment.oft.address,\n      };\n    }\n\n    serialized.deployments[chainKey] = deploymentData;\n  }\n  return serialized;\n}\n"]}